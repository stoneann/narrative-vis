{"nodes": [{"id": 1, "value": ""}, {"id": 3, "value": "1. We don't release information about private tests. As a matter of fact, I can't even see error messages of your private tests. If you'd like to discuss it, proffice hours would be a good place.. . 2. Unfortunately, we don't accept regrade requests after the deadline. A regrade request gives us a second chance to look at your answer more closely with a fresh mind, so it is unlikely that there is still a mistake. If you do believe there is still an error or would like to discuss with someone to understand your error better, you are more than welcome to attend staff office hours or proffice hours."}, {"id": 4, "value": "Unfortunately we\u2019re unable to do this :( \u2026"}, {"id": 5, "value": "This is valid -- this means that your card, pack, and / or player implementation was incorrect, but euchre.exe provides the correct output on test22 when plugging in the correct card / pack / player."}, {"id": 9, "value": "Your overall (public + private tests)\u00a0best score is your final score for this project, not necessarily the score of the last submission."}, {"id": 14, "value": "This means your code did not pass the prerequisites for style checking to be run. Please see the style checking tutorial: https://eecs280staff.github.io/tutorials/setup_style.html"}, {"id": 15, "value": "You have two nested for-loops of depth 5, which exceeds the limit of 4.. Whenever you have a nested for/while/if, it adds one more depth. A depth 2 nested for-loop \u00a0could \u00a0look like this:\u00a0. for (...) {. \u00a0 for (...) {. \u00a0 \u00a0\u00a0}. }. A depth 5 nested for-loop could look like this:. for (...) {. \u00a0 for (...) {. \u00a0 \u00a0 if (...) {. \u00a0 \u00a0 \u00a0 while(...) {. \u00a0 \u00a0 \u00a0 \u00a0 if (...) {. \u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0}. \u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0}. \u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0}. \u00a0 \u00a0\u00a0}. }. "}, {"id": 16, "value": "Deep nesting means that you have too many nested cpp elements. This includes if/else, for, while, functions (anything that has the {}). Ways to limit your deep nesting is creating helper functions or re-evaluating your logic. Try to combine cases so you don't need as many nested {}.. . Example:. . if { if { while { for {} } } }"}, {"id": 17, "value": "See @3052 and see if any of those solutions work for you."}, {"id": 18, "value": "marking as resolved because project is over. please follow up if more explanation desired."}, {"id": 27, "value": "It means you're either dereferencing a pointer whose object has been deleted, or you're accessing a vector at an index that doesn't exist. Likely the second one if I were to guess."}, {"id": 31, "value": "I would check the call stack on the bottom left of the debugger and seeing which part of the constructor is causing issue. Since it's a vector out of range error, it'll likely lead to either line players = player or when the player parameter is copied."}, {"id": 33, "value": "All resolved never mind, just had to capitalize pack.cpp to Pack.cpp"}, {"id": 35, "value": ""}, {"id": 36, "value": "marking as resolved because project is over. please follow up if more explanation desired."}, {"id": 43, "value": "resolved"}, {"id": 45, "value": "There are 42 lines (net comments) in your `make_trump` function which exceeds the limit of 40."}, {"id": 47, "value": "You have to restructure your code to avoid the following problems:. 1. If the if clause isn't executed in line 286 in `euchre.cpp`, `next_suit` is uninitialized and would be returned by the function, which could cause undefined behaviors. My recommendations would be to make sure setting `next_suit` to something in all cases if you want to return.. 2. In line 106 of `euchre.cpp`, you are attempting to assign the member variable `trump` to itself, which doesn't make sense. Perhaps you want to assign it to some other values?"}, {"id": 50, "value": "This doesn't signify extra lines. Basically, the < points to the lines that are different on the left from the right. So on the left file, the \"Jack of Clubs played by Chi-Chi\" line matches up with the right file's \"Nine of Clubs played by Chi Chi\" line.. . Let me show you an example of 2 files differences: it inserts \"spaces\" to line up the rest and show you where the differences are with the <. Does that make sense?. . . . . "}, {"id": 52, "value": "I am going to mark this as resolved because I see you have full points on AG, if this issue persists please make a new post."}, {"id": 64, "value": ""}, {"id": 76, "value": "You don't need to include pack.h in player.cpp"}, {"id": 83, "value": "You're scoring function is 48 lines long."}, {"id": 86, "value": "You have to include the other files when compiling euchre.cpp in the command you're writing on the terminal.. . I suggest using the make command. . make euchre.exe"}, {"id": 88, "value": "Seems like after ordering up you are going out of bounds. I suggest setting a breakpoint in euchre after ordering up and seeing where the program aborts."}, {"id": 91, "value": ""}, {"id": 94, "value": ""}, {"id": 95, "value": "get_suit()\u00a0is a member function of class\u00a0Card, not\u00a0Suit. Also the return type should be\u00a0Suit, instead of string."}, {"id": 97, "value": ""}, {"id": 100, "value": "resolved"}, {"id": 104, "value": "double check you are including the algorithm library"}, {"id": 106, "value": ""}, {"id": 109, "value": "I suspect you have something like. . cout << \" \\n\";. So then you will have an extra space at the end of 27 before inserting a newline on 28"}, {"id": 113, "value": "Here are my go to strategies to have better style.\u00a0. . 1. Try breaking your function up into sections. Can you create a (or a few) helper functions to call inside the function. This would make the function shorter because a bulk of the code will be taken out and it can also get rid of some deep nesting. Lets say if you had 4 nested and you put 2 in the helper function. This would mean we have a deep nesting of 2 and 2 which passes.. . 2. I also try to think about simplifying/combining if/else statements. Especially in this project we have a lot of \"if this then do this\" logic so simplifying can make your code shorter and potentially less nested. Make a list of all the possible outcomes and what would result in each outcome (find overlap in the cases!). . I bet other students have this question so if you feel comfortable please make this post public!"}, {"id": 123, "value": "Make sure you do the setup tutorial for the new machine and vs code"}, {"id": 127, "value": ". I am noticing a whitespace error when I run test 00 but the whitespace when running test 01 and 50 are consistent with the solution. I am wondering if autograder will register this as an error or not.. . Yes. Your answer has to match the correct output when considering whitespace. I recommend using the debugger to see why the discrepancy appears."}, {"id": 133, "value": "If you encounter some sort of error like the file not being open or the strategies not being Simple/Human etc, then you should only print the error message and nothing else."}, {"id": 135, "value": "This may sound very tedious, but the best way to find this error is to see what card of what player is off, because it seems that your logic is either failing on an \"edge case\" of sorts where in one instance it doesn't do something properly. I recommend stepping through your deal function one card at a time. While stepping through, have each player's hand written down somewhere to compare it."}, {"id": 137, "value": "To help you understand shuffle, here is a visual on the ending indices after 7 \"shuffles\" (or one call of the shuffle function).. . "}, {"id": 141, "value": "See [here](https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/stl_vector.h)"}, {"id": 142, "value": "In my launch.json folder, I didn't have anything in the environment area. Also, here is my launch json file, but with a different argument list. Let me know if you need more help.\u00a0. . \u00a0{. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"(lldb) Launch\",. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"cppdbg\",. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"request\": \"launch\",. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"program\": \"${workspaceFolder}/euchre.exe\",. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"args\": [\"pack.in\", \"shuffle\", \"10\", \"Edsger\", \"Simple\", \"Fran\", \"Simple\",. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"Gabriel\", \"Simple\", \"Herb\", \"Simple\"],. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"stopAtEntry\": false,. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cwd\": \"${fileDirname}\",. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"environment\": [],. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"externalConsole\": false,. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"MIMode\": \"lldb\". \u00a0 \u00a0 \u00a0 \u00a0 },"}, {"id": 149, "value": "You can put the four players into a vector and pass it into the Game constructor. You can modify the parameters of the Game constructor however you wish.. . The filename looks right, just make sure it does indeed open the file when you go to test it.. "}, {"id": 153, "value": "On the autograder it looks like the problem has been fixed but please follow up if not."}, {"id": 165, "value": "Other teams with a similar error have found that something was wrong with their use or implementation of add_and_discard() - that would be where I would start. For hand 0, notice that Edsger is the dealer. This means that when Fran orders up, using the SimplePlayer add_and_discard strategy, Edsger should pick up the upcard (Nine of Hearts) and discard the lowest card in his hand (Ten of Diamonds)."}, {"id": 167, "value": "It looks that you called get_suit() on a card that didn't exist or a null pointer. You can check what happened after \"Dabbala passes\" step by step, and see if you called get_suit() somewhere (likely you used this function in your make_trump() function) and start debugging from there."}, {"id": 172, "value": "You are just slightly off in one of the function names. To check whether an ifstream is associated with a file, you should use\u00a0infile.is_open() rather than\u00a0infile.open(). Additionally, I would check the argument you are passing to the Pack non-default constructor. Is the Pack non-default constructor expecting the address of the ifstream?"}, {"id": 175, "value": "Check that you are using the correct command line argument number for the pack input file name. Command line arguments are passed into your main function through an array of c-style strings - char*[] argv. The first element,\u00a0argv[0], contains the name of the executable (euchre.exe). The fifth element, argv[4], contains the name of the first player (Adi). Think about what element of\u00a0argv you need to access for the pack input file name."}, {"id": 177, "value": "Did you declare a class called Player in Player.cpp (indicated by the firs error)? You are not supposed to define a Player class in Player.cpp since it is a virtual class. What you should do is define classes called Simple and Human that inherit from the Player interface. I suppose the error in your player tests would be resolved if you fix your class definitions."}, {"id": 182, "value": "Nothing immediately stands out to me as problematic from the screenshots of the driver that you provided, although it is very possible that I am overlooking something. I would recommend writing additional tests for the add_and_discard function itself to ensure it's truly adding the upcard to the dealer's hand when appropriate. Getting your debugger working for that portion would be ideal. What is going on with the debugger that's preventing you from stepping through that portion?"}, {"id": 187, "value": "@2311"}, {"id": 190, "value": "A lot of functions rely on other functions in euchre. Because of this, it's hard to immediately determine what is going wrong and where the error first occurs.\u00a0. . I recommend using your debugger to step through the code. I would make sure players are going when they should be, that they have the correct cards in their hand. You can also track the variable you believe is causing the loop to run an extra time."}, {"id": 197, "value": "The autograder is planned to come back online on Monday, March 6."}, {"id": 198, "value": "Have you tried restarting VSCode or rebooting your computer?"}, {"id": 199, "value": "There could be multiple reasons. Like the student mentioned, you may want to double check the you put Card.h file under the same folder. Also since the name of the class is \"Card\" not \"card\", whenever you create a card, you should use \"Card c\" instead of \"card c\". Sometimes trying to remake exes can help (in your case it would be make euchre.exe). You can also try closing your IDE/Editor, and reopening it. The IDE/Editor is not always smart enough to find the path to the files, so the last two \"solutions\" is asking it to restart from the beginning and try to find the files."}, {"id": 203, "value": "Run your code through CAEN, it will run your code in a similar environment to the autograder, and might help you figure it out. Just make sure address sanitizer is disabled because those two don't work together."}, {"id": 205, "value": ""}, {"id": 209, "value": "The student answer is correct if you are trying to debug euchre.cpp, but it looks like you want to debug the Player public test which does not take any arguments. First, make sure to follow the tutorial for whatever OS you are on (Mac or Windows), and then put whatever file you want to step through in the \"program\" part of the launch.json file (for instance, you would currently be running the Player public test). If you want to debug your own test cases and step through those, you would put\u00a0\"${workspaceFolder}/Player_tests.exe\"."}, {"id": 210, "value": ""}, {"id": 214, "value": "That is the error that gets printed when you call the program incorrectly, from the spec:. . . How are you using sdiff? You should be inputting two files, for example\u00a0sdiff euchre_test50.out euchre_test50.out.correct\u00a0"}, {"id": 216, "value": "You may have accidentally edited it the file. I generally rerun it again if it I get a weird diff check or output just to be sure I have a bug and I didn't just misrun the program."}, {"id": 217, "value": "It looks like you are creating an object that is abstract, which is not allowed in cpp. Player is an abstract class because it has at least one member function that is pure virtual. A pure virtual function is = 0 rather than has {/*implementation*/}. If you haven't implemented every function in Simple player, it will also be abstract because it will inherit the pure virtual function.\u00a0 Remember that you can only create Player * because you are not actually creating a player object itself. For more information on this, see the Player.cpp section of the P3 FAQ (@1463)."}, {"id": 224, "value": "congrats! I will mark as resolved"}, {"id": 225, "value": "Looking at your shuffle function in Pack, it looks like you are shuffling half the deck 7 times, then shuffling the other half of the deck 7 times. This is an incorrect implementation. It could be possible that by chance it worked the first time.. . A correct implementation creates a copy of the cards. The cards array is going to be overwritten with the card order. You can use the copy of the cards array to remember the original locations of each card before you started overwriting the cards array.. . When thinking about the actual overwriting during the shuffle function, I would try mapping the current index of the card and then the index of the spot you want it to end up in. You will see that there is a possible mapping so you can write cards[new index] = cards_copy[old index].. . Hope this helps!"}, {"id": 231, "value": "Note argv is an array of char pointers. How would you print the output of items of an array?"}, {"id": 235, "value": "yes we finished it over a few days ago. when we submitted to autograder two days ago it compiled fine \u00a0\u00a0"}, {"id": 240, "value": "Try running your code through CAEN, it'll run your code in a similar environment to the autograder - just make sure you turn off address sanitizer."}, {"id": 244, "value": "Error 139 means the program crashed before it reaches exit. As the test info says, there is a segmentation fault when running your driver."}, {"id": 246, "value": ". Would we have to derive two instances of the game driver to account how the game will run if we have simple players and how the game will run if we have human players?. . No, the game should run the same (same functions will be called for each player). Differences in how players act are handled within the player functions.. . . \u00a0If so, or somewhat along those lines, should we pass in a parameter that indicates that all players are either human or player? My point in doing this is to pass in their argument so then I can hard-code in my implementation:. Ex: If argument given to function is \"Human\", execute only printing who won the trick and not the other players and what card they play like Player does.\u00a0. . Since the previous answer is no, this doesn't really require an answer. However, note that a game can be played with both human and simple players. It is not required that all players are human / all players are simple. Also, printing should be handled inside the human player functions.. . . To distinguish which functions from Player.cpp need to be called, would we also utilize putting (Human::) or (Player::) by the functions we need to indicate to the compiler which ones to use?. . No. You are calling the functions on an object, so you would just call functions normally (if player1 is a pointer, then\u00a0player1->function() and if player1 is a value then\u00a0player1.function()).. . . Mini-Question: I basically created a .h file with RME's to help GSI/Professors/Peers understand my code and how my functions work/their sole purpose. Would this run into any error since I've created it for my driver?. . You cannot submit the .h file, so this is an issue. You should only be editing files which you are submitting, because edits made in other files / new files created will be completely ignored by the autograder. This is unless you want to just have like a cpp file for testing, like Pack_tests.cpp - you can still implement that since it will test your code, and does not affect anything."}, {"id": 247, "value": "players is a vector of pointers, so players[i] is a pointer to a player.. There are two things wrong with your code.. First, you need to do players.push_back(...) instead, since you are pushing into the vector, not into the pointer.Second, if you were trying to access a player function you would need to use -> instead of\u00a0. since that's how you access a function of a pointer."}, {"id": 255, "value": "See @2131"}, {"id": 273, "value": "resolved."}, {"id": 276, "value": "Remember that the hand for the player has to be sorted when printing it out (and in general, you can keep it sorted if you remember the invariant)"}, {"id": 279, "value": "Make sure Card is included in your build. Also make sure the function signature for lead function matches the one in Player.h"}, {"id": 283, "value": "Here's my suggestion, set a breakpoint on that assert statement. Keep pressing continue till the assert statement fails. In any IDE you use, you will see something called the \"call stack\" which shows what function is called add_card(). Add_card() will be on top of this stack, so click on the function below it to trace where it was called.. . "}, {"id": 284, "value": "Could you share more of your game class code?"}, {"id": 287, "value": "Yes it is down and we are aware of the situation."}, {"id": 292, "value": ""}, {"id": 294, "value": ""}, {"id": 295, "value": "You should set up your debugger to take in euchre_test50.in as an input redirection and the rest of the necessary arguments as command-line arguments. Visit the tutorials page to see how to set it up for your IDE.The rest of it will be normal debugging, so you want to set a breakpoint and continue from there. There is also a debugging tutorial available on the website."}, {"id": 297, "value": "This might be an issue with how you use Player_factory and create pointers. I have made this post private please post a screenshot of the test case (test_player_play_card) and your Player_factory."}, {"id": 299, "value": "Make sure to put the arguments and input file as necessary in your launch.json, per the tutorial."}, {"id": 309, "value": "You are calling pack::shuffle() it seems like. You want to make sure to call shuffle for the pack variable you have created. For instance,\u00a0. . Pack p;. p.shuffle();"}, {"id": 313, "value": "This is a segfault. You're most likely either indexing out of bounds or trying to dereference an invalid pointer."}, {"id": 315, "value": "The screenshot is corrupted. Please try attaching a file ending in .jpg or .png"}, {"id": 318, "value": "@2131"}, {"id": 320, "value": "You're using\u00a0strcmp\u00a0in euchre.cpp, which requires you to\u00a0#include <cassert>."}, {"id": 324, "value": "What do you mean by initialize privately? If you mean that they are initialized directly in private, then that might be causing an issue. Your private member variables are like blueprints, you haven\u2019t actually made the Game class yet and they can\u2019t be assigned values since you don\u2019t have the Game object. So in your constructor, you probably want to call them and set their values to some default value since that\u2019s when you make the Game object and give your values"}, {"id": 326, "value": ""}, {"id": 330, "value": "Algorithm is a library for the C++ Standard Library that you are including in your files. You do not need to delete that file, and it is not locally on your computer.. . Your IDE may show you that the error is in a Standard Library function but those errors will stem from somewhere in your own code - in this case somewhere where you are calling sort in your local files. You can use the debugger call stack to figure out what is calling sort.. . One common error that I would check is if you are sorting your hand vector in any const member functions. Recall that sorting changes the hand member variable which is a compiler error."}, {"id": 331, "value": "Make sure you use\u00a0ifstream\u00a0for reading in the pack instead of an\u00a0fstream.\u00a0fstream\u00a0requires write access for files, which AG will not give you."}, {"id": 337, "value": "Remember to always delete an object you\u2019ve created using dynamic memory or else you\u2019ll get memory leaks left on the heap."}, {"id": 338, "value": "Your Pack::shuffle function looks generally correct to me. In your euchre.cpp shuffle function, are you passing the pack variable by reference? If it were passed by value, your pack variable would not reflect the shuffle once the function returned.. . If you are already doing this, I would step through with the debugger to make sure the cards and next index in your pack are getting updated. This is based on the fact that the Jack of Diamonds is what should be returned if no shuffle took place at all."}, {"id": 340, "value": "Your constructor takes Player parameters, but you're giving it Player pointers, which are not the same."}, {"id": 341, "value": "You called get_upcard() function when you call make_trump() for each player. And your get_upcard() function erase a card from your remaining_card array. First of all, you remaining_card array should only have 4 cards at the begining of the make trump process, after you erased 4 of them, there's nothing there and that's what causing the error. Second of all, your understanding of the make trump process is not correct, the players should use the same upcard the each round of make trump. I suggest you to read through the spec about make trump again."}, {"id": 344, "value": ""}, {"id": 346, "value": "\"Invalid new-expression of abstract class type 'SimplePlayer'\". . It's telling you that SimplePlayer and HumanPlayer are abstract classes, meaning you haven't implemented all the functions from Player.h."}, {"id": 348, "value": "When you run make, it's giving you the error that there's an undefined reference, so it stops creating an executable, which is why the executable doesn't exist.. . The undefined reference error says you haven't defined\u00a0operator<<(std::ostream&, Player const&), which is defined in Player.h. Make sure you implement this funcion in Player.cpp."}, {"id": 349, "value": "\u201cno matching function for call to \u2018swap\u2019\u201d error happens if you call sort on a memeber variable in a member function that\u2019s const (shouldn\u2019t modify anything). Check where you\u2019re using sort in your code The spec says \u201cinstead call \u2018sort\u2019 when adding a card to hand\u201d"}, {"id": 350, "value": "Segmentation faults occur when your code tries to access memory somewhere that the CPU cannot access (ex: accessing an index of an array that is greater than its size). I would suggest looking through any loops you have in euchre.cpp that maybe be accessing memory incorrectly"}, {"id": 351, "value": ""}, {"id": 352, "value": "I feel like the most likely reason is that you have some undefined behavior which is causing the different outputs. Try running with the address sanitizer (as detailed in: https://eecs280staff.github.io/tutorials/setup_asan.html)"}, {"id": 358, "value": "These look like errors relating to the constructor. Make sure the function signature for your implemented constructor matches the one from Player.h, and make sure that it matches the calls from Player_factory."}, {"id": 359, "value": "The spec says to use sort whenever a player adds a card to their hand, so I believe the answer would be no, the exact card doesn\u2019t maintain its original index (since, like you said, the size of the hand changes throughout the game)"}, {"id": 360, "value": "If you are using VS Code, the debugger might be helpful!"}, {"id": 364, "value": "We are aware and will update you when things are fixed. @2131"}, {"id": 368, "value": "You have 10 arguments in the first screenshot. According to the spec, that means your error message should print out since there are NOT 12 arguments. If the program is crashing before the error message prints, you may be accessing argv[ i ] where i >= argc"}, {"id": 372, "value": "Check if your code in euchre.cpp is trying to access \u00a0argv[ i ] where i >= argc. Accessing data outside an array could be causing the segmentation fault."}, {"id": 373, "value": "It's hard to tell with what you've given. The rest of the error message should give some better context. Just make sure you use an ifstream for the pack and #include <fstream>. It might be good to come to OH for this if that doesn't help."}, {"id": 377, "value": "Check out the student response in @1951 (note: the results have not been verified by staff, I just found it and think it may be useful). You could write a quick test that performs a shuffle and prints all cards out by calling deal_one().. . If you get the correct output, then your shuffle should be correct. Come into OH if you have further questions."}, {"id": 378, "value": "Take a look at your validation for shuffle/noshuffle again. If the argument is \"shuffle\", then the second part will be true, and the error will print. If the argument is \"noshuffle\", then the first part will be true, and the error will print."}, {"id": 381, "value": "@1699"}, {"id": 382, "value": "As said below, spec -> trick taking -> value of cards"}, {"id": 383, "value": "You should definitely be able to test it through either the command line or by changing the arguments in your debugger. Changing the arguments given shouldn't affect whether or not your code compiles.. . If you're getting compilation errors, it will not be because of the arguments you provide since arguments are only used with the executable."}, {"id": 387, "value": "Staff is aware of the issue and is working to resolve it, see @2131"}, {"id": 391, "value": "i got a string to suit error yesterday, i think it's pretty similar, it means ur some function in your euchre.exe is keep reading when it should not. for example, make trump read a suit or pass, but lead card and play card read a number, so if your lead or play card function read too much, they may read in a pass, then it doesn't match any rank"}, {"id": 392, "value": "Changed visibility to private since you're sharing\u00a0a lot of code. It looks like many people have viewed this.\u00a0Please don't do this again.. . Generally, questions like these that involve showing a lot of code warrant coming into OH. I saw the error pretty quickly, but still come into OH in the future if you have questions similar in nature to this.. . In your Game ctor, when you add Player pointers to the players vector, you're deleting the player immediately, so the player can't be accessed. Then, if you access the player at any point, you're trying to use memory that you've deleted, which results in a segfault."}, {"id": 397, "value": "Recall that, if trump is heart, then the Jack of Diamonds is a bower, so it is considered to be a heart.. . Because of this, Gabriel cannot follow suit, they must play the lowest card in their hand.. . Hope this helps!"}, {"id": 399, "value": "Just that whenever the function is virtual in parent class, it never works. I tried making a function that is not virtual and it did run the function in the parent class"}, {"id": 404, "value": "I would suggest looking around line 12 within your card.cpp and seeing if any functions are longer than 40 lines. If they are, you should break the code up into smaller helper functions."}, {"id": 405, "value": "Make sure your Game constructor receives an `ifstream` **by reference**---it is refusing to copy a stream because that is not possible."}, {"id": 409, "value": "Search results for this error imply that you might be putting executable statements (function calls by themselves) outside functions, but I don't see how that relates to constexpr and `RANK_NAMES`/`SUIT_NAMES`. If you are certain that you have no function calls by themselves outside functions next to these declarations, please make this post private and attach a screenshot of the error squiggle and the compile error (when you run `make Card_tests.exe`). . Edit: The solution was to [update the C++ standard](https://eecs280staff.github.io/tutorials/setup_vscode.html#intellisense-c-standard)."}, {"id": 411, "value": "maybe because of not having using namespace std;?"}, {"id": 416, "value": "You can call the first cardless in the second if you want, but you\u2019ll need to consider when you can call it.\u00a0. . And yes, you can create a helper function to replace the code duplicate. This is actually even good practice. Do remember to declare them static too."}, {"id": 421, "value": "Is your game variable a pointer? If so, you should be using -> instead of . (so, game->play())"}, {"id": 427, "value": "hand.size() has data type size_t which is unsigned. Yes you can change int i to size_t i to avoid this waring. You can also cast the data type from size_t to int like this int(hand.size())"}, {"id": 430, "value": "Could you step through the code with breakpoints to see what line is called just before the exception is thrown?"}, {"id": 431, "value": "This looks like undefined symbols rather than undefined behavior. Undefined symbols is a compiler error which means the compiler doesn't recognize certain variables or functions. Undefined behavior happens at runtime and is the result of bad coding practices (e.g. indexing out of bounds, leaking memory).. . It seems like you haven't implemented your == and "}, {"id": 432, "value": "There aren't actually two empty lines there, its just showing that to make space for the extra lines you printed in your output file. Let me explain:. . Here is a guide on what the symbols mean. So for yours:. . . It looks like some changes earlier in the file caused your lines to be mismatched. So sdiff corrects this for you.\u00a0) means that only the second file contains the line, but the difference is ignored. The reason it does this is to be able to line up the two lines that are actually different (the ones connected by the third red line). So\u00a0| denotes that the two lines are different.. . Also, it looks like you have an extra whitespace after \"Edsger orders up Clubs\", which is what\u00a0> means.. . So, summarizing, your only differences (from this screenshot) are:. \"Edsger orders up Clubs\" should be \"Edsger orders up Spades\"there is an extra line after \"Edsger orders up Clubs\". And then you also have some differences earlier in the file."}, {"id": 434, "value": "Try running your code through CAEN, just make sure that you remove address sanitizer first, because those two wont work together.. . "}, {"id": 444, "value": "The line number just gives you the line of where the offending function starts. It looks like it's flagging the if>for>if>if (last if in line 207)."}, {"id": 448, "value": "Follow the spec exactly as it says, if the led suit and trump are not equal, play the lowest trump. If the led suit and trump are equal, play the highest card."}, {"id": 454, "value": "In your for loop, you may want to add an empty space after you print out each argument (something like cout << \" \")"}, {"id": 459, "value": "Found this answer online, maybe it will work: Set the environment variable MallocNanoZone to 0.. . Here is how you set environmental variables in Xcode. "}, {"id": 462, "value": "Check out these posts: @1939 @1826"}, {"id": 463, "value": "It looks like your PlayerFactory uses custom constructors that take in a string parameter, but you haven't defined them."}, {"id": 464, "value": "It's failing at line 35 of Card.cpp. What's that line?"}, {"id": 466, "value": "You're probably getting issue because the RME comments are also identical between the functions. If you remove the duplicated RME, then I think you may be all good."}, {"id": 474, "value": "Make sure you set the Custom Working Directory in XCode."}, {"id": 479, "value": "This appears to be an issue where you accessed data off the end of a `std::array`. Try using a debugger to see where this error stemmed from, and double check your logic for calculating that index!"}, {"id": 480, "value": "It looks like you've fixed the issue? Let us know if it persists."}, {"id": 481, "value": "I think you're allowed to reuse up to 100 tokens of code, so you might just have sections that are too long that are being reused. making a helper function to call instead might help"}, {"id": 486, "value": "Make sure to include algorithm before you call the sort function."}, {"id": 487, "value": "Besides those 4 and the error with opening file, you can assume everything else is in the correct format\u00a0"}, {"id": 488, "value": "See followups."}, {"id": 491, "value": "@2036"}, {"id": 495, "value": "Take a look at the lecture notes, but when implementing a virtual function you don't write virtual, and before the curly bracket of the function you need to write override. For example, if I had a function called virtual Bird talk const in my bird class, then I would need to write in my chicken class which is like a derived class from the base class bird then I would write Bird talk const override { ...Implementation...} Also, the unused variable comes when you don't use the variable anywhere else, so you declare it, but you don't use it. Hope this helps.\u00a0"}, {"id": 498, "value": "I think I had a similar error and it was because I didn\u2019t include \u201cpublic\u201d when I inherited my class. Maybe check that?\u00a0. . class Human : public Player\u00a0"}, {"id": 500, "value": "@2036I am having the same error too.\u00a0"}, {"id": 501, "value": "@2036I also got the same error"}, {"id": 502, "value": "It seems like you've fixed this? Let us know if you're still facing the issue."}, {"id": 503, "value": "@2036"}, {"id": 506, "value": "argv[1] is a c-styled string and not a c++ string. You need to cast argv[1] into a c++ string using something like string(argv[1]) and then assign its value to input_filename."}, {"id": 508, "value": "Make sure you are not dereferencing a nullptr. Specifically, double-check that the Player pointer p has already been created."}, {"id": 511, "value": "Make sure there is a semicolon after the class. "}, {"id": 512, "value": "Try to have Game take in the fstream by reference rather than value. That might fix your error, as it would no longer try to copy the stream."}, {"id": 516, "value": "You should manually test to see if it gives out the correct errors for incorrect inputs. Other than that, since all methods except play() should be private, I don't think you could really test it. Unless you started playing games with 4 humanplayers and putting inputs yourself to see if it scores correctly.\u00a0"}, {"id": 518, "value": "You're calling add_card in add_and_discard when the player should have a full hand, which explains why the assertion is failing.. . If you have further questions about how you should modify what you have, come to OH, and we'll be happy to help."}, {"id": 519, "value": "Did you update to the latest version of those functions detailed in Change Log in the spec? Depending on your Pack constructor implementation, you may need to update those functions to the latest version provided."}, {"id": 527, "value": "It seems like you\u2019re trying to compare a Rank with a Suit. Did you use a struct to store those two and directly compare them? Maybe that\u2019s causing an issue."}, {"id": 535, "value": "Make sure you provided function definitions for every function in Player.h, especially the ones marked as virtual"}, {"id": 537, "value": "The error is saying that you go out of bounds in play_card, actually! I would run through your debugger with this example. You're likely going out of bounds of the size of the player's hand when trying to find the card to play."}, {"id": 553, "value": "I would double check `operator!=` or `operator"}, {"id": 554, "value": "From the spec:. . March: When the side that made trump* wins all 5 tricks.. Euchred: When the side that didn\u2019t make trump* wins 3, 4, or 5 *tricks.. . . Since they didn't make trump, they cannot march, they can only euchre."}, {"id": 559, "value": "I'm thinking your order_up_suit variable isn't being set properly, since it's having trouble passing it to the insertion operator overload. I would reccomend setting a breakpoint at the line the error has, and inspecting the variables section of the debugger to see what order_up_suit is being set to. The issue may be with how you initialize order_up_suit, or how it's set in make_trump."}, {"id": 561, "value": "Could you try to create an instance of your game class by doing Game Euchre(fin, ...);. rather than Game Euchre = Game(fin, ...)?"}, {"id": 567, "value": "This seems like something to ask in OH. However, your points-to-win checking seems like it could be problematic. Consider using\u00a0atoi."}, {"id": 568, "value": "Check @1699, this is probably because you're calling sort in a const function."}, {"id": 573, "value": "Make sure you're declaring the derived classes as deriving from a public Player. For example,. . class SimplePlayer : public Player {. \t// .... };"}, {"id": 577, "value": "You need to define a virtual destructor for a simple player. Think about if you have to do anything in the destructor."}, {"id": 581, "value": "Check to make sure all the functions are exactly the same, including return type, function name, parameters, and whether or not it\u2019s const. Also, make sure you don\u2019t have \u201c= 0\u201d copied over from Player.h."}, {"id": 583, "value": "Check out @1699, the short of it is that you are probably calling `sort` on a class member variable in a const function (probably make trump)."}, {"id": 593, "value": "Changing visibility to private since this is very specific to your test cases.. . In test_less_than, take another look at the last assert statement. In test_less_than_equal, take another look at the third assert statement."}, {"id": 602, "value": "You shouldn't be implementing function in the player class directly. You should creates 2 child classes for Simple player and human player and overrides virtual functions from the player class. Also, make sure to include \"Player.h\" in you player.cpp"}, {"id": 603, "value": "I believe you are calling the function slightly wrong. If suit_a is a suit, then you should pass it into the function since is right bower takes in a suit which it treats as the trump suit. You are using suit_a as a card and a suit in this function call. If you are trying to determine if the card is right bower, make sure you have a Card c declared and a Suit trump declared. You would call it c.is_right_bower(trump) I believe in that case. Hope that helped!"}, {"id": 604, "value": "Check out this post @1599"}, {"id": 607, "value": "Set visibility to private since you've included an entire function. In the future, please don't make public posts with chunks of your own code.. . The purpose of operator>> is to be able to read in a\u00a0Card. Currently, you're reading at most the rank into\u00a0str\u00a0and nothing more, but we really need to read the rank, the \"of\" in between, and the suit. Think more carefully about what you're actually trying to do.. . You should be reading in something in the format of \"<rank>\u00a0of\u00a0<suit>,\" and this should modify the rank and suit of\u00a0card. We've also provided functions\u00a0operator>>(std::istream &is, Rank &rank) and operator>>(std::istream &is, Suit &suit), and you should be able to use these to help you read in the values and set the members of\u00a0card.. . Example usage of the provided operator>> functions:. . Rank rank;. Suit suit;. is >> suit >> rank; // Let's say is has \"Spades Nine\". cout << rank << \" of \" << suit << endl; // Prints \"Nine of Spades\""}, {"id": 609, "value": "I would look at line 181 in your `Player.cpp`. The error might be due to the `swap` function that you're calling."}, {"id": 610, "value": "Probably something with your launch.json. Make sure that in args you don't include ./euchre.exe as an argument.. . It should be alright to post a screenshot of your launch.json in a followup if you need further guidance (don't post any code ofc)."}, {"id": 622, "value": "argv is an array of strings, not c++ strings. You cannot directly use != or == to compare. Instead, you could convert to c++ strings and then compare, or use strcmp (from ) on the cstring you are comparing directly."}, {"id": 624, "value": "It seems like you have a memory leak somewhere. Make sure you have a delete corresponding to every new. Also make sure you use delete[] when you use new to create an array."}, {"id": 632, "value": "Just to confirm, you can still compile your Player tests without any problems, right? If so, I think your C/C++ extension is struggling to include unit_test_framework.h correctly due to some configuration issue. Could you share your c_cpp_properties.json file, please?"}, {"id": 633, "value": "Does your Card_tests.cpp file end with a call to TEST_MAIN()?"}, {"id": 634, "value": "I think this is due to the fact that make_trump() is a const function, meaning it cannot modify the Player object. However, add_and_discard() is not a const function, so the compiler cannot guarantee add_and_discard() won't modify the Player object when called from make_trump().. . Unfortunately, it looks like you cannot call add_and_discard() from make_trump(). Thinking ahead, can you call add_and_discard() from somewhere else when making trump?"}, {"id": 635, "value": "When overriding functions in derived classes, you have to be sure you match the function signature exactly. In this case, you are missing the const for the make_trump function."}, {"id": 641, "value": "You are deleting from an empty hand most likely"}, {"id": 648, "value": "We are not aware of any issues with euchre_test50.in. If you look at the output of euchre_test50.correct, the game ends at three hands. So there is no need to write more input."}, {"id": 649, "value": "I realize it's not a big function, but refrain from posting your code publicly.. . ~~As for the issue, it's probably that you need to implement the rest of the abstract Player class functions in SimplePlayer. SimplePlayer will remain abstract unless all abstract functions from the base class, Player, are implemented in it.~~"}, {"id": 663, "value": "you need to add #include <algorithm> at the top of the file you use it in, then sort() should work :)"}, {"id": 664, "value": "Check your implementation of deal_one(), looks like that could be buggy. Also, when you initialize a card object, are you setting next to be 0 (in the constructor)?"}, {"id": 665, "value": "Looks like your code adds 3 players to the game instead of 4. Double check the part of your main function that creates the player objects.. . Address sanitizer also helps for debugging out of bounds errors."}, {"id": 668, "value": "Another thing to try is to make sure you create a console project, not an empty project when initially making a project in Visual Studio."}, {"id": 669, "value": "resolved"}, {"id": 670, "value": "This warning is there to prevent accidental hiding of overloads when overriding is intended. Make sure your make_trump function for Simple Player class has the exact same name and parameters as the parent class's make_trump. I also recommend to go to OH if you need further help! It's a bit hard to debug this error without looking at your code."}, {"id": 671, "value": "Resolved."}, {"id": 679, "value": "Your implementation of Player should not require the use of Pack.. . If you are not using Pack objects but just included Pack.h to be safe, you should remove that line and it should run on the autograder.. If you are using Pack objects in your Player.cpp, you should reconsider whether it is an appropriate use of the Pack abstraction, and modify Player to work without using Pack."}, {"id": 686, "value": "The student answer is correct for the most part. You shouldn\u2019t necessarily have to remove the virtual keyword, but you will have to implement every function in the derived classes as specified in Player.h."}, {"id": 693, "value": "This probably means that a card function you are using in the istream ctor for pack is incorrect. Specifically, check your operator>> overload for Card and compare it to the operator overloads we have for Rank and Suit; it's probable that you're not checking for the EOF bit correctly (and you can check our changelog in the spec to see how we handle that)."}, {"id": 695, "value": "Can you try to implement Player_factory() after declaring the two child classes?"}, {"id": 701, "value": "Looks like you have a couple of errors. At some point in your code, you are trying to access the Suit with a value of 8 which does not exist. Also, looks like you are trying to access an index which is out of bounds.. . I recommend running your code through CAEN, which will run it in a similar environment to the autograder, and will behave in a very similar way."}, {"id": 706, "value": ""}, {"id": 709, "value": "Looks like you're going out of bounds. This is likely to happen in for loops, so make sure that your conditions are correct. If you can't find it, try using address sanitizers"}, {"id": 714, "value": "You\u2019re indexing out of bounds on line 69 of your pack.cpp. Check you\u2019re indexing and stopping conditions on your loops at this line.\u00a0"}, {"id": 719, "value": "Make sure your factory function is below the class definitions. Otherwise, the compiler may not be able to find the class definitions."}, {"id": 723, "value": "Look through your << operators. Are each of the implementations also inside the header file? Make sure to check that they have the same parameters."}, {"id": 724, "value": "You are likely calling sort in a const member function, which sorts the member variable hand. This is a violation of the const member qualifier."}, {"id": 725, "value": "you\u2019re probably using it in a const function, which goes against the rules of const since it\u2019s modifying hand, so you have to move it somewhere elseedit: see @1699"}, {"id": 727, "value": "Right now, order_up has no value, yet you use it in a comparison with upcard.get_suit(). This will lead to undefined behavior as your computer has no idea what it is comparing upcard.get_suit() with. To fix this, simply assign order_up a value to start with."}, {"id": 730, "value": "Run your code through CAEN (make sure to turn off address sanitizers). . Looks like an issue with pointers, check in your test_player_lead_card_jacks that you are creating and deleting all pointers correctly."}, {"id": 734, "value": "Check your class / function definitions. You have two functions defined with the same signature (name & arguments) but different return type, which is causing this error."}, {"id": 736, "value": "I believe @1673 has the same error as you."}, {"id": 740, "value": "Make sure \"Card.h\" is included in your Pack.h file, make sure you defined the constructor Card(Rank r, Suit s) in Card.cpp, and make sure you are not accidentally putting rank and suit in the reverse order when you use Card c(r,s)."}, {"id": 741, "value": "Make sure the Player_factory function is at the bottom of your Player.cpp file (or at least below your Human and Simple implementations). . . Regarding the bottom error, this looks like you are trying to call sort in a const function. Sorting the player's hand will modify the player object which violates const."}, {"id": 742, "value": "Looks like there is an issue between your Player.cpp and the public player tests file.\u00a0Make sure that all your functions defined within C++ and there are no functions that are declared but not defined. Check if any functions or global variables have been defined in multiple places - this can confuse the compiler. Also check to make sure that any libraries you used are properly imported. Follow up with staff if you're still running into an issue.\u00a0"}, {"id": 750, "value": "It's not possible to tell based on the screenshot; feel free to make a separate private post with more code."}, {"id": 754, "value": "Did you make a constructor for SimplePlayer to initialize the name to the player?. . Also try moving the Player_factory to underneath the derived classes in Player.cpp, worked for me for this same issue\u00a0"}, {"id": 760, "value": "You may be missing a closing bracket in your default Pack constructor, so it is attempting to call the istream Pack constructor instead of defining it."}, {"id": 762, "value": "Could you send the function stubs for some of these functions (minus the implementation)? I know you said that you have exact copies in your implementations but I just want to make sure as this is normally the issue that needs to be resolved for an error like this."}, {"id": 763, "value": "If you are implementing these as static helper functions outside of the class, you should call then with just func() and not class_name.func()."}, {"id": 765, "value": "Does it compile? Sometimes VSCode gets confused but compiling in the command line is always the ground truth.. . Edit: the operator>> is outside the scope of the Card class because it is not a member function. This means that you cannot directly access any private elements of the Card class, which rank and suit are. This is why we have getRank() and getSuit() functions so that we can access those private member variables outside of the class."}, {"id": 768, "value": "I would suggest clearing everything within the [] square brackets of \"configurations\" element and starting fresh with a new configuration. To do so, you should click \"Add configurations\" and select lldb launch assuming that you are on Mac. I would reference the debugger tutorial while you do those steps.. . Please follow up with a screenshot of your launch.json after those changes if it still does not work."}, {"id": 769, "value": "In the first case, you're checking if r1<=r2. In this case, that's true because NINE<=NINE.\u00a0"}, {"id": 772, "value": "That error is printed when it's possible for the function to never hit a return statement. In this case, you have returns in an if/else if, but if neither of those branches ever execute, then you exit the for loop without having returned."}, {"id": 780, "value": "It looks like your Card_tests.cpp cannot find the missing reference to function Card::get_rank(), which should be implemented in your Card.cpp. Check to make sure you\u2019ve implemented those functions, and then also make sure your Card_tests.cpp has #include Card.h at the top of the file.. "}, {"id": 781, "value": "The function it is having a problem with is safe_not_equals_helper() which is in unit_test_framework.h. I do see in your code that you #include \"unit_test_framework.h\" in player.cpp, which shouldn't need to be there, that could be causing a double definition of the function. Also make sure you are including Player.h in player public tests not player.cpp. You should never include a .cpp file in this class."}, {"id": 782, "value": "The error you are getting is not a compilation error, but rather an assertion error. This means something is going wrong while your code is running. Specifically, the assertion is on line 79 of Card.cpp. You should look there to see what exactly is going wrong, and you can also use a debbuger to see what leads up to the assertion failing.Edit: the above answer is correct, but I'd like to throw in that the error means that your code is calling \"assert(false)\" somewhere; try to work out where this is (line 79 of Card.cpp, as stated above), and work backwards to figure out why the assertion might be false (it could be that you just forgot to delete one of the \"assert(false)\" statements provided by some of the starter code, or you could be breaking one of the REQUIRES clauses)."}, {"id": 785, "value": "You have a memory leak somewhere. Make sure everywhere you use new has a corresponding call to delete, and make sure if you are deleting an array you use delete[]"}, {"id": 787, "value": "You still need to have the return type when declaring the function. If your function is not returning anything, remember to put in \"void\". . . Also, the reason you put the helper functions in the private section is they are useful within the class, but are not expected to be used outside of the class, and it is thus better to restrict that functionality."}, {"id": 791, "value": "resolved"}, {"id": 796, "value": "Note - I have mainly seen these errors on Windows machines (not mac) so only run the following lines if using Windows. If using mac, please follow up.. . I would try making sure your gdb is installed properly. To do so, you can run in your terminal these commands:. . gdb --version. // if a version comes up it is installed. If a version is installed, you can run the following line to find the MiDebuggerPath for the launch.json. which gdb. . //If a version does not come up (aka blank or no line after gdb --version) then run this command. . sudo apt-get install gdb. "}, {"id": 797, "value": "Make sure that you are not using the scope operator when declaring a Player object because you are creating a player object outside of the player class (ex: SimplePlayer(name) ). Also make sure that you are passing in a const string not a string. Even though they are both strings, the computer seems them as different argument types because what you pass in has to match exactly to what is defined in the function declaration.\u00a0"}, {"id": 799, "value": "add_and_discard takes in a\u00a0const Card, are you inputting a simpleplayer by accident? If you can't find an issue, could you show how you are calling the function, and also show the line where you declare the variable that you pass in."}, {"id": 801, "value": "I ran into this issue myself, and had to do a bit of Googling to figure out what the issue was.. . So, it turns out that the \"const\" modifier after the member function declaration (the \"const\" in \"void print_hand() const\", for example) essentially tells the compiler that the member function DOES NOT modify any of the member variables of the class being dealt with.. . Note that \"make_trump\" does not modify any member variables of any of the Player classes, and so is defined as being \"const.\" Functions declared as \"const\" can ONLY run other \"const\" functions, as otherwise they could potentially change member variables of the class (which is not allowed by the compiler). This means that \"print_hand\" must also be declared as \"const\".. . The issue here is with the sort function\u2014the sort function DIRECTLY CHANGES one of the member variables of the Player class (the Player's hand, namely), which is illegal. This is where the \"swap\" errors come in, since the swap function is TRYING to alter the \"hand\" variable of the Player class, but due to the \"const\" definition, this is illegal.. . To fix the issue, we CANNOT alter any of the member variables of the Player class in any way. The easiest way to solve this problem, therefore, is to simply create a COPY of the Player's hand, and then sort and print the COPY. This way, we aren't actually altering any member variables of the class.. . This is the way I understood it, feel free to correct me if I'm mistaken.. . Here's a good StackOverflow answer that pointed me in the right direction:. https://stackoverflow.com/questions/13103755/intellisense-the-object-has-type-qualifiers-that-are-not-compatible-with-the-me"}, {"id": 802, "value": "I would suggest heading to office hours for this issue as it would be easier for an instructor to fix the issue if they can tinker with the code. Here are also some other posts about the same thing that might help: @1615"}, {"id": 803, "value": "You do not need the virtual keyword. Also, this is a declaration of your function, so remove the\u00a0= 0; and replace it with\u00a0{}, similar to the function right above get_name() in your screenshot."}, {"id": 809, "value": "The standard vector function `.erase() `requires you to use iterators (a type of object that can traverse a container, in this case a vector) in order to use it. Iterators will be covered later in the course, but here's what you need to know for using `.erase()`:. . `erase()` can be used on a single element of a vector, or a range of values (with the last value in the range being *exclusive*).. . You can use `.begin()` on a vector to get an iterator to the beginning of the vector. Adding an index to the iterator value to will get you to a location other than the beginning of a vector.. . If I wanted to erase a *single* element from a vector called `vec` (lets say, the third element): I would use `vec.erase(vec.begin() + 2)` since the third element is in index 2.. . Similarly, if I wanted to erase a range of elements, I could do: . ```cpp. vec.erase(vec.begin() + 2, vec.begin() + 6) \\\\ erase all elements from index 2-6, not including index 6. ```. . more info on this here: https://cplusplus.com/reference/vector/vector/erase/"}, {"id": 810, "value": "Hi! You are right that your function does return a value for every possible value of Suit, but your compiler is not smart enough to catch that. I would remove a condition such that there is a default returned suit. Follow up with any more questions."}, {"id": 811, "value": "For anyone else coming across this:. . Make sure that you have\u00a0--std=c++11 in your makefile."}, {"id": 812, "value": "It seems like you're trying to make trump when the player only has one card in their hand. Try adding four more cards and then continue with the test to see if that resolves the out of bounds issue."}, {"id": 814, "value": "I don't think you should be comparing the bob and correct pointers if you're trying to make sure they have the same cards in their hands. One option is to make two vectors, have each player play all their cards and put their cards into one of the two vectors, sort the two vectors, then assert that the vectors are equal."}, {"id": 815, "value": "You should not have the class header Card in Card.cpp. Basically, there should not be lines of code in Card.cpp that look like this:. . . class Card {. public:. \t// stuff. }. . Instead, just define the functions. Functions that you define that are from the card class should look like this:. . . ReturnValue Card::function_from_card_class(params) {.   //stuff. }"}, {"id": 818, "value": "They aren't two \"new\" functions, they just updated the starter code and changed how the functions were written. Instead of adding them into your code, you should just replace the old ones."}, {"id": 824, "value": "What are you #include'ing in your Pack.cpp? Make sure you never #include a cpp file and only #include .h files."}, {"id": 826, "value": "See @1699; I got a similar error as you, but solved it as I outlined in the solution."}, {"id": 827, "value": "It just means you're failing test_pack_default_ctor because of a failed assert statement."}, {"id": 831, "value": "Glad you figured it out. In C++ when a function is not declared in a .h file with the other things it refers to, the ordering of statements matters so the compiler knows what is referring to what."}, {"id": 837, "value": "I would make sure you choose a working directory it seems like your code isn\u2019t connected to where your files are. . Also make sure not to show your code!"}, {"id": 839, "value": "Your code for the \"operator<<\" is likely defined incorrectly.. . See https://stackoverflow.com/questions/54847198/undefined-symbols-for-architecture-x86-64-operator"}, {"id": 858, "value": "Check that you have valid indices when you call `hand.erase(hand.begin() + i)` (replacing the names with whatever names you used for your variables). This is saying that the index `i` that you are trying to erase at is out of bounds.. . The line number refers to the iterator implementation, which is not your code. It's not super intuitive to read."}, {"id": 860, "value": "It is probably an issue with your function header. Could you include a screenshot of how you wrote the header for that function?"}, {"id": 862, "value": "Make sure that you have included the vector library and use std::vector (if you don't have a using namespace std at the top)"}, {"id": 863, "value": "`next` is a private member variable of Pack and should therefore be initialized in the constructor."}, {"id": 867, "value": "I'm wondering if the error comes from dealing one card since the `next` variable is never initialized to 0 in your constructor. Does setting `next` to 0 fix it?"}, {"id": 869, "value": "There are usually a variety of possible causes for this error. The most common one is that your c++ extension on vscode isn\u2019t configured to cpp11. If that doesn\u2019t fix your error, come to office hours so that we might be able to help you better."}, {"id": 872, "value": "Just remove that line -- Pack.h is included in the Player.h file already and the autograder doesn't expect you to include it in the Player.cpp file."}, {"id": 880, "value": "string_to_rank() asserts false if the inputted string does not match any of the strings in the RANK_NAMES array in Card.cpp. In other words, if your inputted string isn't anything like \"Two,\" \"Three,\" ..., \"King,\" or \"Ace,\" you'll hit that assert. I recommend using your debugger to check the value passed into string_to_rank() when the assert fails. (A hackier way of debugging this is to just print each rank string read in from your input stream, and see which one definitely isn't a rank)."}, {"id": 883, "value": "This error occurs when a subclass tries to provide an implementation of a virtual function with the same name as an already existing virtual function in its parent class. Did you change the signatures of your function in `Simple`? i.e. having different number/types of parameters"}, {"id": 886, "value": "Resolved"}, {"id": 897, "value": "The operator<< and operator>>\u00a0 are implemented for you in the starter code only for Suit and Rank. You have to implement the operators for Card. Check out the RME for the operator<< and operator>> in Card.h for what these functions are supposed to do."}, {"id": 900, "value": "How are you trying to compile? Does it not compile in both the terminal and your IDE, or just one or the other? Can you screenshot the error that gets produced?"}, {"id": 901, "value": "You don't want to have class Card {...}; in your cpp file because this is redefinition.. If you need to implement a function outside the class, what you can do is for example Rank Card::get_rank() const {...}. \"Card::\" specifies that this function is a member function of class Card."}, {"id": 906, "value": "Note: Even though this a small snippet of code, please avoid sharing anything other than necessary (hence converting the post to private).. . As the student answer suggests, this needs to be == comparison, not a assignment (=)."}, {"id": 917, "value": "make sure you have put function implementations into card.cpp (you can copy and paste from the header file, card.h). Match the function headers from the header file to the cpp file exactly. If you don't have all the card.cpp functions implemented yet, add assert(false) to the ones you haven't finished to allow it to compile (don't forget `#include`)."}, {"id": 918, "value": "Are you sure you didn't make any changes? If you made a git commit when it last worked, you can use\u00a0git status\u00a0and\u00a0git diff\u00a0to see specifically what may have changed.. . If you can't figure it out from that, or if you didn't make a commit (which\u00a0you\u00a0should be doing at least at certain milestones for cases like this), come into OH."}, {"id": 921, "value": "Try running your code on CAEN, it will run it in a similar environment as the autograder and might help you figure it out.\u00a0. . You can also try running your code with address sanitizer, just make sure to remove the tags when you sync to CAEN, because CAEN doesn't work with address sanitizer.. . "}, {"id": 929, "value": "Make sure you give your private variable name\u00a0a type (string is probably the best option here)."}, {"id": 930, "value": "I'd recommend coming into OH so that someone on staff can take a look. It's hard to determine a cause with the context you've given."}, {"id": 940, "value": "It could be a couple things--but in order for Player_factory to work, all of the Player functions have to be implemented (if there are any pure virtual functions that are not yet implemented, the class is considered \"abstract\"). Also double check that the function signatures in your Player.cpp file exactly match those that are in Player.h. I've seen people forget \"const\" or an \"&\", which would technically make it a different function and cause this issue"}, {"id": 941, "value": "You shouldn't have class Card{...} in Card.cpp. Just define the functions."}, {"id": 943, "value": "I'm not sure if you've changed your code since, but your << operator has ' of ' using single quotes which is causing that number to show up. Change it to double quotes and you should be good"}, {"id": 945, "value": "You're likely passing an invalid parameter for\u00a0suit."}, {"id": 947, "value": "I checked your autograder submission and it looks like you've resolved the issue! If you have any questions though feel free to follow up"}, {"id": 952, "value": "You might have forgotten to create a function body for the Card_less function (copy paste the function stub to Card.cpp and curly braces)"}, {"id": 953, "value": "You'll need to implement a constructor for SimplePlayer that takes in one parameter (the name variable) and sets the name member variable equal to that parameter.\u00a0"}, {"id": 954, "value": "If you're using XCode, make sure you set the \"Custom Working Directory\" in \"Edit Scheme > Options\""}, {"id": 968, "value": "The goal is to initialize the Pack object by reading from (not into)\u00a0pack_input. Calls to get_rank() and\u00a0get_suit() should be made on Card objects that have already been initialized. Therefore, instead of calling these functions, you should be putting data into each index of the cards array."}, {"id": 969, "value": "You need to make sure to implement the >> for card before you implement reading in a pack."}, {"id": 974, "value": "You should not be declaring a new istream to read pack_input. pack_input is already an istream, so you can just use it as one:. . pack_input >> var1 >> var2 >> etc..."}, {"id": 985, "value": "For other students: Make sure you're using the W23 version of Euchre starter code!"}, {"id": 988, "value": "Run the following command:. . git push --set-upstream origin main. . Or replace main with the name of whatever branch you are on. You don't do git push [filename] ever. Instead, you git add [filename], then commit your changes, and just run git push. The \"--set-upstream origin main\" is optional, and it just tells git where to push to by default."}, {"id": 989, "value": "It seems like you might be doing . . lhs != rhs. .  This is wrong, as it would cause the same function to be called infinitely. You are defining what != means for the Card class, so you can't just use != directly between two objects of the type Card within that definition."}, {"id": 1005, "value": ".h files contain the function declarations and the .cpp files contain the implementation of the functions declared in the .h file. Thus, ensure the constness, return type, and name of the functions you implement match those of the .h file.\u00a0"}, {"id": 1006, "value": "The return type of this function, as you can see, has a type\u00a0std::istream, which is not void. You need to return something with this type at the end of your function. What variable do we have access to in this function with type std::istream?"}, {"id": 1007, "value": ""}, {"id": 1010, "value": "As the student answer suggests, ensure that any functions within the Card class declaration in Card.h are implemented in Card.cpp with the scope resolution operator (Card::).\u00a0"}, {"id": 1019, "value": "Screen_Shot_2023-02-05_at_9.34.08_PM.png"}, {"id": 1023, "value": "The erase function takes in an iterator to the object being erased. In order to get an iterator, you can call the vector.begin() function which gives you an iterator to the first element. Just like you do with address mathematics, you can then add the position to get the iterator to a specific element in a vector. An example looks like vec.erase(vec.begin() + x). See here for more details."}, {"id": 1028, "value": ". The reason it doesn't include one was because I couldn't find a constructor for the Player class to actually put in my subclass, and I'm assuming that this is what is keeping my code from compiling. I also tried adding Player() in the subclass constructor, but that said that a cast to public class Player is not allowed. So I'm confused on how we're supposed to include the constructor for the super class, and also how to fix the error that I get when trying to compile.. . You won't need a constructor for the superclass. Player is an abstract class that you would never make an instance of, instead, you make Simple and Human players. C++ by default will have an implicit constructor for the super class (super class is a Java term in C++ it is usually called the parent class). The subclass (again a java term, equivalently in C++ called child class) will inherit that constructor but as you can imagine, it is not enough. Simple player has a name that has to be initialized so you will need a custom constructor.. . . I keep getting this error that says that SimplePlayer has not been declared or that a type-specifier is expected before I return a new SimplePlayer, and I was kind of confused as to what that is about. . \u00a0For the type-specifier issue, remember two things. To have a semicolon at the end of SimplePlayer Class definition and also remember to #include \"Player.h\". . . class SimplePlayer : public Player {. public:. \t// stuff here. private:. \t// stuff here. }; // semicolon here"}, {"id": 1029, "value": ". Is there something we should be doing with the definition of this function in Card.cpp in order to correctly access the private member variables?. . No, you shouldn't change the definitions.\u00a0. . You can make a private post with your code and the compiler error for us to take a look."}, {"id": 1030, "value": "The portion of the spec you're talking about lays out three different contexts in which to compare cards. The simple case is when cards are ordered by rank (A > K > Q > J > 10 > 9), with ties broken by suit (D > C > H > S), you can think of the simple case as basic card rules. This is the logic that you will want to apply in the overloaded operators. Considering the trump suit and led suit will come into play in different functions and files.. . Think about card.cpp as a more general card file with a few euchre-specific functions. For example, we could use this to implement a different card game."}, {"id": 1039, "value": "For the first error, you should switch the position of the Card and Rank around the scope resolution pointer. Same for the last error. I think the note is not an error but a reminder.. . Just to clarify, when you write the class member functions, you should remember that the return type is always put in front of the class name."}, {"id": 1044, "value": "For clarification, all of your implementation for Card should be in Card.cpp and you should not modify any .h files. Be sure to use the scope resolution operator for implementing member functions of the card class."}, {"id": 1045, "value": "You can only use the const keyword on member functions. You might have forgotten a \"Card::\" before the name of your function."}], "links": [{"source": 3, "target": 3, "value": 0.9999999999999998}, {"source": 4, "target": 4, "value": 0.9999999999999998}, {"source": 5, "target": 5, "value": 1.0}, {"source": 9, "target": 9, "value": 1.0000000000000002}, {"source": 14, "target": 14, "value": 0.9999999999999999}, {"source": 15, "target": 15, "value": 1.0000000000000002}, {"source": 16, "target": 16, "value": 0.9999999999999998}, {"source": 17, "target": 17, "value": 1.0000000000000002}, {"source": 18, "target": 18, "value": 1.0000000000000002}, {"source": 18, "target": 36, "value": 1.0000000000000002}, {"source": 27, "target": 27, "value": 0.9999999999999998}, {"source": 31, "target": 31, "value": 0.9999999999999998}, {"source": 33, "target": 33, "value": 1.0000000000000002}, {"source": 36, "target": 36, "value": 1.0000000000000002}, {"source": 43, "target": 43, "value": 1.0}, {"source": 43, "target": 100, "value": 1.0}, {"source": 43, "target": 273, "value": 1.0}, {"source": 43, "target": 669, "value": 1.0}, {"source": 43, "target": 671, "value": 1.0}, {"source": 43, "target": 791, "value": 1.0}, {"source": 43, "target": 886, "value": 1.0}, {"source": 45, "target": 45, "value": 1.0}, {"source": 47, "target": 47, "value": 1.0}, {"source": 50, "target": 50, "value": 0.9999999999999998}, {"source": 52, "target": 52, "value": 1.0000000000000002}, {"source": 76, "target": 76, "value": 1.0000000000000002}, {"source": 83, "target": 83, "value": 0.9999999999999999}, {"source": 86, "target": 86, "value": 1.0000000000000002}, {"source": 88, "target": 88, "value": 1.0000000000000002}, {"source": 95, "target": 95, "value": 1.0}, {"source": 100, "target": 100, "value": 1.0}, {"source": 100, "target": 273, "value": 1.0}, {"source": 100, "target": 669, "value": 1.0}, {"source": 100, "target": 671, "value": 1.0}, {"source": 100, "target": 791, "value": 1.0}, {"source": 100, "target": 886, "value": 1.0}, {"source": 104, "target": 104, "value": 0.9999999999999999}, {"source": 109, "target": 109, "value": 0.9999999999999999}, {"source": 113, "target": 113, "value": 1.0000000000000002}, {"source": 123, "target": 123, "value": 0.9999999999999999}, {"source": 127, "target": 127, "value": 1.0}, {"source": 133, "target": 133, "value": 1.0}, {"source": 135, "target": 135, "value": 0.9999999999999999}, {"source": 137, "target": 137, "value": 1.0}, {"source": 141, "target": 141, "value": 0.9999999999999997}, {"source": 142, "target": 142, "value": 0.9999999999999999}, {"source": 149, "target": 149, "value": 1.0}, {"source": 153, "target": 153, "value": 1.0000000000000002}, {"source": 165, "target": 165, "value": 1.0}, {"source": 167, "target": 167, "value": 1.0000000000000002}, {"source": 172, "target": 172, "value": 1.0000000000000002}, {"source": 175, "target": 175, "value": 0.9999999999999998}, {"source": 177, "target": 177, "value": 1.0000000000000002}, {"source": 177, "target": 602, "value": 0.7290148043997555}, {"source": 182, "target": 182, "value": 1.0}, {"source": 187, "target": 187, "value": 1.0}, {"source": 190, "target": 190, "value": 1.0}, {"source": 197, "target": 197, "value": 1.0000000000000002}, {"source": 198, "target": 198, "value": 0.9999999999999999}, {"source": 199, "target": 199, "value": 0.9999999999999999}, {"source": 203, "target": 203, "value": 0.9999999999999998}, {"source": 203, "target": 240, "value": 0.7537783614444091}, {"source": 203, "target": 921, "value": 0.7152816976385906}, {"source": 209, "target": 209, "value": 0.9999999999999999}, {"source": 214, "target": 214, "value": 0.9999999999999998}, {"source": 216, "target": 216, "value": 1.0000000000000002}, {"source": 217, "target": 217, "value": 1.0000000000000002}, {"source": 224, "target": 224, "value": 1.0000000000000002}, {"source": 225, "target": 225, "value": 1.0000000000000004}, {"source": 231, "target": 231, "value": 1.0000000000000002}, {"source": 235, "target": 235, "value": 1.0000000000000002}, {"source": 240, "target": 240, "value": 1.0000000000000002}, {"source": 240, "target": 434, "value": 0.6804138174397719}, {"source": 240, "target": 921, "value": 0.7907736701585485}, {"source": 244, "target": 244, "value": 0.9999999999999999}, {"source": 246, "target": 246, "value": 1.0}, {"source": 247, "target": 247, "value": 1.0}, {"source": 255, "target": 255, "value": 1.0}, {"source": 255, "target": 318, "value": 1.0}, {"source": 273, "target": 273, "value": 1.0}, {"source": 273, "target": 669, "value": 1.0}, {"source": 273, "target": 671, "value": 1.0}, {"source": 273, "target": 791, "value": 1.0}, {"source": 273, "target": 886, "value": 1.0}, {"source": 276, "target": 276, "value": 1.0}, {"source": 279, "target": 279, "value": 0.9999999999999998}, {"source": 279, "target": 358, "value": 0.6298897789321865}, {"source": 283, "target": 283, "value": 1.0000000000000002}, {"source": 284, "target": 284, "value": 1.0}, {"source": 287, "target": 287, "value": 1.0000000000000002}, {"source": 295, "target": 295, "value": 1.0}, {"source": 297, "target": 297, "value": 1.0}, {"source": 299, "target": 299, "value": 1.0}, {"source": 309, "target": 309, "value": 1.0000000000000002}, {"source": 309, "target": 338, "value": 0.6383450536225747}, {"source": 313, "target": 313, "value": 0.9999999999999998}, {"source": 315, "target": 315, "value": 0.9999999999999999}, {"source": 318, "target": 318, "value": 1.0}, {"source": 320, "target": 320, "value": 0.9999999999999997}, {"source": 324, "target": 324, "value": 1.0}, {"source": 330, "target": 330, "value": 1.0000000000000002}, {"source": 331, "target": 331, "value": 1.0}, {"source": 337, "target": 337, "value": 0.9999999999999998}, {"source": 338, "target": 338, "value": 1.0}, {"source": 340, "target": 340, "value": 1.0}, {"source": 341, "target": 341, "value": 1.0}, {"source": 346, "target": 346, "value": 1.0000000000000002}, {"source": 348, "target": 348, "value": 1.0000000000000002}, {"source": 349, "target": 349, "value": 0.9999999999999998}, {"source": 350, "target": 350, "value": 0.9999999999999998}, {"source": 352, "target": 352, "value": 1.0000000000000002}, {"source": 358, "target": 358, "value": 0.9999999999999999}, {"source": 359, "target": 359, "value": 0.9999999999999999}, {"source": 360, "target": 360, "value": 0.9999999999999999}, {"source": 364, "target": 364, "value": 0.9999999999999999}, {"source": 368, "target": 368, "value": 1.0000000000000002}, {"source": 372, "target": 372, "value": 0.9999999999999998}, {"source": 373, "target": 373, "value": 0.9999999999999999}, {"source": 377, "target": 377, "value": 1.0000000000000002}, {"source": 378, "target": 378, "value": 1.0}, {"source": 381, "target": 381, "value": 1.0}, {"source": 382, "target": 382, "value": 1.0000000000000002}, {"source": 383, "target": 383, "value": 0.9999999999999998}, {"source": 387, "target": 387, "value": 1.0000000000000002}, {"source": 391, "target": 391, "value": 1.0}, {"source": 392, "target": 392, "value": 0.9999999999999997}, {"source": 397, "target": 397, "value": 0.9999999999999994}, {"source": 399, "target": 399, "value": 1.0000000000000002}, {"source": 399, "target": 883, "value": 0.6221710168382552}, {"source": 404, "target": 404, "value": 1.0000000000000002}, {"source": 405, "target": 405, "value": 1.0000000000000002}, {"source": 409, "target": 409, "value": 0.9999999999999997}, {"source": 411, "target": 411, "value": 0.9999999999999999}, {"source": 416, "target": 416, "value": 0.9999999999999996}, {"source": 421, "target": 421, "value": 1.0}, {"source": 427, "target": 427, "value": 1.0}, {"source": 430, "target": 430, "value": 0.9999999999999998}, {"source": 431, "target": 431, "value": 1.0}, {"source": 432, "target": 432, "value": 0.9999999999999999}, {"source": 434, "target": 434, "value": 1.0000000000000002}, {"source": 434, "target": 921, "value": 0.7924058156930617}, {"source": 444, "target": 444, "value": 0.9999999999999997}, {"source": 448, "target": 448, "value": 0.9999999999999998}, {"source": 454, "target": 454, "value": 0.9999999999999999}, {"source": 459, "target": 459, "value": 1.0000000000000002}, {"source": 462, "target": 462, "value": 1.0}, {"source": 463, "target": 463, "value": 0.9999999999999999}, {"source": 464, "target": 464, "value": 0.9999999999999998}, {"source": 466, "target": 466, "value": 1.0}, {"source": 474, "target": 474, "value": 0.9999999999999998}, {"source": 474, "target": 954, "value": 0.7977240352174657}, {"source": 479, "target": 479, "value": 1.0}, {"source": 480, "target": 480, "value": 0.9999999999999999}, {"source": 480, "target": 502, "value": 0.801783725737273}, {"source": 481, "target": 481, "value": 0.9999999999999998}, {"source": 486, "target": 486, "value": 1.0000000000000002}, {"source": 487, "target": 487, "value": 1.0000000000000002}, {"source": 488, "target": 488, "value": 1.0}, {"source": 491, "target": 491, "value": 1.0}, {"source": 491, "target": 503, "value": 1.0}, {"source": 495, "target": 495, "value": 0.9999999999999998}, {"source": 498, "target": 498, "value": 1.0000000000000002}, {"source": 500, "target": 500, "value": 1.0000000000000002}, {"source": 500, "target": 501, "value": 0.6666666666666669}, {"source": 501, "target": 501, "value": 1.0000000000000002}, {"source": 502, "target": 502, "value": 0.9999999999999998}, {"source": 503, "target": 503, "value": 1.0}, {"source": 506, "target": 506, "value": 1.0000000000000002}, {"source": 508, "target": 508, "value": 1.0}, {"source": 511, "target": 511, "value": 1.0}, {"source": 512, "target": 512, "value": 1.0}, {"source": 516, "target": 516, "value": 1.0000000000000002}, {"source": 518, "target": 518, "value": 0.9999999999999998}, {"source": 519, "target": 519, "value": 1.0000000000000002}, {"source": 527, "target": 527, "value": 1.0}, {"source": 535, "target": 535, "value": 1.0}, {"source": 537, "target": 537, "value": 0.9999999999999997}, {"source": 553, "target": 553, "value": 1.0000000000000002}, {"source": 553, "target": 897, "value": 0.65991201759609}, {"source": 554, "target": 554, "value": 0.9999999999999998}, {"source": 559, "target": 559, "value": 1.0000000000000002}, {"source": 561, "target": 561, "value": 0.9999999999999999}, {"source": 567, "target": 567, "value": 1.0}, {"source": 568, "target": 568, "value": 0.9999999999999997}, {"source": 568, "target": 583, "value": 0.7559289460184545}, {"source": 573, "target": 573, "value": 1.0}, {"source": 577, "target": 577, "value": 0.9999999999999999}, {"source": 581, "target": 581, "value": 1.0}, {"source": 583, "target": 583, "value": 1.0}, {"source": 593, "target": 593, "value": 1.0}, {"source": 602, "target": 602, "value": 1.0000000000000002}, {"source": 602, "target": 781, "value": 0.6608007883929171}, {"source": 603, "target": 603, "value": 0.9999999999999997}, {"source": 604, "target": 604, "value": 1.0000000000000002}, {"source": 607, "target": 607, "value": 0.9999999999999998}, {"source": 609, "target": 609, "value": 1.0}, {"source": 610, "target": 610, "value": 1.0000000000000002}, {"source": 622, "target": 622, "value": 0.9999999999999998}, {"source": 624, "target": 624, "value": 1.0}, {"source": 624, "target": 785, "value": 0.9198662110078}, {"source": 632, "target": 632, "value": 0.9999999999999998}, {"source": 633, "target": 633, "value": 1.0000000000000002}, {"source": 634, "target": 634, "value": 1.0000000000000002}, {"source": 635, "target": 635, "value": 1.0}, {"source": 641, "target": 641, "value": 1.0000000000000002}, {"source": 648, "target": 648, "value": 0.9999999999999998}, {"source": 649, "target": 649, "value": 1.0}, {"source": 663, "target": 663, "value": 0.9999999999999999}, {"source": 664, "target": 664, "value": 1.0000000000000002}, {"source": 665, "target": 665, "value": 1.0}, {"source": 668, "target": 668, "value": 0.9999999999999996}, {"source": 669, "target": 669, "value": 1.0}, {"source": 669, "target": 671, "value": 1.0}, {"source": 669, "target": 791, "value": 1.0}, {"source": 669, "target": 886, "value": 1.0}, {"source": 670, "target": 670, "value": 1.0000000000000002}, {"source": 671, "target": 671, "value": 1.0}, {"source": 671, "target": 791, "value": 1.0}, {"source": 671, "target": 886, "value": 1.0}, {"source": 679, "target": 679, "value": 1.0}, {"source": 686, "target": 686, "value": 0.9999999999999999}, {"source": 693, "target": 693, "value": 1.0}, {"source": 695, "target": 695, "value": 1.0000000000000002}, {"source": 701, "target": 701, "value": 1.0}, {"source": 709, "target": 709, "value": 0.9999999999999998}, {"source": 714, "target": 714, "value": 1.0}, {"source": 719, "target": 719, "value": 1.0}, {"source": 723, "target": 723, "value": 0.9999999999999999}, {"source": 724, "target": 724, "value": 1.0}, {"source": 725, "target": 725, "value": 0.9999999999999998}, {"source": 727, "target": 727, "value": 1.0}, {"source": 730, "target": 730, "value": 0.9999999999999999}, {"source": 734, "target": 734, "value": 1.0}, {"source": 736, "target": 736, "value": 1.0000000000000002}, {"source": 740, "target": 740, "value": 1.0000000000000002}, {"source": 741, "target": 741, "value": 1.0}, {"source": 742, "target": 742, "value": 0.9999999999999999}, {"source": 750, "target": 750, "value": 1.0}, {"source": 754, "target": 754, "value": 1.0000000000000002}, {"source": 760, "target": 760, "value": 1.0}, {"source": 762, "target": 762, "value": 1.0000000000000002}, {"source": 763, "target": 763, "value": 1.0000000000000002}, {"source": 765, "target": 765, "value": 1.0000000000000004}, {"source": 768, "target": 768, "value": 1.0000000000000002}, {"source": 769, "target": 769, "value": 0.9999999999999998}, {"source": 772, "target": 772, "value": 0.9999999999999998}, {"source": 780, "target": 780, "value": 1.0}, {"source": 780, "target": 917, "value": 0.6016299267309015}, {"source": 781, "target": 781, "value": 1.0000000000000002}, {"source": 782, "target": 782, "value": 0.9999999999999999}, {"source": 785, "target": 785, "value": 0.9999999999999999}, {"source": 787, "target": 787, "value": 1.0000000000000004}, {"source": 791, "target": 791, "value": 1.0}, {"source": 791, "target": 886, "value": 1.0}, {"source": 796, "target": 796, "value": 0.9999999999999998}, {"source": 797, "target": 797, "value": 0.9999999999999999}, {"source": 799, "target": 799, "value": 1.0}, {"source": 801, "target": 801, "value": 1.0}, {"source": 802, "target": 802, "value": 1.0}, {"source": 803, "target": 803, "value": 1.0000000000000002}, {"source": 809, "target": 809, "value": 1.0}, {"source": 810, "target": 810, "value": 1.0}, {"source": 811, "target": 811, "value": 1.0000000000000002}, {"source": 812, "target": 812, "value": 0.9999999999999998}, {"source": 814, "target": 814, "value": 0.9999999999999999}, {"source": 815, "target": 815, "value": 0.9999999999999999}, {"source": 815, "target": 941, "value": 0.7827248736613022}, {"source": 815, "target": 1010, "value": 0.6591270461219715}, {"source": 818, "target": 818, "value": 0.9999999999999999}, {"source": 824, "target": 824, "value": 0.9999999999999996}, {"source": 826, "target": 826, "value": 0.9999999999999998}, {"source": 827, "target": 827, "value": 0.9999999999999997}, {"source": 831, "target": 831, "value": 1.0}, {"source": 837, "target": 837, "value": 0.9999999999999998}, {"source": 839, "target": 839, "value": 1.0000000000000002}, {"source": 858, "target": 858, "value": 0.9999999999999999}, {"source": 860, "target": 860, "value": 0.9999999999999998}, {"source": 862, "target": 862, "value": 1.0}, {"source": 863, "target": 863, "value": 1.0000000000000002}, {"source": 867, "target": 867, "value": 1.0000000000000002}, {"source": 869, "target": 869, "value": 0.9999999999999998}, {"source": 872, "target": 872, "value": 1.0000000000000002}, {"source": 880, "target": 880, "value": 0.9999999999999998}, {"source": 883, "target": 883, "value": 1.0}, {"source": 886, "target": 886, "value": 1.0}, {"source": 897, "target": 897, "value": 1.0}, {"source": 900, "target": 900, "value": 0.9999999999999998}, {"source": 901, "target": 901, "value": 1.0000000000000002}, {"source": 906, "target": 906, "value": 1.0}, {"source": 917, "target": 917, "value": 1.0000000000000002}, {"source": 918, "target": 918, "value": 0.9999999999999998}, {"source": 921, "target": 921, "value": 1.0000000000000002}, {"source": 929, "target": 929, "value": 1.0000000000000002}, {"source": 930, "target": 930, "value": 1.0}, {"source": 940, "target": 940, "value": 1.0000000000000002}, {"source": 941, "target": 941, "value": 0.9999999999999999}, {"source": 941, "target": 1010, "value": 0.6573757351339165}, {"source": 943, "target": 943, "value": 1.0}, {"source": 945, "target": 945, "value": 0.9999999999999999}, {"source": 947, "target": 947, "value": 1.0000000000000002}, {"source": 952, "target": 952, "value": 1.0}, {"source": 953, "target": 953, "value": 1.0}, {"source": 954, "target": 954, "value": 1.0000000000000002}, {"source": 968, "target": 968, "value": 1.0}, {"source": 969, "target": 969, "value": 0.9999999999999999}, {"source": 974, "target": 974, "value": 1.0000000000000002}, {"source": 985, "target": 985, "value": 0.9999999999999999}, {"source": 988, "target": 988, "value": 0.9999999999999999}, {"source": 989, "target": 989, "value": 0.9999999999999998}, {"source": 1005, "target": 1005, "value": 1.0000000000000002}, {"source": 1006, "target": 1006, "value": 1.0000000000000002}, {"source": 1010, "target": 1010, "value": 0.9999999999999997}, {"source": 1010, "target": 1044, "value": 0.7092993656151904}, {"source": 1019, "target": 1019, "value": 1.0000000000000002}, {"source": 1023, "target": 1023, "value": 0.9999999999999998}, {"source": 1028, "target": 1028, "value": 0.9999999999999999}, {"source": 1029, "target": 1029, "value": 1.0}, {"source": 1030, "target": 1030, "value": 0.9999999999999997}, {"source": 1039, "target": 1039, "value": 1.0}, {"source": 1044, "target": 1044, "value": 1.0}, {"source": 1045, "target": 1045, "value": 0.9999999999999999}]}