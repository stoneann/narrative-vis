{"nodes": [{"id": 1723, "value": ""}, {"id": 1724, "value": "Please specify your uniqname in your profile as per @64 so we can look at your AG submit."}, {"id": 1725, "value": "I actually figured it out. Had to add braces for the functions and move them out of main()."}, {"id": 1726, "value": "Yes, your implementation of the functions in stats.cpp most likely did not pass some of the edge cases which is why you lost some points."}, {"id": 1727, "value": "Your project grade should be available on the autograder, canvas will be updated eventually."}, {"id": 1728, "value": "Can you explain why your stopping condition on your for loop is i < pairs.size() - 1?"}, {"id": 1729, "value": "Unfortunately, the 8pm deadline is strict for all students, and we do not accept submissions after the deadline. However, even if you do not get the grade you'd hoped for, there are still more projects to come and opportunities to do well in the class!"}, {"id": 1730, "value": "@588"}, {"id": 1731, "value": ""}, {"id": 1732, "value": "Check out the followup discussion in @121"}, {"id": 1733, "value": "Unfortunately, we cannot grant you any extra submissions."}, {"id": 1734, "value": ""}, {"id": 1735, "value": "This is ok, don't worry about it.. . The time stamp for your makefile and AG differed."}, {"id": 1736, "value": "Each element in the vector is a pair<double, int>, so you will need to push back like this: vp.push_back({innerVal, frequency})"}, {"id": 1737, "value": ""}, {"id": 1738, "value": "I would recommend using your debugger and seeing what exact operation is causing the overflow. Without seeing your code and the execution this is going to be difficult to debug over Piazza.\u00a0"}, {"id": 1739, "value": "I don\u2019t want feedback from autograder just submission"}, {"id": 1740, "value": "If you press the \"Show Whitespace\" button on the autograder, you'll see that you have an extra space after \"filename\" and two extra spaces after \"column name\" :/"}, {"id": 1741, "value": "The population standard deviation is 2 for 4,8,8,8,10,10. Make sure you're calculating the sample standard deviation."}, {"id": 1742, "value": "The summarize function returns a vector of pairs, not a 2D vector of doubles"}, {"id": 1743, "value": "As per the tutorial, you should put `main_test.in` into freopen:. . ![image.png](/redirect/s3?bucket=uploads&prefix=paste%2Fkt103pdags15va%2F16dba77a5466c9317cfa62a9ae318236081ae5e4bd465e08076b63f721dd02b2%2Fimage.png). . https://eecs280staff.github.io/tutorials/setup_xcode.html#maincpp-changes"}, {"id": 1744, "value": "You would put it in the terminal if you want to do something like. . ./main.exe < main_in. If you want to have input redirection while debugging, you should put it in launch.json. You can refer to this tutorial here"}, {"id": 1745, "value": "You can set the bounds for your for loop to stop at the second last element. For the last element, you can bring that logic outside the for loop.\u00a0. . One other idea is that outside of your loop, store the first (0th index element), then inside the loop, check val against your vector and update it as you go. This would help because you don't have to have something such as v[i+1] since you can just compare v[i] to val. Of course, remember that you have to update \"val\"!. . // Only for demonstration purposes! Dummy code. int val = v[0];. . for (size_t i = 1; i < v.size(); ++i) { // note i starts at 1. \tif (val < v[i]) {. \t\tval = v[i];. \t} else {. \t\tcout << val << \" is still the smallest value\\n\";. \t}. \t. }"}, {"id": 1746, "value": "Right now, your values for\u00a0filename and\u00a0column_name aren't set to anything before you call\u00a0extract_column. . To fix this, you need to read in the file and column using\u00a0cin. For example:\u00a0. . cout << \"enter a filename\\n\";. cin >> filename;. . Now\u00a0filename has been set to whatever the user enters and can be used as a parameter."}, {"id": 1747, "value": "Seems like in stats_tests.cpp, you have implementations of functions of stats.cpp. If you have two functions with the same definition (in the same file or across files you've included), c++ would get confused about which one you want to use, so that's why you see that error.\u00a0. . You want to write test cases for the functions of stats.cpp. Please refer to unit test tutorial on how to write tests (the starter file for stats_tests.cpp can also be helpful). However, tests are not graded for project 1.. . Also per @64, please make sure that you have your uniqname in your piazza handle."}, {"id": 1748, "value": "See @542. . As per @64, please make sure to search piazza for similar questions before posting."}, {"id": 1749, "value": "It's not down for me, try leaving and resubmitting.\u00a0"}, {"id": 1750, "value": "You can just remove the assert(false) statements\u2014we won't give you vectors/data that violate the 'requires' clause"}, {"id": 1751, "value": "a good hint i could give is using a nested for loop to compare each value with the remaining values in the vector.assuming it\u2019s sorted"}, {"id": 1752, "value": "launch.json is just a special file with different parameters used by vs code to debug your program. Refer to the tutorial on how to set it up."}, {"id": 1753, "value": "Think of the 100th percentile being when p is 1, and the 0th percentile being when p is 0. The function only takes in a p value between 0 and 1."}, {"id": 1754, "value": "Check out @421. Follow up with any more questions."}, {"id": 1755, "value": "You need to comment in the Project UID thing at the top of your main.cpp file, this was included in the start files. you also have a normal(code) error in your test cpp.\u00a0"}, {"id": 1756, "value": "from looking at the value section on the bottom of the visual studio, it seems like the file name and column name weren't read in correctly. Set a breakpoint on the line where you call extract_column and investigate if they are read in correctly. If not, start debugging from your cin line and go from there."}, {"id": 1757, "value": "If it\u2019s the last element you are trying to delete you can use pop_back()"}, {"id": 1758, "value": "If a loop indexes from 0 to data.size(), everything should be in-bounds since the 1-indexed nth element has index (n - 1), so even the last data.size()-th element has index data.size() - 1.. . The culprit may be that you are accessing index (i + 1) somewhere, and when i = data.size() - 1, data[i] is out of bounds."}, {"id": 1759, "value": "9/9 on the autograder right now reflects the public test cases. After the deadline we run a set of private test cases on your submission, and those in addition to the public tests determine your final grade for the project. To have the best chances of passing the private test cases you can write your own tests, consider edge cases, and then see if your code passes your own tests."}, {"id": 1760, "value": "The RME states that the function Requires a vector that is not empty, so you don\u2019t need to worry about it.However, if we weren't requiring that the vector is not empty: how you implement the mean function (or if you're using a function from package, then how the author of that package implemented it), including the types you are using for your values (doubles, integers, etc.) will influence how the compiler handles it. In our case, it would probably be a division of two double zeroes, which would probably result in either INF (positive infinity) or -INF (negative infinity). Here's a good answer: https://stackoverflow.com/questions/4745311/c-division-by-0Writing a good function involves being able to handle any possible input the user could think of or mistakenly put it, because it means our program is robust and easier to use. (One might handle this by checking if the vector is empty and then outputting a message to the user if it is.) But at least in this project, it seems we are just restricting what the user can enter to simplify it for us while we refresh our knowledge of some of the concepts."}, {"id": 1761, "value": "Some students may have extensions on p1 so grades will be released shortly (maybe a few days) after tonight.\u00a0"}, {"id": 1762, "value": "- Not a big enough difference to matter here. I don't recommend making code fancier than it needs to be; if you end up going down the wrong track and needing to backtrack, it becomes a waste of time.. - `abs()` with a float / double input will return a double as well. No difference. Read https://en.cppreference.com/w/cpp/numeric/math/fabs carefully.. - Not a big deal for this project, but if you were writing an actual stats library a smaller epsilon makes sense."}, {"id": 1763, "value": "Check that your summarize function is correctly returning a vector of pairs, and that you're iterating through it correctly (I'd reccomend using your debugger for this!)"}, {"id": 1764, "value": "No"}, {"id": 1765, "value": "You can find it in the stats.h file"}, {"id": 1766, "value": "Check out this tutorial on the P1 spec: https://eecs280staff.github.io/p1-stats/comparisons.html#floating-point-comparisons"}, {"id": 1767, "value": "How did you run your program? What were the inputs?"}, {"id": 1768, "value": "Please include your uniquename in your piazza profile so that we can better help you, thanks. @64"}, {"id": 1769, "value": "Make sure you're under your project directory, then run `wget https://eecs280staff.github.io/p1-stats/data/HCMST_ver_3.04.tsv`"}, {"id": 1770, "value": "@527. . Also if you set up address sanitizer on your debugger, it can locate the out-of-bound error. I suggest you check the bounds in your summarize() function more carefully. https://eecs280staff.github.io/tutorials/setup_asan.html"}, {"id": 1771, "value": "Converting to private since my response involves specifics of your code. It looks like your main.cpp is inputting percentiles in the range from 0-100, whereas your stats.cpp is expecting it to be from the range 0-1. This could be the cause of your issue."}, {"id": 1772, "value": "Are you able to compile your code with the make file? If you are, you can ignore this error. VSCode syntax highlighting can behave weird sometimes."}, {"id": 1773, "value": "Without seeing the input, it'll be hard to tell what the bug is here. I would recommend stepping through the test case you wrote with the debugger and seeing if the values you are seeing while debugging line up with what you expected when calculating the percentile by hand. Feel free to come to OH as well to help you with this process."}, {"id": 1774, "value": "From what is visible in the terminal, it seems like the out-of-bounds error is not occurring in your summarize function but in your main driver program that is printing the output vector of pairs of the summarize function. I would check in main for your error."}, {"id": 1775, "value": "you have an extra comma on line 22, a trailing comma is not allowed in json.. . In the future, please try to make your posts descriptive so we can be more helpful."}, {"id": 1776, "value": "resolved"}, {"id": 1777, "value": "you have the same name for the vector so c++ is getting confused about which \"v\" you are referring to. try changing the name of the vector to something other than v."}, {"id": 1778, "value": "Resolved in followups"}, {"id": 1779, "value": "If your program aborts, you will not get the points for that test case.. . Your test case might be invalid if it causes an assert statement to fail inside stats.cpp. If you like, you can put the test case here in a private piazza post."}, {"id": 1780, "value": ""}, {"id": 1781, "value": "Please look at this part of the spec"}, {"id": 1782, "value": "Try setting your working directory to your p1-stats folder, detailed here @284"}, {"id": 1783, "value": "check out this suggestion. . Also, if you want to access desktop directory from your WSL terminal, see @22 and the command line tutorial linked there.. "}, {"id": 1784, "value": ""}, {"id": 1785, "value": "the private test cases will have a point value assigned to them too."}, {"id": 1786, "value": "see @540"}, {"id": 1787, "value": "If the assertion fails in stats.cpp it means that it's invalid to input an empty vector for that function.\u00a0. . You don't have to test for such scenarios because this is not about the correctness of your function but that of the input.. . Since the assert(!v.empty()) would be false in stats.cpp, your program would break before even checking for something like assert(!sum(v)). "}, {"id": 1788, "value": "if you are iterating such as. . for(int i = 0; i < v.size(); ++i). change it to. . for(size_t i = 0; i < v.size(); ++i)"}, {"id": 1789, "value": "I suspect you have an issue similar to @552. If that's the case, you have to fix the UB.\u00a0. . Also, please see @64 and add your uniqname to your piazza handle so we can look up your submission."}, {"id": 1790, "value": "In general, tests are considered part of your program, so I have made the post private.. . Your test looks good to me. I recommendsetting a break point on the assert line (like below) and inspect the possible disrepency.. . . vector<pair<double, int>> result = summarize(data);. assert result == data_pairs; // set the breakpoint here. Setting breakpoints in vscode on lines where you initialize a vector can give you trouble"}, {"id": 1791, "value": "The common issue students here have is they are going out of bounds for their vectors. I recommend running your program with address sanitizer and it will show where you are going out of bounds."}, {"id": 1792, "value": "I took a look at your autograder submission -- one thing I would think about for the mode function is if you need to store the frequencies for each value in the vector, or if you can do a \"running check\" (similar idea to how you wrote your max() function)."}, {"id": 1793, "value": "As the student answer suggests, it\u2019s a white space error.\u00a0"}, {"id": 1794, "value": "In the RME in stats.h, P is between 0 and 1 inclusive. Hence, you can just multiply by P"}, {"id": 1795, "value": "There's no stats.exe, you can only make main.exe, stats_tests.exe, stats_public_test.exe by the makefile we provided. If you meant to make an executable for you stats.cpp, you can run g++ stats.cpp -o stats.exe.\u00a0I wouldn't recommend it because you don't have test cases in your stats.cpp.. . Kindly reminder: You can post this type of question public so that your classmates who might have the same question may see it as well! You can always choose to go anonymous. The private mode is meant for posts that contains large chunk of code."}, {"id": 1796, "value": ""}, {"id": 1797, "value": "You should read the file name and column name from the command line. The code above only defines these two strings as empty strings."}, {"id": 1798, "value": "The styling for projects 2-5 does not require comments. You can validate that you are following our styling criteria by running make style for the future projects"}, {"id": 1799, "value": "see @542"}, {"id": 1800, "value": "You should set up the address sanitizer like this: https://eecs280staff.github.io/tutorials/setup_asan.html. Otherwise, you can't catch this kind of undefined behavior in your local IDE.. . Your code didn't output the 100th percentile. It is because there is undefined behavior when you try to get the 100th percentile through percentile() function."}, {"id": 1801, "value": "Please include your uniqname so we can look up your AG submission in the future. See @64. . It seems like, as the student is suggesting, you have trailing whitespace here.\u00a0"}, {"id": 1802, "value": "Yes, the only requirements on v are that it is not empty."}, {"id": 1803, "value": "You got the error heap buffer overflow, which is the reason your program \"crashed\". @529 have the same issue, you can check out advice there.\u00a0"}, {"id": 1804, "value": "The problem is most likely within your summary implementation."}, {"id": 1805, "value": "The student answer is correct, and to elaborate on it comments will not be part of the style grading in P2-P5. They are, however, good to add so that you and the instructors can quickly figure out what your code is supposed to be doing!"}, {"id": 1806, "value": "I recommend using loops to get the frequency of each element in the vector. If you have the frequencies, you should have enough information to either populate the summarize vector or find the mode."}, {"id": 1807, "value": "For this project and all others, you may assume that your code will not be tested on anything outside of the requires clause, and therefore does not need to account for input outside of the requires clauses.. . However, it can be beneficial to assert your requires clauses, because it may help you debug more quickly in the case that one of your functions calls another one of your functions violating its requires clauses.\u00a0"}, {"id": 1808, "value": "This may not be an issue with negative numbers, and instead an issue with floating point comparison.. . Your compiler is not always accurate with directly comparing numbers with decimals as it may store one value as 1.8000001 and the other as 1.8000002.. . You should reference the floating comparison tutorial from the spec to find the best practice in asserting a comparison of two decimal numbers. Specifically, look at the epsilon example at the end to see how you should compare to 1.8 in your test case."}, {"id": 1809, "value": ""}, {"id": 1810, "value": "You are trying to access such an address for which you haven't declared your variable, to find all such errors revisit all your conditions and check if you are accessing something out of bounds or not. Try to set a breakpoint at your summarize function, step through your code and see where your code goes out of bound."}, {"id": 1811, "value": "For project 1, you will earn all points for stats_tests.cpp if it compiles"}, {"id": 1812, "value": "It seems you are trying to access an element outside the scope of a vector somewhere. This sort of \u201cout of scope\u201d error is not caught by the IDE, which is why it is only visible on the autograder. To fix it, try to figure out what function in your program did not run on the autograder (aka didn\u2019t print anything) using the debug screen and search for a line in that part of your program where you could\u2019ve tried to access an element outside the scope of your vector.(HINT: v[i+1] is often the culprit!)"}, {"id": 1813, "value": "Floating point comparisons are helpful to include when testing functions like mean. It is possible that your functions/tests are correct without floating point comparisons, but I recommend having at least one test with it.\u00a0"}, {"id": 1814, "value": "Have you make stats_tests.exe? Also, since you have a mac, make sure you have lldb set up."}, {"id": 1815, "value": "Yes, your percentile function should be able to handle an arbitrary p between 0 and 1 (inclusive)."}, {"id": 1816, "value": "Looks like your compiler is possibly using an earlier/outdated C++ standard. Do you have --std=c++11 on the CXXFLAGS line of your Makefile?"}, {"id": 1817, "value": "When you calculate percentiles on an array of numbers, these numbers cannot be in arbitrary orders. If you were given a large chunk of random exam scores and asked to calculate the 50th percentile, what would be the first thing to do? You could also get the answer by looking into p1_library.h"}, {"id": 1818, "value": "You want to use your sum function in stats.cpp, not the one you have in main.cpp. You can fix this by deleting the sum function starting on line 11 of main.cpp."}, {"id": 1819, "value": "Are you including <string>? Do you have using namespace std? If not, you will have to prefix string with std::"}, {"id": 1820, "value": "The percentile function is built into excel. I opened excel and used that to calculate my test cases. Just make sure you choose the percentile.inc to include 0,1 in the permitted values.\u00a0. . "}, {"id": 1821, "value": "it would be that number"}, {"id": 1822, "value": "Hmm, it looks like input redirection is working, since the filename and column were read in. To confirm whether the issue is with reading main_test_data.tsv or not, could you try printing the size of the vector holding the data read in (or even better, use your debugger to inspect the vector's value at runtime)? If it's nonzero, then your bug is likely somewhere in your stats functions, or in your main function's logic. Stepping through main.exe with your debugger can help you track this down."}, {"id": 1823, "value": "Besides the student answer, I also recommend you take a look at @520 after reading your code."}, {"id": 1824, "value": "resolved"}, {"id": 1825, "value": "Yes, assert statements are our preferred idiom for writing tests."}, {"id": 1826, "value": "Check out @103 - should fix your issue.. If not, try @102"}, {"id": 1827, "value": "You can create a vector of pairs that is populated with the values you expect from your input vector and then compare it with your output vector of pairs. C++ is able to compare vectors of the same type using ==\u00a0"}, {"id": 1828, "value": "Make sure all of your files are saved, and that \"stats.cpp\" is included in the files being compiled when you run make or build from your IDE."}, {"id": 1829, "value": ""}, {"id": 1830, "value": "1) Issue with summarize - It seems you're just going through and printing out the values in order. You should be constructing a vector of pairs, where each pair takes the format of {value, frequency}.. . 2) Issue with summarize test - Looking at the parameter type of summarize(), the function should take a vector of doubles, but you're giving it a vector of pairs. I'd recommend taking another look at what the summarize() function is supposed to do.. . 3) Issue with mode - I think you have a good approach with using summarize() first to get the frequencies. However, you're trying to access the variable vector_pair without ever declaring it, and you also never call summarize()."}, {"id": 1831, "value": "9a10 indicates that you have a new line after line 9. you can manually compare the two files if it is easier for you to see the difference that way"}, {"id": 1832, "value": "Private test cases are part of the grading for each project. I recommend writing test cases and test every function of your stats.cpp"}, {"id": 1833, "value": "You don\u2019t need to but you can!"}, {"id": 1834, "value": "No, you don't need to use (and probably shouldn't use) pointers in P1."}, {"id": 1835, "value": "Marking as resolved\u00a0"}, {"id": 1836, "value": "I believe it\u2019s more of a style guidance where they don\u2019t want the main code to be super far down after lines of function code. The form that is given is that function prototypes, meaning just the head of the function like \u201cvoid abc();\u201d, goes on top, while the function implementations, which is what they do, goes after the main. Why you need prototypes is because your main uses said functions, and without the prototype it won\u2019t be able to compile"}, {"id": 1837, "value": "We don't allow the use of std::algorithms since one of our goals in this course (and 281) is to get you in the process of coming up with and implementing algorithms to solve problems."}, {"id": 1838, "value": "If you set the breakpoint on a line that you declare a vector, I would set the breakpoint on the line after that.. . Setting breakpoints on lines where you declare a vector is a known VS code issue, but seems like there is not a fix yet.. . If your issue is something else, followup below please"}, {"id": 1839, "value": "For the error, see @111.. . For the float comparison example, see this link: https://eecs280staff.github.io/p1-stats/comparisons.html"}, {"id": 1840, "value": "resolved"}, {"id": 1841, "value": "See @196"}, {"id": 1842, "value": "style is not graded for p1 but I think it is for all the other projects"}, {"id": 1843, "value": "You can push a pair back directly by doing push_back({thing1, thing2}). In a single pair, you can do .first or .second to access it's elements, so you'd do myVec[0].first to get the first part of the first pair."}, {"id": 1844, "value": "I had the same issue and it was because I put the sqrt function in the wrong spot which ended up trying to sqrt a negative number. It may be that or something similar where its not returning a real number.\u00a0"}, {"id": 1845, "value": "Your stats_tests is ungraded for P1, however for future projects your own test files will be graded how well they expose bugs."}, {"id": 1846, "value": "Filename is one word in the expected output. It is two words in your output."}, {"id": 1847, "value": "The student is exactly correct. This answer can also be found in the FAQ post (@6). By a brief look at your code, I can see that there is a logical flaw in your main function. It looks like you are calling the summarize function on an empty vector. You must first fill the vector with data before you call the summarize function, otherwise you will have no summary.. . The instruction staff appreciates if you try debugging yourself and letting as know what strategies you tried / things you have found. This fits nicely in the format we also request you post in (@62). Please make sure your next post follows this format.\u00a0"}, {"id": 1848, "value": "Have you implemented the sum function in your stats.cpp? Most likely it is missing, hence the error you're seeing at compile time."}, {"id": 1849, "value": "Without seeing your code this is difficult to debug. I would suggest making a private post with your code or coming to OH so we can help you fix this issue."}, {"id": 1850, "value": "You have a function and a local variable named median. Hence, the compiler is having difficulties distinguishing between the two names. Changing the name of your local median variable to expected_median should solve this."}, {"id": 1851, "value": "This problem is very similar to @62. Try out those strategies. If these don't work I would suggest going to office hours for more indepth help!"}, {"id": 1852, "value": "If you look at the error message on the AG it says that you are missing the Project UID.\u00a0 Add the UID to your main.cpp and you'll be good to go for submitting to the AG.. . . Verifying main.cpp contains project UID. Error: main.cpp is missing comment 'Project UID 5366c7e2b77742d5b2142097e51561a5'"}, {"id": 1853, "value": "You're limited to these headers so you're going to be limited in what you can pull in from std."}, {"id": 1854, "value": "What kind of linker error is it? The most common one I've seen for P1 is when the linker fails to find a definition for a function that is being called, thus causing an \"undefined symbol\" error. If you're getting this error for any of your stats functions (such as when you run \"make stats_tests.exe\" or \"make stats_public_test.exe\"), make sure you have an implementation for all of your functions in stats.cpp (even if they're just stubs for now, like we do here in the spec) so the linker can find a definition for any referenced stats function.. . Another common error is when the linker fails to find a main() function. Your stats_tests.cpp and stats_public_test.cpp already have main functions, and stats.cpp shouldn't have a main function, since it's simply providing an implementation for the stats library to be used by other programs. However, your main.cpp does need a main() function, so if you try to \"make main.exe\" without creating one, you'll get a linker error."}, {"id": 1855, "value": "Quick correction to the student's answer: vector's size() function (along with the size() functions of many other containers in the C++ standard library, which we'll talk more about later this semester) does not return an int, but returns an unsigned integer type; according to the C++ reference, most vector implementations use an std::size_t for this.. . Why not a normal int? This is beyond the scope of 280, but on most computer platforms (such as on your and my laptop), an integer is 32 bits in length, and signed (meaning it can represent negative and positive numbers). This means an int has a range of [-231, 231). Vectors can never have a negative size, so it doesn't make sense for size() to return a signed type. Furthermore, on the 64-bit platforms we support in 280, std::size_t is 64 bits in length. Therefore, by using std::size_t, vectors can (theoretically) contain [0, 264) elements (though your program could exhaust its allowed memory before that happens).. . Your compiler might complain if you try to do something like \"int num_elements = v.size();\" This is because you're casting from a larger type (std::size_t) to a smaller type (int). For example, what if your vector's size is something like 240, which fits in an std::size_t but overflows an int? That implicit cast might do something wonky, like cast to a negative number.. . However, for the sake of P1, you won't be dealing with huge vectors like that, so explicitly casting like so is safe for our purposes: \"int num_elements = (int) v.size();\""}, {"id": 1856, "value": "I would recommend them all being in one test_median. Grouping the tests for the same functions into one test function and separating those for different ones makes it easier to track down where errors originate from.. Different answer: I would recommend them being 3 separate functions. For example, I would name them something like \"test_median_simple\", \"test_median_single_value\", etc.. That way, when you run your tests, the output will indicate which specific test function failed. Otherwise, if you had just one function for median tests, and one of the test cases failed, you would have to pay attention to line numbers to figure out which one failed, which is much more work and more prone to mistakes."}, {"id": 1857, "value": "Instantiate a vector like so:. . `vector example_empty;`. . and don't call `push_back()` with that vector. This is a valid empty vector."}, {"id": 1858, "value": "What are your compile sources set to? If you want to run your tests, make sure your compile sources are targeting stats_tests.cpp. Here's the relevant tutorial.. . If you're running into trouble building with XCode, you can always manually compile and run from the terminal. For example, you'd first build your tests with \"make stats_tests.exe\", and if the compilation succeeds, you'd then run them with \"./stats_tests.exe\""}, {"id": 1859, "value": "You can have correct output with undefined behaviour. In the test cases you run locally, you\u2019re only checking for whether the value was correct, not the process of how you got that value.\u00a0"}, {"id": 1860, "value": "Based on the autograder output, you are missing whitespace in the percentile output formatting; I would double-check the p1 spec to ensure the format you are outputting statistics is precisely what we are expecting. I would also think about edge case inputs you could supply to your current implementation of the percentile function that could cause it to behave erroneously.\u00a0"}, {"id": 1861, "value": "Try running ./test without a space between the \"./\" and the \"test\""}, {"id": 1862, "value": "As the student answer suggests this is due to an index out of bounds error.\u00a0"}, {"id": 1863, "value": "Summarize takes in a single vector of doubles (vector) and returns a vector of pairs. Main will have a vector of doubles (which it gets from a file), and give it to summarize, and print out the vector of pairs which summarize returns."}, {"id": 1864, "value": "I believe that for p1 there is no mutation testing, but for future projects your tests will be tested on how many times your test fails on buggy code (with it being better if it falls more and catches more bugs)."}, {"id": 1865, "value": "It might be that you are debugging with an older executable. You could try to build your code again and then debug again"}, {"id": 1866, "value": ""}, {"id": 1867, "value": "You have to try to print an output similar to the example:. https://eecs280staff.github.io/p1-stats/#example. . You can save your output (and not have to type in the input) by using this command, which is given in the testing section:. . ./main.exe < main_test.in > main_test.out. . Then, compare your output to main_test.out.correct, either manually or with the following command:. . diff main_test.out main_test.out.correct"}, {"id": 1868, "value": "7/3 = 2.33. . However, in c++ 7/3 = 2 because of integer division. So, the comparison is going to fail.. . Also, keep in mind while doing arithmetic with doubles, some of the memory is imprecise. Because of this, you have to compare doubles in a special way. How to compare doubles is included in the spec.. . "}, {"id": 1869, "value": "It doesn't look like the vector is a vector a pairs, rather it is a vector of a vector<double>. To access elements of the nested vector, use the []. It would look like:. . vector[i][k]. . The first [] access the ith element of the outer vector. The second [] access the kth element of the inner vector.. . We are also asking students to use a specific posting format as specified by @64 so please make sure any further posts are in that format."}, {"id": 1870, "value": "You already do this by specifying a vector parameter, which is the `vector v` in parentheses in the function declaration. If you try to call the function without a vector, the compiler will throw an error. No assert needed :)"}, {"id": 1871, "value": "This is most likely because the percentile function from the wiki doesn't account for indexing out of bounds. When you take the 100th percentile, the equation will cause your code to try to find a value past the last value in the vector. Knowing this, and also knowing that percentile should return the last element instead of going out of bounds, you should be able to fix your code."}, {"id": 1872, "value": ". The RME states. . //REQUIRES: v is not empty. // p is between 0 and 1, inclusive. . . So, you do not have to worry about that case. If you really wanted, you could add assert statements to the top of your function to ensure that p is between 0 and 1 inclusive."}, {"id": 1873, "value": "I believe the highest score is checked. If there exist 2 or more submissions with the same score, then the most recent will be checked."}, {"id": 1874, "value": "Let's say vp = {{1, 2}, {3, 4}}. The code will print the following:. vp[0] = {1, 2}. vp[1] = {3, 4}. . The \"vp[\" << i << \"]\" part just prints out the name of the vector with the appropriate index i for clarity."}, {"id": 1875, "value": "The autograder provides several points for compilation of stats_tests.cpp, so you need to attach a compiling stats_tests.cpp. However, for project 1, you do not need to be concerned far as mutation testing (i.e. autograder grading the efficacy of your tests), but it is probably still a good idea to write lots of tests to provide the best chance of succeeding in private tests."}, {"id": 1876, "value": "It seems there was an error opening a file you have provided to extract_columns in main. Could you double check that valid filenames are being used?"}, {"id": 1877, "value": "There is no style portion of P1 - it is just public and private tests.. . There will however be style grading on the autograder public tests for future projects, so if you want a head start on what to look out for I would reference the EECS 280 Style Guide."}, {"id": 1878, "value": "The columns aren't actually empty, they just don't line up.\u00a0. . If you use any program that can visualize tsv files, you can see that, for example, qflag is not actually empty:. . . I used this website"}, {"id": 1879, "value": "Try writing. . vector<pair<double, int> > summary;. Note the space between then > and >.. The compiler might confuse the >> as an operator (the one you use in line 17)."}, {"id": 1880, "value": "Usually this error occurs when you are not opening your folder with WSL in VSCode.. . I would ensure that you have opened your folder in WSL with the green double arrows in the bottom left of the IDE as shown in the screenshot below. If this error persists, please follow up below.. . "}, {"id": 1881, "value": "Oftentimes this is due to not initializing variables properly. Is there anywhere you're using a variable that hasn't been initialized?Alternatively, is there anywhere that you're accessing out of bounds?"}, {"id": 1882, "value": "You will need to #include <iostream> at the top of stats.cpp to use cout, endl."}, {"id": 1883, "value": "I would take a close look at your logic on lines 27 - 29 of your summarize function. Consider an edge case that would make it so that your value of index would become greater than your size of the vector, which would then cause v[index] to go out of bounds.\u00a0. . Suppose you had the vector\u00a0. . [1, 3, 3, 3]. . when your program is trying to count how many 3's there are, on the last iteration, it will increase index past the size of the vector and then the while loop condition will attempt to index into v[4] which we know will cause a segmentation fault!. . "}, {"id": 1884, "value": "1. summarize function itself should not print anything, it should simply return a vector<pair<double, int>>.\u00a02. while testing and writing your main file, you will have to find a way to print a vector<pair<double, int>> in the format specified in the spec\u00a03. to do this, think of how you can utilize a loop to print out both values in each pair in the correct format.\u00a0"}, {"id": 1885, "value": "It's hard to say for sure based on the information provided, but the error might be that Visual Studio is building the executable in a different location to where main\\_test\\_data.ts is, and as a result the program can't find the file when run. If you go to Project > Properties > Configuration Properties > Debugging, the working directory field should be set to `$(ProjectDir)`."}, {"id": 1886, "value": "The issue appears to be that Visual Studio cannot find a `main` function among all the files included in the build. Is stats_tests.cpp included in the build? Also just to make sure, there should be a `main` function in stats_tests.cpp responsible for calling all of your tests."}, {"id": 1887, "value": "the input will always be between 0 & 1, you don\u2019t have to account for possibilities outside of that. but yeah if it\u2019s 0 it should be first element, if it\u2019s 1 it should be last element."}, {"id": 1888, "value": "See @45. This is most likely a floating point precision issue, particularly since you are doing arithmetic."}, {"id": 1889, "value": "The summarize function is meant to return each distinct number in the input vector and the number of times it appears. So for the dataset {1,1,2,2,3,3,3} the summarize function would return {{1, 2}, {2, 2}, {3, 3}}.. . A pair is a structure that holds two objects in the first and second field:. . . pair<double, int> p{2.0, 3};. cout << p.first << \": \" << p.second << endl;. This would print \"2: 3\"."}, {"id": 1890, "value": "When you open a terminal, it will usually open in the home directory: https://eecs280staff.github.io/tutorials/cli.html#home-directory-. . Using commands like cd (https://eecs280staff.github.io/tutorials/cli.html#cd), you will have to navigate to your project directory (eg. p1-stats). . Once you are in your project directory, commands like make main.exe should work (assuming you have a main.cpp in your project directory)."}, {"id": 1891, "value": "I just submitted and it partly works on autograder. xinyaxu"}, {"id": 1892, "value": "Can you do `pwd` and then `ls` and show the output? You might not be in the right directory"}, {"id": 1893, "value": "I was trying to resize the vector space to avoid having an empty vector space using the resize function. Using the debugger, the only error it shows me is concerning my vector.\u00a0\"non-aggregate type 'vector<double>' cannot be initialized with an initializer list\",. "}, {"id": 1894, "value": "Marking as resolved"}, {"id": 1895, "value": "This sounds like something to talk about at office hours, but in general the key is to sort the vector and count each \"group\" of similar numbers. We'd have to look more at your code to help you out."}, {"id": 1896, "value": "Make sure you're using *sample* standard deviation, rather than population standard deviation."}, {"id": 1897, "value": "Try running `make main.exe` in the terminal and set `program` to `${workspaceRoot}/main.exe` and `cwd` to `${workspaceRoot}`."}, {"id": 1898, "value": ""}, {"id": 1899, "value": "Could you edit your name to include your uniqname as in @64 so we can look at your autograder?"}, {"id": 1900, "value": ""}, {"id": 1901, "value": "The count function returns the total number of elements in vector v. However, the vector you get from the summarize function might not be the size of v. For instance, if v = {1, 1, 2, 2, 2}, then your summarize function would return a {{1, 2}, {2, 3}}}. From this, we can see that count would return a size of 5 but your summarize function only has 2 pairs in it (so your summarize function is size 2). Therefore, you're indexing out of bounds in your loop because size is potentially greater than the actual size of your summary vector."}, {"id": 1902, "value": "Try typing sudo hwclock -s into the terminal - could fix the issue.. If not, try restarting wsl.. . Another thing that could work is running\u00a0touch stats_tests.cpp, and then\u00a0make clean and then rerun the make command."}, {"id": 1903, "value": "That's right! Any percentile of a dataset of length 1 is the number in the dataset. The 0th percentile is the minimum value of the dataset."}, {"id": 1904, "value": "Never mind I got it by putting an & in front of intPart."}, {"id": 1905, "value": "The autograder is not looking for any particular output format for the test cases, it purely uses the assert() statements to determine which test cases passed or failed. The console output is for your convenience (and is highly recommended). Follow up with any additional questions."}, {"id": 1906, "value": "I would recommend looking at how you\u2019re performing your division operations. This to me seems like a case where the division is rounding down, probably due to division of types such as int by int, which can\u2019t be a float.\u00a0"}, {"id": 1907, "value": "check out the link in the follow up for question @45! it\u2019s probably due to a computer rounding error but it explains how to get around it"}, {"id": 1908, "value": "\"Would I just type out the expected vector of pairs using brackets and comma separated pairs, and then put that on the right of the equals signs in my assertion statement?\". . This would work."}, {"id": 1909, "value": "The private test cases use your stats.cpp code with custom test cases we have written. Passing the public test cases makes no guarantee that you will pass the private test cases, hence you'll want to thoroughly test your code as according to the requirements listed in the spec.\u00a0"}, {"id": 1910, "value": "A heap buffer overflow typically occurs when you are accessing memory beyond what was allocated for a particular object/array. We will cover this in detail later in the course. I would first check to see if you are indexing out-of-bounds in the summary vector. Follow up if the bug doesn't go away!"}, {"id": 1911, "value": "If you select the show whitespace option, you'll see that there is a whitespace difference between your output and the expected output."}, {"id": 1912, "value": "You've made a great start! This would be perfect for the summarize function if you used a vector of pairs to store each value and its frequency.. . One thing before some tips on mode: note that the implementations for the functions in stats.h should go in stats.cpp. The function stubs are already included in stats.cpp, so you will have to copy+paste this code into the relevant function. The main function should only exist in main.cpp, for which instructions are available on the spec.. . Now, going back to mode. In your current code, it seems that at line 17, you have access to a value and its frequency. For the mode, you will need to keep track of the \"maximum frequency so far\" and the respective value. You will probably need some new variables to store this information.. . Hope this gives some insight for you to give it a go!"}, {"id": 1913, "value": "The first main public test is simply checking for output, whereas the UB test case is not only checking for output, but making sure that in the process of running the test case there is no undefined behavior (like an out of bounds memory access).. . I would encourage you to reason about the difference between these two checks. I.E., can you have undefined behavior and still get the correct output?"}, {"id": 1914, "value": "This suggests there is an error with the 100th percentile function, maybe causing the program to terminate unexpectedly before the 100th percentile can complete.. . I would recommend writing some tests for the 100th percentile case, and using a debugger to step through it.. . I will also note that there any many posts on Piazza about the 100th percentile case, so you may find some useful hints by searching through Piazza :)"}, {"id": 1915, "value": "Difficult to say without more context, but maybe check that your project was created as a console project."}, {"id": 1916, "value": "Your main.cpp file should output in the format given. However, you should still make sure that all of your functions work according to the RME (e.g., count should be able to deal with an empty vector regardless of whether other functions would fail). A great way to individually test each function and ensure they all work as expected is through the stats_tests.cpp file, which we have provided for you to write your own unit tests."}, {"id": 1917, "value": "I would suggest downloading another version of the main.test.out.correct file and doing this comparison again. I haven't been able to pinpoint down exactly what would be the cause of this. Most likely, as other staff members have suggested, probably some whitespace was added to end of the file at some point. "}, {"id": 1918, "value": "We don't strictly enforce unit testing, but I would say it's the best approach to testing for this class in general."}, {"id": 1919, "value": "You should be able to right click on one of your files in vscode and click \"reveal in explorer.\" there's also a shortcut of shift + alt + r"}, {"id": 1920, "value": "Could you add a screenshot of the error messages?"}, {"id": 1921, "value": "Aha, this was a little tricky! According to your latest autograder submit, you are including `stats.cpp` in `main.cpp`. Don't include your .cpp files in other .cpp files or else the compiler gets confused like so."}, {"id": 1922, "value": "In the future please be careful about posting screenshots of your code publicly, I have moved this post to private only visible to instructors!\u00a0. . Looks like you are trying to access the first val of an element in your data vector. Remember, data here is a vector of doubles so it does not have a first and second value. Try looking at the return type of summarize and think about how you can store the return value and use that in our for loop instead of data as that vector will contain the actual solution values you are trying to print"}, {"id": 1923, "value": "Sort is in p1_library.cpp. You should include the p1_library.h file in your code and compile with p1_library.cpp"}, {"id": 1924, "value": "Try taking a closer look at the return type for the summarize function. Does it match the return type of what you are setting it equal to?\u00a0"}, {"id": 1925, "value": "You will have to have some way of remembering what your *previous* most seen value was, as well as how many times you saw it. So there are two other variables I recommend you add (which I'll let you explore on your own for now, but hop into OH if you'd like further guidance)."}, {"id": 1926, "value": "Please add your uniqname to your Piazza profile, so staff can look up your code on the AG."}, {"id": 1927, "value": "Can you add your uniqname to your Piazza profile? I suspect that your max function isn't the issue."}, {"id": 1928, "value": "It looks like you did not generate the executable file for the file you are trying to debug. If your launch json's program field says stats_public_tests.exe then it is configured to debug the public tests file and you have to generate the executable for this file by running\u00a0$ make stats_public_test.exe in your terminal before running your debugger\u00a0. . "}, {"id": 1929, "value": "It looks like some of your spacing may be off. In the bottom, click \"show whitespace\" and it will show you space and enter marks, so you can figure out where they mismatch.\u00a0"}, {"id": 1930, "value": "Yep, it's just signaling to you that you have unsaved changes in your file. If you save your file with Ctrl S it should resolve. Go ahead and open up a follow up if that did not resolve it"}, {"id": 1931, "value": "No worries just resolved it."}, {"id": 1932, "value": "For the problem about your function still indexing out of bounds, consider what happens inside the for loop on its final iteration (i = v.size() - 1).\u00a0"}, {"id": 1933, "value": "You'll have to run this on CAEN. To set up CAEN, please read\u00a0this."}, {"id": 1934, "value": "It seems like you are trying to access index 5 of your vector, but the vector only has 5 elements (the last index would be the 4th place).\u00a0. . I would think this issue might be from your summarize() or percentile() function. Can you post the code for them here?"}, {"id": 1935, "value": "Have you tried running your codes on valgrind?"}, {"id": 1936, "value": "Try incorporating floating point comparisons in your test cases: https://eecs280staff.github.io/p1-stats/comparisons.html#floating-point-comparisons"}, {"id": 1937, "value": "resolved"}, {"id": 1938, "value": "The program shown in the reference material is an example of how to implement floating point comparison. Within your stats tests, you need to follow similar logic whenever you compare two floating point values. To make your program a bit simpler and more concise, you could perhaps create a helper function to perform floating point comparisons for you."}, {"id": 1939, "value": "Reading through the error, it says that you \"attempt to subscript container with out-of-bounds index 5\". This means that you are indexing to an element of a vector that does not exist. For example, if a vector\u00a0v only has 5 elements,\u00a0v[5] would be indexing out of bounds (since vectors are indexed starting at 0).\u00a0I would use your debugger to check how your percentile function is behaving for the 100th percentile case and ensure you are not indexing out of bounds. Follow up with any additional questions!. . Edit: In the future, please follow the question format specified here: @64 so that we can answer your question more efficiently"}, {"id": 1940, "value": "@111 make sure to include the project uid at the top of main.cpp and stats.cpp. just put this comment:. . . // Project UID 5366c7e2b77742d5b2142097e51561a5"}, {"id": 1941, "value": "Your test functions can have multiple asserts and multiple cases."}, {"id": 1942, "value": "Those values are not the exact same so the assert is evaluating to false. I recommend checking if floating point numbers are within some epsilon of each other, rather than using equality directly."}, {"id": 1943, "value": "Ditto the student's answer: For your style grade, the autograder will run some scripts that search for potential style issues (such as excessively long lines and functions, deeply-nested control blocks, etc.). You can check if your code has any style issues locally by running \"make style\". However, you might have to do some setup first before this command works. Here are our style guidelines."}, {"id": 1944, "value": "Ditto the student's answer: More specifically, try running your tests under the debugger without any breakpoints. Once the segmentation fault occurs, your debugger should automatically pause on the offending line. From there, you can determine what happened by checking your variables' values. Here's our guide to debugging."}, {"id": 1945, "value": "I would first check that you have only one definition of sum() in stats.cpp, and that you're only including stats.h in your cpp files -- not stats.cpp. If that's fine, make sure you're only including the libraries allowed here. It's probably not an issue in your case, but sometimes an included library can provide a function with the same name and similar arguments to one you've written, causing ambiguity (it's why \"using namespace std\" is discouraged outside the context of EECS 280).. . If these suggestions don't work, I recommend you make a private post and share some of your code with us, or come to office hours!"}, {"id": 1946, "value": "As long as you only use your helper functions within stats.cpp, you're good to go! You don't want to modify stats.h, as we use our own copy of stats.h on the autograder, so if you use a different interface (i.e. you call your frequency() helper in your tests, or in main.cpp), you'll probably get compiler errors on the autograder."}, {"id": 1947, "value": "I see your loops iterate from i = 0 to i = v.size() - 1, which is safe. But within these loops, you sometimes index into (i + 1); is this safe when i = v.size() - 1? In these cases, you index at v.size(), which is out of bounds. I think that's the source of your runtime issues."}, {"id": 1948, "value": "You are expected to use the sort function from p1_library.h, not the standard sort. Check out the file p1_library.h, and see how you want to call this function."}, {"id": 1949, "value": "Check out the instructor error @337. Also, when you're compiling your code, you can use 'make' commands to do so in the terminal -- for example, 'make stats_tests.exe' and then run it with ./stats_tests.exe"}, {"id": 1950, "value": "@111 make sure to include the project uid at the top of main.cpp and stats.cpp. just put this comment:. . . // Project UID 5366c7e2b77742d5b2142097e51561a5. "}, {"id": 1951, "value": "Can you post what item you are trying to push back?"}, {"id": 1952, "value": "What is the value of your \"miDebuggerPath\" variable? Also, do you have gdb installed? You can check this by running \"which gdb\" in your terminal; if you don't see any output, it's not installed, and you might want to check the setup tutorials to see if you missed anything."}, {"id": 1953, "value": "You are provided with a sort function inside p1_library.h, i.e., it is implemented for you, which sorts a vector of doubles in ascending order."}, {"id": 1954, "value": "UB stands for undefined behavior. This is usually caused by trying to access a location in your computer's memory that is not explicitly defined. According to your submission it looks like you are trying to index into a vector with an invalid index (ie. trying to get v[5] in a vector with a size of five, which will cause UB because indexes start at 0).. . Enabling an address sanitizer will help you find the error. Additionally, check out\u00a0@196 for more info."}, {"id": 1955, "value": "Marking as resolved"}, {"id": 1956, "value": "These warnings are not related to your code, but rather are warnings make is generating. I don't think you need to worry about them at all"}, {"id": 1957, "value": "First of all, thanks for the great screenshots! You answered a couple of preliminary questions I had.. . Is GCC installed in WSL? You can check this by opening a WSL terminal and running \"which gcc\". If you don't see any output, you need to install GCC. Check the setup tutorial for guidance on this.. . If GCC is installed, you might need to reconfigure your C/C++ extension to search your WSL installation's system include path. Try following the steps in this post, and check if a path like /usr/include is already there. If it isn't, try adding it.. . If all else fails, try coming to office hours!"}, {"id": 1958, "value": "Based on the excel method and a 6 element dataset, 25th percentile is 25/100 (6-1) + 1 = 2.25. So the percentile would be decimal since it returns the v[1] + 0.25 (v[2] - v[1]) (note: v[2] is 3rd element)"}, {"id": 1959, "value": "Can you try creating this expected result vector on a separate line?"}, {"id": 1960, "value": "A vector of pairs is not the same as a vector of vectors, and naturally they are not convertible to each other. You should only assign, say a vector<pair<double, int>>, to another vector<pair<double, int>>."}, {"id": 1961, "value": "Make sure your function definition in your h file is the same as that in your cpp file including the function name, return type, and parameters."}, {"id": 1962, "value": "It seems that you don't have a main.cpp file, which is required by make main.exe. Create a main.cpp and print hello world from the main function. Then it should work."}, {"id": 1963, "value": "You can access the exact number and frequency of the number by using the dot (.) operator, such as vp[x].first for printing the number and vp[x].second for printing the frequency."}, {"id": 1964, "value": "Try compiling (running `make main.exe`) again and running debugger a second time, the debugger might just be running on out of date code. You can verify whether the variable is being changed by looking under \"variables\" on the left hand side while running the debugger."}, {"id": 1965, "value": "Here's some ideas:. at least one of the functions can take an input of a vector of size 0...would switching the order ever break any functions that rely on the elements being in order?"}, {"id": 1966, "value": "I had this issue when I was compiling manually and not using the 'make' command. Check the line that 'make' gives you and it should help you."}, {"id": 1967, "value": "The spec sheet should say somewhere that, in the case of a tie, the lowest value is chosen. Since the data set is required to have at least one element, just the lowest of all the modes (if each element is represented only once, it would just be the lowest element, etc)."}, {"id": 1968, "value": "I would take a look at your how your indexing your vector in your functions. For further comments, please either convert this post to private, or come to OH."}, {"id": 1969, "value": "As the student's answer is suggesting, the error indicates that you are accessing an element of a vector that is out-of-bounds. It means that if the vector contains only 3 elements and you try to access the fourth element, which should not be allowed. After looking at your code and the output, I think you might want to double-check your `mode()` and `summarize()` functions."}, {"id": 1970, "value": "I believe for some future projects there will be style checks. However, these will be things that the Autograder can check like like line length, rather neatness or presence of comments."}, {"id": 1971, "value": "The student's answer is correct. The input vector of each function contains real numbers. If you are not sure if your program is working correctly, you should write more test cases to test your program."}, {"id": 1972, "value": "Student followup seems correct -- it looks like somewhere (possibly summarize?) you are indexing out of bounds with index -1. . . btw please add your uniqname to your display name on piazza!"}, {"id": 1973, "value": "Asserts are not necessary. We use asserts to make sure any in variants or requirements we have are being fulfilled.. . For example, we have a function that is expecting an int greater than 5. When we test our code we see that the assert statement fails. We then can conclude that there is an issue with the number being passed in. Either our test case is invalid, or if the input comes from a previous function that output was invalid.. . Mutation testing is checking for general bugs one might have in an implementation. For example, correctly handling an edge case in an if statement."}, {"id": 1974, "value": "Could you include your username in your Piazza profile? I would recommend checking any loops you have, in particular while loops. While loops are often the cause of timeouts/indefinite run time.\u00a0"}, {"id": 1975, "value": "Most likely due to floating point comparison. Check the comparison section on the project spec page to see how to accurately compare floats.\u00a0"}, {"id": 1976, "value": "Try replacing `pow(val,2)` with `val * val`? I agree that your logic looks correct."}, {"id": 1977, "value": "cout is a function from the C++ Standard Template Library (STL) that is used to output text to the console. It does not have the ability to directly output the contents of a std::vector<double>. To output the contents of a vector, you can use a loop to iterate through its elements and output each one using cout."}, {"id": 1978, "value": "Are you using the Makefile to compile your program? These would be commands such as `make test` or `make main.exe`"}, {"id": 1979, "value": "If you look at the `stats.cpp` file, it has a project ID comment at the top. Make sure you copy that into your `main.cpp` as well.. . ![image.png](/redirect/s3?bucket=uploads&prefix=paste%2Fkt103pdags15va%2F75d2fc88f82f68ec4b1acebf5019686f5e928be0298649384da39fdf49f52f00%2Fimage.png). . In addition, you are expected to use the `sort()` function that we provide to you in `p1_library` instead of using std::sort."}, {"id": 1980, "value": "Are the arguments you're passing into the debugger through your launch.json the same as the arguments you're passing in on the command line?I ran into a similar issue, and that is most likely due to an unsorted vector when running the percentile calculations (the indices are out of order). Sorting the vector first should solve this."}, {"id": 1981, "value": "You may want to double check your test cases, and in your error message, \"stod\" is converting string to double, which we don't need in this project."}, {"id": 1982, "value": "That's right you need to implement all the functions from `stats.h` in `stats.cpp`. The function stubs are just to get you started and make your program compile successfully. You can delete the `assert(false)` statements when you have done implementing them."}, {"id": 1983, "value": "The functions in stats.h will be used to perform different statistical tasks. The data is input as the parameter of each function as a vector of double. So basically you can treat the data as a vector of double, and you need to do some calculations on these double values."}, {"id": 1984, "value": "The statistics functions should be implemented in stats.cpp. In main.cpp, you should implement the analysis program by calling them. However, you can write any helper functions if you see fit."}, {"id": 1985, "value": "Run `chmod 755 /Users/zcbg/Desktop/EECS280/p1-stats`. Earlier you ran `chmod 755 /Users/zcbg/Desktop/EECS280/p1-stats`, which prevents you from executing anything (including `make`).. . More info here: https://chmodcommand.com/chmod-600/. . https://chmodcommand.com/chmod-755/"}, {"id": 1986, "value": "The spec for the mode function is as follows:. // \u00a0In the event of a tie, return the smallest value (as in the\u00a0// \u00a0above examples). . So I think that is a pretty safe assumption"}, {"id": 1987, "value": "Make sure you created stats.cpp with this content."}, {"id": 1988, "value": ""}, {"id": 1989, "value": "Are you using Visual Studio or VS Code? Visual Studio only works on Windows and will not work properly on Linux.. . If it's VS Code and Linux, you can move files around using `mv  `. If you need more help than that, please post some screenshots of your directory setup (we need a bit more to go off of here)."}, {"id": 1990, "value": "I saw that you are getting full credit for public tests on AG. Has it been resolved?"}, {"id": 1991, "value": "The reason for the error is that vectors are indexed from 0 to some positive number n and this is often with a variable of type size_t. Since i is an integer, i can be negative hence the error. I would recommend in your for loop having i as a size_t rather than an int. That should have the error go away.\u00a0"}, {"id": 1992, "value": "You shouldn't need to make a stats.tests.cpp file, we give you a \"stats_tests.cpp.starter\" file which you should rename to just \"stats_tests.cpp\". It looks like your \"stats_public_test.exe\" is compiling and running normally (until it reaches an assertion that fails so you want to check why that assertion is failing)"}, {"id": 1993, "value": "You are comparing values, not assigning values, so you probably want to use double equal signs rather than the single equal sign you have."}, {"id": 1994, "value": "You might forget to run `make main.exe`"}, {"id": 1995, "value": "I believe that this means that this means the output for your main.cpp did not exactly match the expected output, but that test was not counted as one of the graded public tests."}, {"id": 1996, "value": "Did you include any other library locally? I can see that you use std::count in the summarize() function, but the compiler doesn't recognize it because it can only see the count(vector\\) function defined in `stats.cpp`.. . There are restrictions on what you can use in this project. . . ![image.png](/redirect/s3?bucket=uploads&prefix=paste%2Fkt103pdags15va%2Ffac4fc04233f5a733974c593e2aecf9af9b1e8c2fabd9160f9641293ad886bfb%2Fimage.png)"}, {"id": 1997, "value": "Because the condition in the assert() function is false, it will throw an error. Adding `assert(false)` in `stats.cpp` can make the program compile, but it is not ready to run yet. You should implement all the functions and remove all `assert(false)` to make it to work.. . Also please include your uniquename in your piazza profile so that we can look at your code on AG. @64"}, {"id": 1998, "value": "Did you make your executable before trying to run the debugger? It looks like your \"main.exe\" file might not be made yet, to fix this you can type \"make main.exe\" into your terminal (when you're in your project1 directory). Whenever you want to run main.exe without using the debugger, make sure the file has been made and then type \"./main.exe\" and enter into the terminal,"}, {"id": 1999, "value": "Without further context, this is going to be difficult to debug over Piazza. I\u2019d recommend coming to OH so we can help you resolve this.\u00a0"}, {"id": 2000, "value": "You should be fine if you can compile your program and debug it. But if that's not the case, please post the debugger error on the project files or errors in the terminal. Also are you on mac or windows?"}, {"id": 2001, "value": "You have a lot of include in your main.cpp! Are they all necessary? Think about which include(s) aren't actually needed and remove them. Then you should be good."}, {"id": 2002, "value": "I'd suggest you double check if your launch.json file is configured the way as shown in tutorials.. . Specifically, after you add configuration, the default configuration that is already there should be removed. Your configuration should look like something like this:. \"configurations\":[. \u00a0 {. \u00a0 \u00a0 \"name\": \"(lldb) Launch\",. \u00a0 \u00a0 .... \u00a0 \u00a0 \"MIModee: lldb\". \u00a0 \u00a0\u00a0}. \u00a0 // remove everything below here. ]"}, {"id": 2003, "value": "A common issue that could cause this error is misconfiguration of Xcode custom working directory. Go to Product -> Scheme -> Edit Scheme -> Options. Check this box \"Use custom working directory\" and make sure you have the correct working directory in the input box below.. . Another related issue I've seen is having two p1-stats directory, due to duplicate creation at the beginning(this is also Xcode specifics). Usually, your files are in the second p1-stats directory, so adding another /p1-stats at the end might solve your issue.. . If these still can't help you, feel free to come to office hours!"}, {"id": 2004, "value": "Marking as resolved"}, {"id": 2005, "value": "The condition in this `for(int j=0; i"}, {"id": 2006, "value": "Have you implemented any of the stats functions yet (like sum, count, summarize, etc) in stats.cpp? What's happening is you're calling these functions in stats_tests.cpp, but the linker cannot find definitions for these functions anywhere in your project. If you haven't implemented these functions yet but want to compile stats_tests.exe, you can create \"stubs\" for these functions in stats.cpp. That is, you can just give these functions dummy implementations, like immediately returning 0 for count(), or (even better) just putting an assert(false) in the function body.. . Note that if you use assert(false) in a function stub, you should be able to compile your tests without any linker errors, but any calls to the function at runtime will immediately cause the program to terminate. (Think about why this might be ideal behavior when testing your project while it's still incomplete, as opposed to doing something like \"return 0\")"}, {"id": 2007, "value": "did you #include <limits>?"}, {"id": 2008, "value": "you want to get rid of those endls because between two >> you want to have a variable name for cin to write input to"}, {"id": 2009, "value": "You have differences in the prompt to enter a filename (it seems like you forgot to add a new line), summary, and mode.. . . <. . shows lines from the first file (main_test.out). . >. . shows lines from the second file (main_test.out.correct)"}, {"id": 2010, "value": "It would help if you could post the full compiler error."}, {"id": 2011, "value": "You'll want to use the sample standard deviation, or sx function on your calculator. This is because we are dividing by n-1 in our calculation, which is an approximation to adjust for the sample population (as opposed to the whole population, which would divide by n)."}, {"id": 2012, "value": "Yes, I believe it is encouraged to use helper functions."}, {"id": 2013, "value": "Yes, there are private tests."}, {"id": 2014, "value": "You'll definitely want to delete them after you write the function! They are just a placeholder as the student answer says"}, {"id": 2015, "value": "Resolved"}, {"id": 2016, "value": "You should leave the names of the files you submit to autograder as this is how it recognizes and grades them! For files you don't submit to autograder, it's up to you."}, {"id": 2017, "value": "Just to answer the questions for other students:. . 1. Negative numbers are valid input to the functions in `stats.cpp`. . 2. Yes, you should be accounting for 0-indexing in all of your implementations"}, {"id": 2018, "value": "Look carefully at the formula for percentile, it indexes the \"v\" elements of the dataset starting from 1 when your vector is indexed starting from zero.. "}, {"id": 2019, "value": "You cannot declare an array with a size that can only be known at run time. You probably want to make numbersList a vector.. "}, {"id": 2020, "value": "Remember that the main functions that you will implement for p1 come from the `stats.h` file. When writing the functions in `stats.cpp`, your function definitions (return type, name, parameters, etc.) must be exactly the same as the function stubs shown in `stats.h`. So, because none of the function stubs in `stats.h` pass the parameters by reference, you shouldn't either!"}, {"id": 2021, "value": "The output in yellow in your debug console is not an error, but just information logs from your debugger -- you usually don't have to pay any attention to them. It looks like your program is aborting due to a failed assertion: Whenever your sum() function is called, it will always abort the program due to the \"assert(false)\" statement in it. We typically add these \"assert(false)\" statements to functions we haven't finished implementing; once you've implemented sum(), remove the assertion, and the failure should go away (though bugs in your implementation may cause other asserts or errors to occur).. . As for your debugger itself, everything seems to be working. Just make sure you remake your program every time you modify it before re-running or debugging it!"}, {"id": 2022, "value": "One trick in math/physics to minimize rounding errors is do computations all at once. For example, if we are trying to calculate $$\\frac{2}{3} \\cdot \\frac{5}{7}$$ in decimals, instead of doing it in two steps - first calculate $$\\frac{2}{3}$$ and save it as a decimal, then calculate $$\\frac{5}{7}$$ and save it as a decimal, and then multiple the two decimals - we could save the computation and do it only once, i.e., compute $$\\frac{10}{21}$$ and get the result in decimals.. . I suggest you try this out in your program and avoid intermediate roundings. Hope this helps. If not, feel free to post a follow-up!"}, {"id": 2023, "value": "In general, it is recommended that you test your program step by step, e.g. when you finish a new function. Then you would be able to discover bugs early on and fix them, instead of testing the whole program all at once, where you are likely to have many bugs intertwining.. . In the context of p1, you are also encouraged to follow this good practice. It is okay to fail part of the tests because you haven't implemented that function yet, but if you fail a test of a function you have completed, then you know there is a problem that needs to be fixed."}, {"id": 2024, "value": "The makefile is not a source file that should be compiled. Instead, it specifies commands to be run in the terminal whenever make is called. The given make file specifies commands to be run that will compile the code."}, {"id": 2025, "value": ""}, {"id": 2026, "value": "It could be whitespace related. Did you put a newline after? If not, that might fix it.. . Edit: I also want to add that there is an option in autograder (this specific place) to show whitespaces. If you turn it on, every whitespace will be marked with black dots. Maybe you can try it."}, {"id": 2027, "value": "It looks like you still have assert(false) in the stubs. These will always fail, and are just intended to be placeholders until you implement the functions. You can get rid of them if you\u2019d like and replace them with some other generic return statement until you implement the functions."}, {"id": 2028, "value": "You should download the starter file from the project spec. Then, stats.h describes the functions that you should write, and you should implement them in stats.cpp. . The main project spec page has all the shell of where you should write them, that you should paste into the empty stats.cpp file. The stats header is included in the files that actually run the files, so stats.cpp should't have a main() function -- it should just be the code for implementing the stats functions.\u00a0"}, {"id": 2029, "value": "One piece of advice is to sort the vector, as it might make the problem a bit easier. Also, your solution seems quite reasonable, as if you know each of the elements, and the number of each of them, you can just populate a new vector of pairs with those values."}, {"id": 2030, "value": "From LSA course guide,. . Enforced Prerequisites of this course:. ENGR 101 or 151 or EECS 180 or 183 or ROB 102;(C or better, No OP/F). And fewer than 2 previous elections of EECS 280 (incl. grades of W & I). You can join Proffice hours and talk with our faculty specifically if you have any concern about the requirements or expectations of this class."}, {"id": 2031, "value": "Building off the student answer, you gotta run the command `make main.exe` first so that your compiler will make the executable to debug."}, {"id": 2032, "value": "I\u2019m not aware of a setup this AG has to submit using the command line.\u00a0"}, {"id": 2033, "value": "You don't need to use mode() for summarize() (or use summarize for mode(), i.e., summarize() is not necessarily helpful for you to implement mode function easier).. . For mode(), think about how you may find the number that appears for the most times and how to guarantee that when there is a tie, the number you returned is the smallest one. In stats.h, we provided 3 hints, and you may want to start from there."}, {"id": 2034, "value": "We want you to print out the statistical information in main.cpp (but not in summarize()). So you may want to get such a vector of pairs from summarize() as you processed all the raw data into this vector, and print them out in main.cpp."}, {"id": 2035, "value": "The elements in the vector can be of any valid double value, which includes negatives.\u00a0"}, {"id": 2036, "value": "Yes"}, {"id": 2037, "value": "There will be no mutation testing for project 1."}, {"id": 2038, "value": "Ditto the student's answer: You want your test suite to be comprehensive so you can catch any potential bugs in your solution, and thus pass more of the autograder's tests.. . For later projects, to measure how comprehensive your test suite is, we will also run it against our own buggy solutions. The more buggy solutions you expose, the more points you will be awarded."}, {"id": 2039, "value": "Is this compilation error happening when you test your code locally?"}, {"id": 2040, "value": "The number of test cases don't need to match. The test cases you write are to make sure your code is thorough and works properly. They are also graded on how thorough your test cases are (with mutation testing), although I don't know if that will happen for this project."}, {"id": 2041, "value": "Do you have #include \"p1_library.h\" at the top?"}, {"id": 2042, "value": "It looks like you might be calling percentile without actually implementing it. This error should in theory go away after you implement the percentile function."}, {"id": 2043, "value": "If it is returned by the function, you can just assign the result of calling the function to a variable, i.e.:. ```c++. vector> summary = summarize(v);. ```"}, {"id": 2044, "value": "See @207"}, {"id": 2045, "value": "Resolved in follow ups"}, {"id": 2046, "value": "From the std::count docs here, it seems that count takes in iterators (which you will learn more about later in 280!) as arguments and may be causing some issues.. . Could you try changing the assert to:. . assert(v.size() != 0). Or even better, you could use:. . assert(!v.empty()). . Let us know if the assertion continues to fail."}, {"id": 2047, "value": "The \"mutation testing\" is happening for project 2 and beyond."}, {"id": 2048, "value": "Seems like you have made some progress! I will note, though, that we cannot give you answers for general \"how is my code?\"-style questions.. . If you have a specific question that you think everyone could benefit from, we would be happy to talk on Piazza, and if you have a specific question about your code, we would be happy to help you in office hours! Good luck!"}, {"id": 2049, "value": "This is likely an issue where a minute difference between the expected and actual value (for example 0.00000001) causes the assert to fail even though you intend for them to be identical. Hopefully this helps: https://eecs280staff.github.io/p1-stats/comparisons.html (scroll to the part about floating point comparisons)."}, {"id": 2050, "value": "Can you post the error you're getting within the UB checks? (Also please add your uniqname to your piazza username @64)"}, {"id": 2051, "value": "I\u2019m not sure if a scenario where stdev should be returning infinity. Do you mind sharing the scenario you\u2019re describing here?"}, {"id": 2052, "value": "Yes this should work.\u00a0"}, {"id": 2053, "value": "As your code currently stands, tempNum starts uninitialized as you point out, so the if statement condition that uses tempNum is undefined at first, which means that the program could behave differently every time you run it.. . How about initializing tempNum (along with your other structures) with the first element of (sorted) v, and modifying your loop to start with the second element?"}, {"id": 2054, "value": "You should make sure your functions work on their own (e.g. sort the vector inside the function)"}, {"id": 2055, "value": "You don\u2019t necessarily have to use a nested loop, the summarize function may help too. But if you do, imagine as you iterate over each element, you need to count how many of each elements are there and keep track of unique elements. How would you figure out whether an element is unique?\u00a0"}, {"id": 2056, "value": "Thanks for asking to make sure. It is actually good and recommended to use functions inside other functions. After all, the point of writing a function is that you don't have to write it again somewhere else (and create the possibility for more errors)."}, {"id": 2057, "value": "You should double check the edge case for your percentile function, specifically the p value when percentile is 100. The error says that you are accessing a container with 5 elements using index 5, which means if v = {0,1,2,3,4}, there\u2019s some code that is trying v[5]."}, {"id": 2058, "value": "If the inputted data type does not match the function prototype, we (as programmers) can assume that the compiler will throw an error for us.. . So we do not have to create asserts in this case."}, {"id": 2059, "value": "You may find @196 to be a useful hint. Let us know if you need some guidance after reading that post!"}, {"id": 2060, "value": "It seems like you\u2019re getting this due to being in the wrong working folder. Did you create a new project folder to store all the starter files? If so, you also need to navigate to that project folder using cd {path-to-folder}."}, {"id": 2061, "value": "In the stats.h file provided in the starter code it specifies to use the corrected sample standard deviation."}, {"id": 2062, "value": "You will not lose points for not setting it up, but it will make your life A LOT easier, especially in the future :)"}, {"id": 2063, "value": "These aren't compilation warnings for your code. Instead, they are warnings that make is generating. So long as the executable is generating fine, these warnings shouldn't matter at all."}, {"id": 2064, "value": "Did you have using namespace std; on top? \u00a0Or did you put any cout statements outside the scope of your main function?"}, {"id": 2065, "value": "Look at the functions available to you in `p1_library.h`. At least one of them should be very useful :)"}, {"id": 2066, "value": "this is similar to something from before in Piazza I believe. Try making sure you have saved all your files and aren't #include-ing anything you're not supposed to. If nothing else, do the Hello World thing from the setup tutorial and if that doesn't result in this error, compare your files and see what difference may be causing the issue."}, {"id": 2067, "value": "This is probably caused by a syntax mistake on the lines before line 34. Check your parentheses, curly brackets, and semicolons."}, {"id": 2068, "value": "Reading your comments below, I\u2019m not able to follow what your intention/goal is with this code. Feel free to add a follow up and convert this post private if necessary.\u00a0"}, {"id": 2069, "value": "You might have missed a \u2018;\u2019 somewhere in the code. I think the numbers 15 and 17 represent row and column of the error so you might want to check there."}, {"id": 2070, "value": "I believe that you are suppose to call each of your test functions in main inside of stats_test.cpp"}, {"id": 2071, "value": "Resolved"}, {"id": 2072, "value": "Private test cases will make up a portion of your project grade for each project.\u00a0"}, {"id": 2073, "value": "@170"}, {"id": 2074, "value": "When you run the program are you doing any input redirection (like \"main.exe < filename\" in bash)? If that isn't the issue, I would recommend stepping through the program with a debugger, and seeing what happens during the cin."}, {"id": 2075, "value": "What you've put in the followup is the answer. Since there's weird precision in memory, you can't test equality of two doubles safely. This used to be part of the spec but for some reason it isn't anymore."}, {"id": 2076, "value": "Make sure that you have a file in the same directory as you are running from called main_test_data.tsv. There is a chance that the file might be named differently or the file is in a subfolder."}, {"id": 2077, "value": "You can also just copy the sample output into your code (including the spaces) and replace the percentile number on each line with your result."}, {"id": 2078, "value": "Make sure you have the address sanitizer set up as in the tutorial. This is a common and tricky UB problem to notice. You're right that it has to do with an out-of-bounds indexing related to the percentile function. Using that information, and using the percentile equation, can you figure out how/where that might be happening?"}, {"id": 2079, "value": "solved"}, {"id": 2080, "value": "The starter files should ask contain a comment on the top containing the project UID. It seems like your main.cpp file is missing this, so you might want to reference the original starter file, or any of your other files that has the comment, and copy it to the top of your file."}, {"id": 2081, "value": "This is resolved. Just review the \"Use the following\u00a0wget\u00a0link to download the data in tsv format:\u00a0https://eecs280staff.github.io/p1-stats/data/HCMST_ver_3.04.tsv\" from the Project specs to get the file if you want to check code that way!"}, {"id": 2082, "value": "@10"}, {"id": 2083, "value": "You are allowed to use the iostream library (https://cplusplus.com/reference/iostream/). You can use user input to get the filename and then use the extract_column function to read from the file (https://eecs280staff.github.io/p1-stats/#input).. . Hope this helps!\u00a0"}, {"id": 2084, "value": "Great question!. . You can't assume there won't be negatives. That means you can't use 0 as the minimum possible value. You can use the first element as the vector as a starting min value because it ensures that your min is at least something in the vector. You can also use INT_MAX, which is the biggest possible integer value (more info: https://www.geeksforgeeks.org/int_max-int_min-cc-applications/).. . Hope this helps!"}, {"id": 2085, "value": "Working directly in your IDE is perfectly fine! Personally, I spend most of my time using the visual debugger and running it in the debugger. The reason we show you how to run the program using your terminal is for two reasons:. . 1. you may need to in future classes, so should at least be familiar. 2. you need to use the terminal to upload your code to CAEN. CAEN is the actual environment your code is run on in the autograder so any undefined behavior that your IDE may miss will be caught on CAEN rather than using a submit to find it. . Hope this helps!"}, {"id": 2086, "value": "I believe the newer versions of the starter files now use vector of pairs. The header is vector<pair<double,int>> summarize\u00a0"}, {"id": 2087, "value": "Without looking at the code, it is hard to say exactly what is wrong. However, there are some debugging techniques you can use to figure out what the bug is. I would recommend following these steps:. . 1. See what the function actually returns and what the parameters passed in are (actually print it out just in case the logic of creating the vector is incorrect). This can help you deduce if the function is incorrect or if the test case is faulty (if you created the vector wrong and 2 actually isn't the mode).. . 2. If the problem is not with the test case, then use print statements or your visual debugger to figure out the bug inside the function. To learn how to use the visual debugger, see the guide (https://eecs280staff.github.io/tutorials/debugging_guide.html). We HIGHLY recommend you to use the debugger.. . For future reference, we ask that students follow the format defined in @64 so that students with the same question can more easily find the answer so please make sure future posts follow this format.. . Hope this helps!"}, {"id": 2088, "value": "To add on to the student answer, in C++ you access elements of pairs using .first and .second rather than the [] like you would a vector or array. To see more information on pairs, check out this link: https://cplusplus.com/reference/utility/pair/pair/.. . Hope this helps!"}, {"id": 2089, "value": "To build onto the student answer, if any part of the function declaration does not match the one defined in stats.h, you will get this error. This means not including a const etc would cause this error. You also want to make sure you #include \"stats.h\" to include those function declarations."}, {"id": 2090, "value": "For your first question, use the definition given in stats.h: p should be between 0 and 1, so your second function call is correct.. For your second question, yes, if there is only one element then any percentile will be equal to that element."}, {"id": 2091, "value": "Looks like you are trying to access an index of the vector that is out of range. Often this can occur in a for loop.. . Remember that the smallest index is always 0 and (assuming that you have at least one element,) the largest is size-1 (where\u00a0size is the number of elements in your vector).\u00a0"}, {"id": 2092, "value": "It is possible for a vector to be empty, so you should make sure to assert any assumptions in the requires clause.. Make sure to #include <cassert> when you use asserts."}, {"id": 2093, "value": "As the student answer above suggests, the type of the element you are pushing back should match the type of the vector.\u00a0"}, {"id": 2094, "value": "you should be fine but for a sanity check run this command in your terminal. . g++ --version. "}, {"id": 2095, "value": "I think it's confusing it with standard library's sort function. If you have\u00a0. . using namsespace std;. remove it, and it should be fixed."}, {"id": 2096, "value": "I believe it is not strictly *required* that you do so (read: not graded), but it would be best practice to do so. You could accomplish this using the `assert()` function from the `` library. Here's an example:. . ```c++. #include . . void some_function_that_does_not_work_with_empty_vectors(vector v) {.   assert(v.size() > 0); // This will crash the program if expression is false.   // .... }"}, {"id": 2097, "value": "There is a trailing space before the newline in the right side of your screenshot."}, {"id": 2098, "value": "If you look at the declaration for `summarize()` in `stats.h`, the comments there give you a very good explanation of what the function is meant to do. Basically, the function is meant to count the number of times each distinct value appears in a vector.. . For example, if you have the vector `{1.0, 4.0, 4.0, 7.0, 7.0, 7.0, 9.0}`, the resulting vector of pairs from `summarize()` would look like:. .  ```. {.   {1.0, 1},.   {4.0, 2},.   {7.0, 3},.   {9.0, 1}. }. ```. . This is because the numbers 1.0, 4.0, 7.0, and 9.0 occurred once, twice, three times, and once, respectively. Note that the *values* (the first part of the pairs) are sorted in the result."}, {"id": 2099, "value": "`summarize()` should return a vector of pairs, not a vector of vectors. You should start by copying the declaration line from `stats.h` and then coding the function body from that.. . Also, the starter files changed close to the start of the semester, you should re-download them to get the updated stats.h file."}, {"id": 2100, "value": "Strictly speaking, the return type of `vector::size` is `size_t`, so for complete, impeccable type compatibility, `size_t i` is best. A common caveat of doing this is that `i` can now no longer be negative, so for example, the condition `i >= 0` would always be true. This can trip you up when you want to iterate through a container from back to front using indices, as in `for (size_t i = v.size() - 1; i >= 0; --i) ...`, which is incorrect.. . I noticed that you didn't initialize `i` to a determinate value. Your machine or compiler might happen to set it to 0 when this happens, but technically `i`'s value is undefined. You should write `size_t i = 0; ...` instead to ensure that it is set to 0. _This kind of unpredictable behavior might get caught by the undefined behavior sanitizer on the autograder._"}, {"id": 2101, "value": "For clarification of the students' answer, \"the fracpart\" refers to $$d(v_{k+1} - v_k)$$. Referring to the entire percentile formula, what do we know about $$n$$ if $$P=100$$? What do we then know about $$d$$?"}, {"id": 2102, "value": "Do not round"}, {"id": 2103, "value": "Nevermind I got it to install. I think it had something to do with my internet connectivity - not completely sure though. I moved locations and installing gdp now works."}, {"id": 2104, "value": "I believe the starter files changed close to the start of the semester; the function *used* to be declared as returning `vector>` but now is declared as returning `vector>`."}, {"id": 2105, "value": "If you take a look at the implementation of extract_column() in p1_library.cpp, you'll see the error message is supposed to print the name of the file it couldn't open. So if all you're getting is \"error opening\", you might be passing an empty string as the filename into extract_column().. . I would double-check your logic for getting the filename from the command line before your call to extract_column()."}, {"id": 2106, "value": "Not for p1 - and on future projects, you'll be able to run style checks and see your style score on the autograder (there's no hand grading)"}, {"id": 2107, "value": "Off the top of my head, I think there was a deal-breaker like no C++ support.  Let me know if things have changed (or if I'm just wrong) and we should adjust the tutorial!"}, {"id": 2108, "value": "Make sure you have the function main() in your main.cpp function. I think the error means that it is trying to create an executable from the program where main() doesn't exist."}, {"id": 2109, "value": "No, just put the project UID at the top. For project 1:// Project UID 5366c7e2b77742d5b2142097e51561a5"}, {"id": 2110, "value": "You may have forgotten to re-make stats_tests.exe. Just run \"make stats_tests.exe\", and if it compiles without error, you should be able to debug it correctly."}, {"id": 2111, "value": "What files are you including when you try to build your private tests? According to the Makefile, to compile stats_tests.exe, you need stats_tests.cpp, stats.cpp, and p1_library.cpp. Since your linker cannot find a main function anywhere, it's possible you're missing stats_tests.cpp, which has a main function in it.. . Also, if you haven't modified the starter code at all (as in stats.cpp is empty), the tests should fail to compile, as the stats functions called in these tests won't have implementations yet."}, {"id": 2112, "value": "The latter: The number of numbers in the vector."}, {"id": 2113, "value": "I think that's the way it's supposed to be -- the point of private tests is that we aren't able to see whether they passed or not until after the due date. So, as of now, it shouldn't show any result."}, {"id": 2114, "value": "Make sure you are dividing by N-1 not N. The instructions ask for a sample standard deviation which is slightly different than the regular one\u00a0"}, {"id": 2115, "value": "There's multiple tabs on the bottom panel when running the debugger in VS Code, so there's a good chance the output might be in a different one. Not sure which part of the tutorial this is, but I believe it should be ok."}, {"id": 2116, "value": "In general, test cases should not break the requires clause of a function.. . However, this doesn't mean that you shouldn't check for an empty vector/ >2 vector -- despite our best intentions, sometimes we can violate the requires clause on accident. If we don't add assert statements to catch these violations debugging can become very complicated since we don't know the origin of the error. This comes more into play once we are writing functions whose output depend on each other (especially in later projects).. . TLDR: You don't need to check requires clauses to get the points, but it is a very very good idea to use asserts to check (don't forget to #include <cassert>)."}, {"id": 2117, "value": "The 100th percentile should just be the maximum value in the vector."}, {"id": 2118, "value": ""}, {"id": 2119, "value": "It looks like you're trying to access an index in your vector that is out of bounds. I'd recommend looking at how you're indexing into your vector.. . Note: The reason why this would be undefined behavior is although indexing out of bounds can be a valid memory access, it is undefined since the memory at that location be anything. "}, {"id": 2120, "value": "Resolved"}, {"id": 2121, "value": "The sort function you are using (that takes in an iterator to the beginning and ending of a vector) is in the algorithm library which is not allowed for this project (https://eecs280staff.github.io/p1-stats/#requirements-and-restrictions). In the p1_library.h we give you another sort function that you should use instead, and it has different parameters.. . Other students might have this same question, so if you feel comfortable, could you make this post public so other students can see the response. We are also asking that all posts follow the format defined in @64. Please make sure your future posts follow that format to make it easier for teachers to answer the questions fast and so students can find questions easier.. . Hope this helps."}, {"id": 2122, "value": "You should return the first (smallest value) mode found if there are multiple."}, {"id": 2123, "value": "To add onto the student's answer, you can also extract a .tar.gz file with one command: tar -xzf starter-files.tar.gz. This is how we do it in the setup tutorial (we also add the -v option in the tutorial to enable verbose mode so we can see additional information, like the name of every file extracted)."}, {"id": 2124, "value": "In your VS Code terminal, if you run pwd, can you verify the output is identical to the path in the error message without the stats_tests.exe at the end (/mnt/d/um-22-S2/eecs280/p1-stats/)? It's possible there's a typo in your launch.json. Also just to check, if you run\u00a0ls in your terminal, do you see stats_tests.exe?. . If you don't find any issues there, could you please share your launch.json? Make sure your \"program\" variable is \"${workspaceFolder}/stats_tests.exe\", then open the stats_tests.cpp file, and try running your debugger again."}, {"id": 2125, "value": "It\u2019s neither, technically. You should use size_t which is an unsigned long int. Check the samples here for usage:\u00a0https://eecs280staff.github.io/p1-stats/vector.html"}, {"id": 2126, "value": "You could use the `sort()` function to implement these, but it would be much more efficient to implement them in a more standard way (with a loop...)"}, {"id": 2127, "value": "It's the stats_tests.cpp.starter. You are supposed to rename it."}, {"id": 2128, "value": "The student answer is correct. Just to clarify: You need to create stats.cpp yourself. In this file, you'll implement the functions in stats.h."}, {"id": 2129, "value": "You submit stats.cpp, main.cpp, and stats_tests.cpp to the autograder."}, {"id": 2130, "value": "If you're compiling within Xcode and not with the command line, make sure you're configuring your build phases properly using\u00a0this link . You should only have one file with a main function (i.e. stats.cpp) in the build phases at a time, and there are some files that should not be included as compile sources."}, {"id": 2131, "value": "In general, if you can reduce code duplication by re-using code you've already written, we highly encourage you to do so! This improves the readability of your code, something your peers (and future-you, if you revisit this code later) will appreciate."}, {"id": 2132, "value": "Are you including p1_library.cpp anywhere? Make sure you only include header files in your code; if you want to use the functionality implemented in p1_library.cpp, make sure to #include \"p1_library.h\" so you can use its interface. We'll talk more about interface versus implementation in later lectures."}, {"id": 2133, "value": "I believe your 2 needs to instead be something like vector_name.begin()+2. Here\u2019s a website about using insert that you might want to check out. https://www.geeksforgeeks.org/vector-insert-function-in-c-stl/amp/."}, {"id": 2134, "value": "You can use a small input vector and just check each element of the output with its own `assert(...)` statement."}, {"id": 2135, "value": "I am having the same problem as well."}, {"id": 2136, "value": "v.size() is an unsigned integer, whereas the variable i is of type int. To avoid this error, simply declare the variable i as size_t instead of int.. . Thanks for your reply! I should read stl vector tutorial more carefully. https://eecs280staff.github.io/p1-stats/vector.html. "}, {"id": 2137, "value": "You could compare the values to a certain decimal precision (say, 3 decimal places) instead by simply multiplying it by a power of 10 and converting it to an integer (truncating the remaining decimals), like this, for example, with 3 decimal places of precision:. . . #include <cmath>. . void assert_double_equal(double x, double y) {.   assert(trunc(x * 1000) == trunc(y * 1000));. }. "}, {"id": 2138, "value": "Bingo."}, {"id": 2139, "value": "Marking as resolved"}, {"id": 2140, "value": "In this class it won\u2019t make a difference. However, as you\u2019ll learn in 281, using \\n is more performant than endl. This is because endl closes the output buffer.\u00a0"}, {"id": 2141, "value": "resolved"}, {"id": 2142, "value": "Check the answer to this question, which seems to be the same issue you are facing here: https://piazza.com/class/lbnv6k5pd0y6bz/post/45. "}, {"id": 2143, "value": "Make sure that your system time is correct by entering\u00a0date into the terminal"}, {"id": 2144, "value": "Make sure your stats.cpp has this content."}, {"id": 2145, "value": "I just typed it after the % and commands worked, but I'm not 100% sure if that's what we're supposed to do"}, {"id": 2146, "value": "Marking as resolved."}, {"id": 2147, "value": "The name of the program should be an executable(a file ending in .exe), so you want to make your stats_tests.cpp, and have this in the program field for example:. . \"program\": \"${workspaceFolder}/stats_tests.exe\""}, {"id": 2148, "value": "Resolved"}, {"id": 2149, "value": "You should create these files.. For stats.cpp, we ask you to add the new file, and copy and paste the code we provided to get started (check Setup).. Same for main.cpp."}, {"id": 2150, "value": "How does this error appear? What are you running right before this?"}, {"id": 2151, "value": "To run main, do `make main.exe` to compile it then `./main.exe` to run it. To run tests, do the same thing but with \"stats_tests\" instead of \"main\". So it'd be `make stats_tests.exe` followed by `./stats_tests.exe`."}, {"id": 2152, "value": "It seems like you have the summarize function defined twice. Is there somewhere else in your code where that function exists?. . Update: you are correct, the given starter code should have been vector<pair<double, int>>. The spec has been updated to show this. Good catch!"}, {"id": 2153, "value": "The argument of the function is a 1D vector"}], "links": [{"source": 1724, "target": 1724, "value": 0.9999999999999998}, {"source": 1725, "target": 1725, "value": 1.0000000000000002}, {"source": 1728, "target": 1728, "value": 1.0000000000000002}, {"source": 1732, "target": 1732, "value": 1.0}, {"source": 1733, "target": 1733, "value": 1.0}, {"source": 1735, "target": 1735, "value": 0.9999999999999999}, {"source": 1736, "target": 1736, "value": 1.0000000000000002}, {"source": 1738, "target": 1738, "value": 1.0}, {"source": 1739, "target": 1739, "value": 1.0000000000000002}, {"source": 1742, "target": 1742, "value": 1.0}, {"source": 1746, "target": 1746, "value": 1.0000000000000002}, {"source": 1747, "target": 1747, "value": 0.9999999999999999}, {"source": 1756, "target": 1756, "value": 0.9999999999999997}, {"source": 1766, "target": 1839, "value": 0.6131393394849659}, {"source": 1767, "target": 1767, "value": 1.0}, {"source": 1768, "target": 1768, "value": 0.9999999999999999}, {"source": 1770, "target": 1770, "value": 1.0000000000000002}, {"source": 1772, "target": 1772, "value": 1.0000000000000002}, {"source": 1776, "target": 1778, "value": 0.7071067811865475}, {"source": 1776, "target": 1840, "value": 1.0}, {"source": 1776, "target": 1937, "value": 1.0}, {"source": 1776, "target": 1955, "value": 0.7071067811865475}, {"source": 1776, "target": 2071, "value": 1.0}, {"source": 1776, "target": 2141, "value": 1.0}, {"source": 1777, "target": 1777, "value": 1.0}, {"source": 1778, "target": 1778, "value": 0.9999999999999998}, {"source": 1778, "target": 1840, "value": 0.7071067811865475}, {"source": 1778, "target": 1937, "value": 0.7071067811865475}, {"source": 1778, "target": 2071, "value": 0.7071067811865475}, {"source": 1778, "target": 2141, "value": 0.7071067811865475}, {"source": 1783, "target": 1783, "value": 1.0}, {"source": 1791, "target": 1791, "value": 1.0}, {"source": 1793, "target": 1793, "value": 1.0000000000000002}, {"source": 1793, "target": 1862, "value": 0.6666666666666669}, {"source": 1795, "target": 1795, "value": 1.0000000000000002}, {"source": 1797, "target": 1797, "value": 1.0}, {"source": 1803, "target": 1803, "value": 1.0000000000000002}, {"source": 1810, "target": 1810, "value": 0.9999999999999999}, {"source": 1814, "target": 1814, "value": 0.9999999999999999}, {"source": 1816, "target": 1816, "value": 1.0}, {"source": 1818, "target": 1818, "value": 0.9999999999999998}, {"source": 1819, "target": 1819, "value": 1.0000000000000002}, {"source": 1822, "target": 1822, "value": 1.0}, {"source": 1824, "target": 1840, "value": 1.0}, {"source": 1824, "target": 1937, "value": 1.0}, {"source": 1824, "target": 1955, "value": 0.7071067811865475}, {"source": 1824, "target": 2071, "value": 1.0}, {"source": 1824, "target": 2141, "value": 1.0}, {"source": 1826, "target": 1826, "value": 1.0000000000000002}, {"source": 1828, "target": 1828, "value": 1.0}, {"source": 1835, "target": 1840, "value": 0.7071067811865475}, {"source": 1835, "target": 1937, "value": 0.7071067811865475}, {"source": 1835, "target": 1955, "value": 0.9999999999999998}, {"source": 1835, "target": 2071, "value": 0.7071067811865475}, {"source": 1835, "target": 2141, "value": 0.7071067811865475}, {"source": 1839, "target": 1839, "value": 0.9999999999999999}, {"source": 1840, "target": 1840, "value": 1.0}, {"source": 1840, "target": 1937, "value": 1.0}, {"source": 1840, "target": 1955, "value": 0.7071067811865475}, {"source": 1840, "target": 2071, "value": 1.0}, {"source": 1840, "target": 2141, "value": 1.0}, {"source": 1841, "target": 1841, "value": 1.0}, {"source": 1846, "target": 1846, "value": 0.9999999999999998}, {"source": 1847, "target": 1847, "value": 0.9999999999999996}, {"source": 1848, "target": 1848, "value": 1.0000000000000002}, {"source": 1850, "target": 1850, "value": 0.9999999999999999}, {"source": 1854, "target": 1854, "value": 1.0}, {"source": 1855, "target": 1855, "value": 1.0}, {"source": 1857, "target": 1869, "value": 0.6849495194215731}, {"source": 1862, "target": 1862, "value": 1.0000000000000002}, {"source": 1869, "target": 1869, "value": 1.0}, {"source": 1871, "target": 1871, "value": 1.0}, {"source": 1876, "target": 1876, "value": 1.0}, {"source": 1879, "target": 1879, "value": 0.9999999999999998}, {"source": 1880, "target": 1880, "value": 1.0000000000000004}, {"source": 1883, "target": 1883, "value": 1.0}, {"source": 1885, "target": 1885, "value": 1.0000000000000002}, {"source": 1886, "target": 1886, "value": 1.0}, {"source": 1888, "target": 1888, "value": 0.9999999999999999}, {"source": 1890, "target": 1890, "value": 1.0}, {"source": 1891, "target": 1891, "value": 1.0000000000000002}, {"source": 1892, "target": 1892, "value": 0.9999999999999999}, {"source": 1894, "target": 1937, "value": 0.7071067811865475}, {"source": 1894, "target": 1955, "value": 0.9999999999999998}, {"source": 1894, "target": 2071, "value": 0.7071067811865475}, {"source": 1894, "target": 2141, "value": 0.7071067811865475}, {"source": 1901, "target": 1901, "value": 1.0000000000000002}, {"source": 1904, "target": 1904, "value": 1.0}, {"source": 1907, "target": 1907, "value": 0.9999999999999999}, {"source": 1913, "target": 1913, "value": 0.9999999999999999}, {"source": 1914, "target": 1914, "value": 0.9999999999999996}, {"source": 1915, "target": 1915, "value": 1.0}, {"source": 1920, "target": 1920, "value": 1.0}, {"source": 1921, "target": 1921, "value": 1.0}, {"source": 1922, "target": 1922, "value": 1.0}, {"source": 1923, "target": 1923, "value": 1.0000000000000002}, {"source": 1923, "target": 2041, "value": 0.6666666666666666}, {"source": 1924, "target": 1924, "value": 1.0000000000000002}, {"source": 1926, "target": 1926, "value": 0.9999999999999999}, {"source": 1927, "target": 1927, "value": 1.0000000000000002}, {"source": 1928, "target": 1928, "value": 1.0}, {"source": 1929, "target": 1929, "value": 1.0000000000000002}, {"source": 1933, "target": 1933, "value": 0.9999999999999999}, {"source": 1934, "target": 1934, "value": 1.0000000000000002}, {"source": 1937, "target": 1937, "value": 1.0}, {"source": 1937, "target": 1955, "value": 0.7071067811865475}, {"source": 1937, "target": 2071, "value": 1.0}, {"source": 1937, "target": 2141, "value": 1.0}, {"source": 1942, "target": 1942, "value": 1.0}, {"source": 1944, "target": 1944, "value": 1.0}, {"source": 1945, "target": 1945, "value": 0.9999999999999996}, {"source": 1947, "target": 1947, "value": 0.9999999999999999}, {"source": 1948, "target": 1948, "value": 1.0000000000000002}, {"source": 1951, "target": 1951, "value": 1.0}, {"source": 1955, "target": 1955, "value": 0.9999999999999998}, {"source": 1955, "target": 2071, "value": 0.7071067811865475}, {"source": 1955, "target": 2141, "value": 0.7071067811865475}, {"source": 1957, "target": 1957, "value": 0.9999999999999997}, {"source": 1959, "target": 1959, "value": 0.9999999999999997}, {"source": 1960, "target": 1960, "value": 0.9999999999999998}, {"source": 1960, "target": 2086, "value": 0.6431196942844081}, {"source": 1961, "target": 1961, "value": 1.0}, {"source": 1962, "target": 1962, "value": 1.0}, {"source": 1962, "target": 2108, "value": 0.6465790872963897}, {"source": 1966, "target": 1966, "value": 1.0}, {"source": 1968, "target": 1968, "value": 0.9999999999999999}, {"source": 1969, "target": 1969, "value": 0.9999999999999999}, {"source": 1972, "target": 1972, "value": 0.9999999999999998}, {"source": 1977, "target": 1977, "value": 0.9999999999999999}, {"source": 1981, "target": 1981, "value": 1.0}, {"source": 1985, "target": 1985, "value": 0.9999999999999998}, {"source": 1987, "target": 2144, "value": 0.9128709291752769}, {"source": 1990, "target": 1990, "value": 0.9999999999999997}, {"source": 1991, "target": 1991, "value": 1.0000000000000002}, {"source": 1993, "target": 1993, "value": 1.0}, {"source": 1994, "target": 1994, "value": 0.9999999999999999}, {"source": 1994, "target": 1998, "value": 0.6804510993672778}, {"source": 1995, "target": 1995, "value": 0.9999999999999999}, {"source": 1996, "target": 1996, "value": 1.0000000000000002}, {"source": 1997, "target": 1997, "value": 1.0}, {"source": 1998, "target": 1998, "value": 1.0000000000000002}, {"source": 1999, "target": 1999, "value": 1.0}, {"source": 2000, "target": 2000, "value": 1.0}, {"source": 2001, "target": 2001, "value": 1.0000000000000002}, {"source": 2002, "target": 2002, "value": 1.0000000000000002}, {"source": 2003, "target": 2003, "value": 0.9999999999999998}, {"source": 2004, "target": 2071, "value": 0.7071067811865475}, {"source": 2004, "target": 2141, "value": 0.7071067811865475}, {"source": 2006, "target": 2006, "value": 1.0}, {"source": 2010, "target": 2010, "value": 1.0}, {"source": 2015, "target": 2071, "value": 1.0}, {"source": 2015, "target": 2141, "value": 1.0}, {"source": 2019, "target": 2019, "value": 1.0000000000000002}, {"source": 2022, "target": 2022, "value": 0.9999999999999994}, {"source": 2024, "target": 2024, "value": 0.9999999999999999}, {"source": 2041, "target": 2041, "value": 0.9999999999999998}, {"source": 2042, "target": 2042, "value": 1.0}, {"source": 2045, "target": 2045, "value": 1.0000000000000002}, {"source": 2050, "target": 2050, "value": 0.9999999999999999}, {"source": 2057, "target": 2057, "value": 0.9999999999999998}, {"source": 2058, "target": 2058, "value": 0.9999999999999998}, {"source": 2064, "target": 2064, "value": 1.0}, {"source": 2066, "target": 2066, "value": 1.0000000000000002}, {"source": 2067, "target": 2067, "value": 1.0000000000000002}, {"source": 2068, "target": 2068, "value": 1.0}, {"source": 2069, "target": 2069, "value": 1.0000000000000002}, {"source": 2071, "target": 2071, "value": 1.0}, {"source": 2071, "target": 2141, "value": 1.0}, {"source": 2078, "target": 2078, "value": 0.9999999999999997}, {"source": 2080, "target": 2080, "value": 1.0}, {"source": 2082, "target": 2082, "value": 1.0}, {"source": 2086, "target": 2086, "value": 1.0}, {"source": 2089, "target": 2089, "value": 1.0}, {"source": 2093, "target": 2093, "value": 1.0}, {"source": 2094, "target": 2094, "value": 0.9999999999999998}, {"source": 2099, "target": 2099, "value": 0.9999999999999998}, {"source": 2103, "target": 2103, "value": 1.0}, {"source": 2105, "target": 2105, "value": 1.0}, {"source": 2108, "target": 2108, "value": 1.0000000000000002}, {"source": 2111, "target": 2111, "value": 0.9999999999999999}, {"source": 2120, "target": 2141, "value": 1.0}, {"source": 2121, "target": 2121, "value": 1.0}, {"source": 2124, "target": 2124, "value": 1.0}, {"source": 2130, "target": 2130, "value": 0.9999999999999997}, {"source": 2132, "target": 2132, "value": 1.0000000000000002}, {"source": 2133, "target": 2133, "value": 0.9999999999999998}, {"source": 2135, "target": 2135, "value": 0.9999999999999998}, {"source": 2136, "target": 2136, "value": 1.0}, {"source": 2139, "target": 2141, "value": 0.7071067811865475}, {"source": 2141, "target": 2141, "value": 1.0}, {"source": 2144, "target": 2144, "value": 0.9999999999999999}, {"source": 2147, "target": 2147, "value": 1.0000000000000002}, {"source": 2150, "target": 2150, "value": 1.0}, {"source": 2152, "target": 2152, "value": 1.0000000000000004}]}