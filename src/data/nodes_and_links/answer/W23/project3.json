{"nodes": [{"id": 3415, "value": ""}, {"id": 3416, "value": ""}, {"id": 3417, "value": ""}, {"id": 3418, "value": "1. We don't release information about private tests. As a matter of fact, I can't even see error messages of your private tests. If you'd like to discuss it, proffice hours would be a good place.. . 2. Unfortunately, we don't accept regrade requests after the deadline. A regrade request gives us a second chance to look at your answer more closely with a fresh mind, so it is unlikely that there is still a mistake. If you do believe there is still an error or would like to discuss with someone to understand your error better, you are more than welcome to attend staff office hours or proffice hours."}, {"id": 3419, "value": "Unfortunately we\u2019re unable to do this :( \u2026"}, {"id": 3420, "value": "This is valid -- this means that your card, pack, and / or player implementation was incorrect, but euchre.exe provides the correct output on test22 when plugging in the correct card / pack / player."}, {"id": 3421, "value": "If you would like further clarification on what issues your program might have, I would suggest coming to Proffice hours.\u00a0"}, {"id": 3422, "value": "If another instructor has a better answer feel free to update.\u00a0I believe the P3 private grades should come out within the next few-ish days, since I don\u2019t believe we have any outstanding extension requests for P3.\u00a0As for the P4 AG, it should come out Monday.\u00a0"}, {"id": 3423, "value": "The score that will be used will be the highest overall score across all of your submissions (with both public and private tests).. . For future projects, definitely submit early and often, especially since you don't get any single day's submissions back if you don't use them. Use them or lose them."}, {"id": 3424, "value": "Your overall (public + private tests)\u00a0best score is your final score for this project, not necessarily the score of the last submission."}, {"id": 3425, "value": "My guess is the cout statement might access some memory incorrectly or that may not have been initialized yet. Luckily, the highest score for the project will be taken, not the most recent one."}, {"id": 3426, "value": "resolved"}, {"id": 3427, "value": "Marking as resolved because project is over please follow up if you would like more of a response"}, {"id": 3428, "value": "marking resolved"}, {"id": 3429, "value": "This means your code did not pass the prerequisites for style checking to be run. Please see the style checking tutorial: https://eecs280staff.github.io/tutorials/setup_style.html"}, {"id": 3430, "value": "You have two nested for-loops of depth 5, which exceeds the limit of 4.. Whenever you have a nested for/while/if, it adds one more depth. A depth 2 nested for-loop \u00a0could \u00a0look like this:\u00a0. for (...) {. \u00a0 for (...) {. \u00a0 \u00a0\u00a0}. }. A depth 5 nested for-loop could look like this:. for (...) {. \u00a0 for (...) {. \u00a0 \u00a0 if (...) {. \u00a0 \u00a0 \u00a0 while(...) {. \u00a0 \u00a0 \u00a0 \u00a0 if (...) {. \u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0}. \u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0\u00a0}. \u00a0 \u00a0\u00a0 \u00a0\u00a0 \u00a0}. \u00a0 \u00a0\u00a0}. }. "}, {"id": 3431, "value": "Deep nesting means that you have too many nested cpp elements. This includes if/else, for, while, functions (anything that has the {}). Ways to limit your deep nesting is creating helper functions or re-evaluating your logic. Try to combine cases so you don't need as many nested {}.. . Example:. . if { if { while { for {} } } }"}, {"id": 3432, "value": "See @3052 and see if any of those solutions work for you."}, {"id": 3433, "value": "marking as resolved because project is over. please follow up if more explanation desired."}, {"id": 3434, "value": "marking as resolved"}, {"id": 3435, "value": "If your program does not have undefined behaviors, then it will just normally exit without printing out any extra information. You could test if your AS works by deliberately writing a buggy program (uninitialized values for example) and run it with the AS flag on.. In general, you only need to add the AS flag to your Makefile as what you did on line 8 in the second screenshot."}, {"id": 3436, "value": ". \"Suit trump;\". . Because there is no default value for Suit. You have to give it the value you want.\u00a0"}, {"id": 3437, "value": "Your debugger setup looks good to me. Now that you have your debugger setup, you can set breakpoints in your euchre.cpp to debug.\u00a0. . . Where do I go from here?. . If you can elaborate on what is the obstacle you are facing we can better assist you.. "}, {"id": 3438, "value": "marking resolved"}, {"id": 3439, "value": "I would use the debugger, find exactly at what line of code the values aren't what you'd expect them to be, and then dive into those functions and see why they aren't behaving. Something that might be useful is using conditional breakpoints. Feel free to google how to use them, but on VSCode, you right click a breakpoint, edit it, and it'll let you set conditions for the breakpoint such as \"round == 1\", which will only trigger when the round is 1. There's also hit count, which just triggers after the xth time the breakpoint is hit.. . If the problem is when you read in 'pass' as a suit, put a conditional breakpoint in string_to_suit for (suit == pass) or the likes :)"}, {"id": 3440, "value": "Yes. I would use the debugger, find exactly at what line of code the values aren't what you'd expect them to be, and then dive into those functions and see why they aren't behaving. Something that might be useful is using conditional breakpoints. Feel free to google how to use them, but on VSCode, you right click a breakpoint, edit it, and it'll let you set conditions for the breakpoint such as \"round == 1\", which will only trigger when the round is 1. There's also hit count, which just triggers after the xth time the breakpoint is hit."}, {"id": 3441, "value": "It's telling you that in line 281 of euchre.cpp, you call a function in Player.cpp, that, at line 275, will allocate memory that isn't being deleted. Just make sure you have a delete statement for every new statement and you should be a-okay"}, {"id": 3442, "value": "It means you're either dereferencing a pointer whose object has been deleted, or you're accessing a vector at an index that doesn't exist. Likely the second one if I were to guess."}, {"id": 3443, "value": "We cannot explicitly tell you what to test for, as long as you get all the points for player test cases you'll be good to go."}, {"id": 3444, "value": "marking as resolved because project is over. please follow up if more explanation desired."}, {"id": 3445, "value": "Try this :). https://stackoverflow.com/questions/26963510/error-passing-const-as-this-argument-of-discards-qualifiers"}, {"id": 3446, "value": "I would check the call stack on the bottom left of the debugger and seeing which part of the constructor is causing issue. Since it's a vector out of range error, it'll likely lead to either line players = player or when the player parameter is copied."}, {"id": 3447, "value": "You segfault because you once use getline which reads the whole line, but then you also use another string stream to read in that line. You can combine the two, and I recommend using the operator >> as the header of a while loop, so. . . while(pack_input >> c) {. \t// add card to your deck. }"}, {"id": 3448, "value": "All resolved never mind, just had to capitalize pack.cpp to Pack.cpp"}, {"id": 3449, "value": "It looks like the error is saying \"Error: attempt to subscript container with out-of-bounds index -1, but\u00a010 container only holds 1 elements.\" It seems there might be somewhere you have an array or vector and you're trying to access the value at index -1. I would look for where you use those data structures and how the index you use when accessing their elements is updated, or if there's somewhere you default set that index to -1 planning to always change it."}, {"id": 3450, "value": ""}, {"id": 3451, "value": "marking as resolved because project is over. please follow up if more explanation desired."}, {"id": 3452, "value": "I just looked at your autograder and it looks like you figured this out. Good work!"}, {"id": 3453, "value": "Example of how to run command line arguments in terminal: ./a.out myfirstCommand mySecondCommandOn xcode: https://stackoverflow.com/a/44780733"}, {"id": 3454, "value": "I believe the style check is checking statements, not lines. If a statement spans multiple lines it's counted once. From that I assume that if multiple statements are on the same line it will count them as multiple statements. If you see that's the case try fixing it and post a follow-up if it doesn't work or this answer doesn't apply.Docs for context: https://oclint-docs.readthedocs.io/en/stable/rules/size.html"}, {"id": 3455, "value": "You can use given tests however you wish -- so yes, this is fine. Piazza is private right now due to alternate exams"}, {"id": 3456, "value": "If you are on macOS, the input redirection is different. Please take a look at the tutorial on the website for the macOS version."}, {"id": 3457, "value": "Look at your implementation for Card operator< and reason about whether it does what you expect.. . Also, remember to break ties first by rank and then suit.\u00a0. "}, {"id": 3458, "value": "resolved"}, {"id": 3459, "value": "I would recommend looking into setting up [address sanitizer](https://eecs280staff.github.io/tutorials/setup_asan.html) or running your code on CAEN with valgrind to check for the memory leaks. Besides using `delete` properly, make sure to also check for issues such as using an invalid pointer or going out of bound in a container."}, {"id": 3460, "value": "There are 42 lines (net comments) in your `make_trump` function which exceeds the limit of 40."}, {"id": 3461, "value": "Just took a look at your AG submission -- looks like you figured this out, great work!! Also, make sure you're printing argv before you play your game, too: check out the part of the spec that says \"First, print the executable and all arguments on the first line. Print a single space at the end, which makes it easier to print an array.\" under \"example with simple players\""}, {"id": 3462, "value": "You have to restructure your code to avoid the following problems:. 1. If the if clause isn't executed in line 286 in `euchre.cpp`, `next_suit` is uninitialized and would be returned by the function, which could cause undefined behaviors. My recommendations would be to make sure setting `next_suit` to something in all cases if you want to return.. 2. In line 106 of `euchre.cpp`, you are attempting to assign the member variable `trump` to itself, which doesn't make sense. Perhaps you want to assign it to some other values?"}, {"id": 3463, "value": "What\u2019s the trump suit in this hand?"}, {"id": 3464, "value": "Are you declaring your cards dynamically? This does not seem necessary. To simplify things, only make sure players are dynamically allocated using Player_factory()"}, {"id": 3465, "value": "This doesn't signify extra lines. Basically, the < points to the lines that are different on the left from the right. So on the left file, the \"Jack of Clubs played by Chi-Chi\" line matches up with the right file's \"Nine of Clubs played by Chi Chi\" line.. . Let me show you an example of 2 files differences: it inserts \"spaces\" to line up the rest and show you where the differences are with the <. Does that make sense?. . . . . "}, {"id": 3466, "value": "Please try running it on CAEN to understand better why it fails. My guess is using uninitialized variables (assuming that an integer, when declared, would have a default 0 value).. . Also, per @64, edit your piazza name to include your uniqname so we can look at your AG submission."}, {"id": 3467, "value": "I am going to mark this as resolved because I see you have full points on AG, if this issue persists please make a new post."}, {"id": 3468, "value": "resolved"}, {"id": 3469, "value": "Do you have a whitespace after the \u2018 \uff01\u2019\uff1f"}, {"id": 3470, "value": "It usually means you are going out of bounds for a vector/array or dereferencing a null ptr which might cause Xcode to throw that error."}, {"id": 3471, "value": "As long as those functions are only called inside other Card functions (you use them internally) and don't call them in other files, then yes."}, {"id": 3472, "value": "I recommend debugging this using your IDE. Set a debugger on your while loop and see why it stops early.. . You have to set up your debugger to take in command line arguments and do input redirection both of which you can find as tutorial on our website."}, {"id": 3473, "value": "Did you make euchre.exe before running it?"}, {"id": 3474, "value": "Can you post a screenshot of the arguments in edit scheme? Also, can you check which files are in your compile sources under build phases?"}, {"id": 3475, "value": "marking as resolved for now."}, {"id": 3476, "value": "\"In the simplest case, cards are ordered by rank (A > K > Q > J > 10 > 9), with ties broken by suit (D > C > H > S).\" - spec"}, {"id": 3477, "value": "Did you initialize your \"team_points_[2]\" to 0 at first? It seems like your code didn't get into the while loop in line 242 of your Euchre.cpp when running public test00 and test50. Try to debug from that line of code."}, {"id": 3478, "value": "It's more than okay. We encourage you to write helper functions to get rid of code duplication. Just make sure both declaration and definition are in .cpp files and do not modify .h files."}, {"id": 3479, "value": ""}, {"id": 3480, "value": ""}, {"id": 3481, "value": "scoring"}, {"id": 3482, "value": "You didn't update next in your pack_istream_ctor"}, {"id": 3483, "value": "There will not be office hours today or tomorrow as the staff's focus will be on grading the midterm exams. Feel free to post any questions privately on Piazza and we will get to them as soon as we can."}, {"id": 3484, "value": "The error is telling you that your main function is still too long - your main function is 43 non-commenting lines long, which exceeds the limit of 40. Note that because the style check is for\u00a0non-commenting lines of source code, simply removing blank lines will not bring this number down. You must actually lessen the number of functional lines of code in the main function. My main suggestion for how to do this would be making additional helper functions within your game class to handle some functionality in your main function. Adding players and deleting players are two examples of parts that could be done in a helper function."}, {"id": 3485, "value": "There will not be office hours today or tomorrow as the staff's focus will be on grading the midterm exams. Feel free to post any questions privately on Piazza and we will get to them as soon as we can."}, {"id": 3486, "value": "There are no style points beyond what is in the Autograder style check section."}, {"id": 3487, "value": "Str is a string which you are comparing to an enum.. . i would approach this question without the for loop. Use the requires clause to create assert statements. Then think about how you can achieve the requested functionality if that at this point after asserts you know you are guaranteed a correct string.\u00a0"}, {"id": 3488, "value": "Check out @1890. Follow up with additional questions!"}, {"id": 3489, "value": "I believe this is expected. These tests use the instructor card / pack / player implementations, so giving any more information about these failures could mean giving away undesired hints to about the correct implementations. If you are passing euchre tests with your own impls but failing with the instructor impls, that indicates something incorrect with your card / pack / player."}, {"id": 3490, "value": ""}, {"id": 3491, "value": "You don't need to include pack.h in player.cpp"}, {"id": 3492, "value": ""}, {"id": 3493, "value": "Right. The function itself counts as one block, so you need to somehow move those if statements elsewhere. Try combining the inner if statements with the outer ones, or if needed, write a helper function that will do the if statements for you."}, {"id": 3494, "value": "It is based on the initial input command. . Like this: \"./euchre.exe ... Fran Simple Herb Simple ...\". . Fran comes before Herb in the argument we should print their names out as such."}, {"id": 3495, "value": "resolved"}, {"id": 3496, "value": ""}, {"id": 3497, "value": ""}, {"id": 3498, "value": "You're scoring function is 48 lines long."}, {"id": 3499, "value": "guessing at line 182 in player.cpp you have code thats nested in 5 statements (like for loops/if statements). Seems like only nested in 4 statements is allowed, try to reduce that block of code."}, {"id": 3500, "value": "marking as resolved"}, {"id": 3501, "value": "You have to include the other files when compiling euchre.cpp in the command you're writing on the terminal.. . I suggest using the make command. . make euchre.exe"}, {"id": 3502, "value": "add_and_discard is a void function, so nothing is returned to compare to the first value. The way to test this function would be to create a hand and have them add_and_discard before you play or lead every card in their hand. That way, you can make sure their expected hand matches the cards they played."}, {"id": 3503, "value": "Seems like after ordering up you are going out of bounds. I suggest setting a breakpoint in euchre after ordering up and seeing where the program aborts."}, {"id": 3504, "value": "assert(false) will always make your program abort. Please remove it once you are done with the implementation of your function.. . It seems like it never returns from the for loop, so you have a bug. Also, using a for loop seems unnecessary since you are already guaranteed that str is a valid suit name in string format.\u00a0"}, {"id": 3505, "value": "Without being able to see your code, I'd guess that you are passing in the wrong type to a function that requires a suit. I'd check line 78 of your Card.cpp file, or backtrace your stack."}, {"id": 3506, "value": ""}, {"id": 3507, "value": "You can add supporting functions in your .cpp files without having to declare them in the .h file."}, {"id": 3508, "value": "Since CAEN is a Linux machine, you want to remove this configuration for macOS and set up the vs code debugger again."}, {"id": 3509, "value": ""}, {"id": 3510, "value": "get_suit()\u00a0is a member function of class\u00a0Card, not\u00a0Suit. Also the return type should be\u00a0Suit, instead of string."}, {"id": 3511, "value": ""}, {"id": 3512, "value": ""}, {"id": 3513, "value": "You shouldn't include \"Pack.h\" in your Player.cpp."}, {"id": 3514, "value": "Making this private, as tips may be pretty specific to your implementation.. . The \"tests with solution card, pack, player\" basically runs your driver with the instructor solutions for Card.cpp, Pack.cpp, Player.cpp. If you look at the autograder output for these tests, it seems that your driver is missing some output. Taking a quick glance at your Player.cpp, it looks like you have delegated some of the printing logic (cout) to Player.cpp, when all the printing should be done in your driver. This is a good example of respecting the interface to make your code compatible with other people's code.. . For the UB tests, UB stands for undefined behavior. It seems you have some undefined behavior in your code. Make sure to delete anything that you create with new.. . Hope this helps!"}, {"id": 3515, "value": "resolved"}, {"id": 3516, "value": "Resolved. The autograder was updated to accept submissions up to this Friday."}, {"id": 3517, "value": "The turn in date on autograder has been adjusted to reflect the email sent to students on 03/02, the project is now due on 03/10 at 8PM.\u00a0"}, {"id": 3518, "value": "The turn in date on autograder has been adjusted to reflect the email sent to students on 03/02, the project is now due on 03/10 at 8PM.\u00a0"}, {"id": 3519, "value": "double check you are including the algorithm library"}, {"id": 3520, "value": "Resolved (hearts is trump)"}, {"id": 3521, "value": ""}, {"id": 3522, "value": "I suggest running your code on CAEN to better understand the differences.. . This sounds like a question more suitable for office hours, so I recommend dropping by OH."}, {"id": 3523, "value": "I think it counts the depth from the beginning of the function, so you have 5 instead of 4 (starting from your \"void make_trump() {\" )."}, {"id": 3524, "value": "I suspect you have something like. . cout << \" \\n\";. So then you will have an extra space at the end of 27 before inserting a newline on 28"}, {"id": 3525, "value": "This is a question for office hours. Please drop by during OH, and we can help you."}, {"id": 3526, "value": "This is an office hours question. When you join the queue tmrw, please put \"mac input redirection problems\" as the description so an IA who is familiar with mac can help you."}, {"id": 3527, "value": "Excellent debugging method! You are correct on everything but I think you might be forgetting a rule of euchre. In round 1, if the upcard suit is called trump then the dealer picks up the upcard and discards his lowest card. Edsger has the 9 of hearts in his hand because he is the dealer and hearts was called (which is the upcard).\u00a0. . I bet other students have this question too. If you feel comfortable, please make this question public so other students can see it!"}, {"id": 3528, "value": "Here are my go to strategies to have better style.\u00a0. . 1. Try breaking your function up into sections. Can you create a (or a few) helper functions to call inside the function. This would make the function shorter because a bulk of the code will be taken out and it can also get rid of some deep nesting. Lets say if you had 4 nested and you put 2 in the helper function. This would mean we have a deep nesting of 2 and 2 which passes.. . 2. I also try to think about simplifying/combining if/else statements. Especially in this project we have a lot of \"if this then do this\" logic so simplifying can make your code shorter and potentially less nested. Make a list of all the possible outcomes and what would result in each outcome (find overlap in the cases!). . I bet other students have this question so if you feel comfortable please make this post public!"}, {"id": 3529, "value": "@2576"}, {"id": 3530, "value": "If all your code does not compile, the prerequesites are considered not met, thus the style checks won't run (which is the first part of screenshot). The second style check error does give you information on what is failing. It says you have duplicate code. Think about maybe creating a helper function or re-evaulating your logic to fix the duplication.. . . . For more information on style checks see https://eecs280staff.github.io/tutorials/setup_style.html."}, {"id": 3531, "value": "You are initializing your pack incorrectly. It looks like you are assigning an ifstream object into a pack object rather than call thing pack constructor. Try calling the pack constructor instead by pack = Pack(packfilein). Also make sure you have throughly tested the pack ifstream constructor.\u00a0"}, {"id": 3532, "value": "marking as resolved"}, {"id": 3533, "value": "Per @64, please put your uniqname in your piazza handle so we can take a look at your submission."}, {"id": 3534, "value": "One difference might be that you have uninitialized variables (e.g. an int that you assume is initialized to zero but you never explicitly initialize it).\u00a0. . I suggest running it on CAEN."}, {"id": 3535, "value": "When running `add_and_discard`, we assume that the upcard's suit is trump. So when adding Nine of Hearts to the hand and checking for the lowest card, we consider Hearts to be trump. So, Ten of Diamonds is less than Nine of Hearts."}, {"id": 3536, "value": "I think it's okay if the loop starts at 0. However, 0 is already \"counted\" in the first line (const char* = longest strings[0];), so starting at 0 would be redundant (if you use int i = 1, the very first iteration compares longest, strings[0], with strings[1])."}, {"id": 3537, "value": "This might be an issue easier to be solve during office hours."}, {"id": 3538, "value": "Make sure you do the setup tutorial for the new machine and vs code"}, {"id": 3539, "value": "It is hard to determine exactly what is wrong with the information given. I would suggest going to OH for more debugging help. My bet, though, is that this discrepency is coming form undefined behavior. Make sure that you initialize all of your variables, especially if you want the ints to start at 0. When you don't initialize your variables like \"int x;\" the computer chooses whatever number it wants to be x. So when you run it on the visual debugger, it might choose 0 and when you run it through the terminal it might choose 1. Given that is is miscalculating march, I would suggest seeing if you initialize the variable you use to keep track of how many tricks a team has won."}, {"id": 3540, "value": "When you order up trump in round 2, you have to be sure that you change the trump in euchre. You can do this by using the make_trump order_up_suit parameter. Notice how this parameter is passed by reference. That means a duplicate object is not created and the original object passed into the function is changed. You can use that parameter to make sure you change trump in euchre. If you have a member variable \"trump\", then passing that variable directly into the make trump function will ensure it is changed if the trump is made in round 2."}, {"id": 3541, "value": ""}, {"id": 3542, "value": ". I am noticing a whitespace error when I run test 00 but the whitespace when running test 01 and 50 are consistent with the solution. I am wondering if autograder will register this as an error or not.. . Yes. Your answer has to match the correct output when considering whitespace. I recommend using the debugger to see why the discrepancy appears."}, {"id": 3543, "value": "See @2511"}, {"id": 3544, "value": "They\u2019re not treated as equal in the way they\u2019ve set up the game. If you look in the specs when the rank is tied the suits break the tie.\u00a0"}, {"id": 3545, "value": "We understand this is a frustrating issue for students. Based on the response, DCO hopes to get it back up by Monday. We will make an announcement if we have any updates. Sorry for the inconvenience.. . Update: See @2511"}, {"id": 3546, "value": "We appreciate the feedback, and we're sorry for the ongoing issues. This is something we've considered and informs our decision to extend until Friday 3/10 at 8pm so that there are a couple days after the midterm to get it turned in and sort out any last issues. (Canvas announcement going out in just a moment about this.)"}, {"id": 3547, "value": "You can use this resource to help explain why each player plays the card they do (@1728). Once you know why the player plays the intended card, step through your code again and see why they play the wrong card. Often times, it is because the value of the card is not taken into account properly (for example forgetting the left bower is a trump)"}, {"id": 3548, "value": "If you encounter some sort of error like the file not being open or the strategies not being Simple/Human etc, then you should only print the error message and nothing else."}, {"id": 3549, "value": "See @2511"}, {"id": 3550, "value": "This may sound very tedious, but the best way to find this error is to see what card of what player is off, because it seems that your logic is either failing on an \"edge case\" of sorts where in one instance it doesn't do something properly. I recommend stepping through your deal function one card at a time. While stepping through, have each player's hand written down somewhere to compare it."}, {"id": 3551, "value": "argc and argv[] are only accessible as parameters to the main() function."}, {"id": 3552, "value": "To help you understand shuffle, here is a visual on the ending indices after 7 \"shuffles\" (or one call of the shuffle function).. . "}, {"id": 3553, "value": "Okay, just re-read, it opens 3/2.\u00a0"}, {"id": 3554, "value": "Assume the size of the deck is PACK_SIZE"}, {"id": 3555, "value": "I don't know if you already solved this problem, but if you were wondering why it wasn't printing into an out file, then you should see if your command that you put in the terminal is actually doing that. Also, I would step through your code to see when it is supposed to print. I don't know if Xcode has a debugger counsel like VS Code does, but I would search that up.\u00a0"}, {"id": 3556, "value": "See [here](https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/stl_vector.h)"}, {"id": 3557, "value": "In my launch.json folder, I didn't have anything in the environment area. Also, here is my launch json file, but with a different argument list. Let me know if you need more help.\u00a0. . \u00a0{. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"name\": \"(lldb) Launch\",. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"type\": \"cppdbg\",. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"request\": \"launch\",. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"program\": \"${workspaceFolder}/euchre.exe\",. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"args\": [\"pack.in\", \"shuffle\", \"10\", \"Edsger\", \"Simple\", \"Fran\", \"Simple\",. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"Gabriel\", \"Simple\", \"Herb\", \"Simple\"],. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"stopAtEntry\": false,. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"cwd\": \"${fileDirname}\",. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"environment\": [],. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"externalConsole\": false,. \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"MIMode\": \"lldb\". \u00a0 \u00a0 \u00a0 \u00a0 },"}, {"id": 3558, "value": "Your debugger should pause at the failed assertion _without any breakpoints_. Try running this program in the debugger as-is, then when it pauses, click on each item in the call stack (bottom left in VSCode) and inspect the variables in each stack frame for what went wrong."}, {"id": 3559, "value": "Since the trump suit is diamonds, the Jack of Hearts (left bower) is technically a trump card/ a diamond. In this case, Fran can follow suit because she has 9 diamonds, so she plays that card.\u00a0"}, {"id": 3560, "value": "im not sure why it doesn't allow that but I had the same problem and if you create a string variable with what you want to compare argv[i] to, it'll allow a comparison with argv[i] and that variable."}, {"id": 3561, "value": "If you have sanitizer in your IDE, it will tell you where the memory is leaking from. Also, you may have a memory leak because you are creating the players in the player factory, but you are not deleting them in the euchre file. I think the best way is the sanitizer because it allows you to follow the problem.\u00a0"}, {"id": 3562, "value": "I would sort it when the person is adds a card, or discards because that is when you would need to rearrange your cards to be sorted.\u00a0"}, {"id": 3563, "value": "If you are a VS Code user, I can help. Ok, here is what I did in my launch.json. I realized that with current configuration they have that stdio isn't a property, so here is what I did. You use a different debugger configuration, and you can do this by clicking the button that shows up saying add configuration. If it gives you a squiggly under stdio, then you don't have the right configuration. If you get the launch.json done, remember when debugging to change the debugger being used. Let me know if this solves your problem. Also, checkout their tutorials on input redirection if you are using something else.\u00a0. . "}, {"id": 3564, "value": "You can put the four players into a vector and pass it into the Game constructor. You can modify the parameters of the Game constructor however you wish.. . The filename looks right, just make sure it does indeed open the file when you go to test it.. "}, {"id": 3565, "value": ""}, {"id": 3566, "value": "Start with error checking in the order described in the spec (i.e. number of arguments, points to win, etc).. . Once you're certain all errors have been checked for, you know what positions in `argv` each name and strategy should show up in. So, get the name/strategy pairs from those positions in argv and create a `Player*` object with that pair, and do this four times."}, {"id": 3567, "value": "After the last \"human\" argument, I believe you should put in \"\", \"euchre_test50.out\", which means \"read in from euchre_test50.in, and write out to euchre_test50.out\""}, {"id": 3568, "value": "On the autograder it looks like the problem has been fixed but please follow up if not."}, {"id": 3569, "value": "I think it could be either a bug in your make trump function or your deal function in the driver. Make sure add_and_discard is only called if someone ordered up during the first round of trump making.\u00a0. . For the deal function, Gabriel may not have been dealt the correct cards so he's not ordering up when he should be. Try using the debugger to see if everyone is being dealt the correct cards. If not, it's likely a problem in the deal function in the driver or the shuffle function in Pack."}, {"id": 3570, "value": "Could you try moving \"pack.in\" to be the first element in the `args` list?"}, {"id": 3571, "value": "It might be that because there are newlines at the end of the file, it is reading in an extra time, causing you to index out of bounds. . . I would also recommend to use the >> operator you created for your card class.. . Lastly, you might want to not show the code for the entire function, at that might be an honor code violation."}, {"id": 3572, "value": "In the second round you would return true. The simple player would consider the card of the next suit which is hearts. They only need one diamond, and they have 2 (left and right bowers) so they would make trump hearts."}, {"id": 3573, "value": "Try `make euchre.exe` without the dollar symbols in front"}, {"id": 3574, "value": "Make sure that your constructor (as well as everything else you want to access outside of the class) is public. If you didn't add \"public:\" anywhere within your class, by default everything is private."}, {"id": 3575, "value": "If your dealer is picking up the 9 of hearts, that means that heart is your trump suit. Neither 10 of diamonds nor jack of clubs are of the trump suit, so we can ignore that when comparing. You first check the rank of the card, and jack is a greater rank than 10, so you would discard the 10."}, {"id": 3576, "value": "Make sure you don't have any functions within the class which are pure virtual, or don't have definitions anywhere."}, {"id": 3577, "value": "The first player to get cards is the player to the left of the dealer. So if Adi deals, Barbara gets cards first meaning she has cards 1-3 and 11-12.. . (via the spec): Each player receives five cards, dealt in alternating batches of 3 and 2. That is, deal 3-2-3-2 cards then 2-3-2-3 cards, for a total of 5 cards each. The player to the left of the dealer receives the first batch, and dealing continues to the left until 8 batches have been dealt."}, {"id": 3578, "value": "I am not sure, but every time you submit, autograder does keep a copy of that submission on the platform. It should keep it.\u00a0"}, {"id": 3579, "value": "You can use command with all four players being human. A drawback is that all players can see each other\u2019s cards. To actually build front ends that communicates with this program (the backend) requires significantly more work.. . You could potentially clear the terminal after a player's hand is shown and they select a card, and then have it print out a message like \"please pass the computer to the next player\", and it only continues once that is done (for example, it waits for you to press enter or input 'done' or something)"}, {"id": 3580, "value": "Other teams with a similar error have found that something was wrong with their use or implementation of add_and_discard() - that would be where I would start. For hand 0, notice that Edsger is the dealer. This means that when Fran orders up, using the SimplePlayer add_and_discard strategy, Edsger should pick up the upcard (Nine of Hearts) and discard the lowest card in his hand (Ten of Diamonds)."}, {"id": 3581, "value": "Along with the shuffle function, I would also consider taking a look at the add_and_discard() function. For hand 0 in euchre_test01, Edsger is the dealer. When Fran orders up Hearts in round 1 of trump making, Edsger adds the upcard to his hand and discards the lowest valued card in his hand (following the Simple Player strategy). In the case of Hand 0, Edsger should add the upcard (Nine of Hearts) and discard the lowest card in his hand (Ten of Diamonds). Hope this helps!"}, {"id": 3582, "value": "It looks that you called get_suit() on a card that didn't exist or a null pointer. You can check what happened after \"Dabbala passes\" step by step, and see if you called get_suit() somewhere (likely you used this function in your make_trump() function) and start debugging from there."}, {"id": 3583, "value": "The first thing I would try would be to check that the operator>> is defined for Rank in accordance with the change log in Card.cpp. . I would also take another look at how you handle the junk \"of\" characters. We cannot use a string literal as a place for the input stream to dump the unnecessary characters; we need to define a junk string variable instead. This will be very similar to Image_init function in p2 that needed to discard unnecessary characters from the PPM file.. Follow up with any additional questions!"}, {"id": 3584, "value": "A player must always follow the led-card suit if they are able to. In your example, the led card suit is Hearts. Since person B has a card that follows the led card suit, they must play it. Therefore, person B plays the Ace of Hearts.\u00a0It is only when a player does not have any cards that follow the led card suit can they play cards of different suits. For a simple player, if they are not able to follow the led card suit, they should play the lowest valued card in their hand.I am not sure if this answers your question so feel free to follow up if there is any more confusion."}, {"id": 3585, "value": "I believe if any of the bulleted conditions are not met, you should print the same cout statement, not specified ones."}, {"id": 3586, "value": "Jack of Hearts is the right bower of this hand, i.e. the highest-value card in the game, so Fran should play the lowest card in their hand which is Ace of Hearts."}, {"id": 3587, "value": "You are just slightly off in one of the function names. To check whether an ifstream is associated with a file, you should use\u00a0infile.is_open() rather than\u00a0infile.open(). Additionally, I would check the argument you are passing to the Pack non-default constructor. Is the Pack non-default constructor expecting the address of the ifstream?"}, {"id": 3588, "value": "I see that you are running Xcode debug. Since autograder likely always uses ./euchre.exe as the execute command, you can potentially cheat a bit by just using cout "}, {"id": 3589, "value": "Yes, you are allowed to use \"break\" in for loops. A common way to fix deeply nested code is to write helper functions."}, {"id": 3590, "value": "Check that you are using the correct command line argument number for the pack input file name. Command line arguments are passed into your main function through an array of c-style strings - char*[] argv. The first element,\u00a0argv[0], contains the name of the executable (euchre.exe). The fifth element, argv[4], contains the name of the first player (Adi). Think about what element of\u00a0argv you need to access for the pack input file name."}, {"id": 3591, "value": "This is the same problem as was mentioned in @2391. Follow up there with any additional questions!"}, {"id": 3592, "value": "Did you declare a class called Player in Player.cpp (indicated by the firs error)? You are not supposed to define a Player class in Player.cpp since it is a virtual class. What you should do is define classes called Simple and Human that inherit from the Player interface. I suppose the error in your player tests would be resolved if you fix your class definitions."}, {"id": 3593, "value": "If in hand 0 all cards are dealt and played correctly by all players and that the upward in hand 1 is correct, it has to be either your shuffle or deal cards function. I would check and see if you have called shuffle in between each round, and if the role of the dealer has moved one player to the left."}, {"id": 3594, "value": "I don't think any test data in this project will need long long or unsigned int types. Failing undefined behavior check means that your program is likely to have going out of bound error or having a memory leak. While you get 69/69 in public tests, it is possible that you will fail some of the private tests. Given that all euchre tests failed UB Check, you might want to check if you deleted all your player pointers at the end of the program."}, {"id": 3595, "value": "Autograder uses gcc while MacOS likely uses clang as compiler backends, so it is possible for some program to run on Mac fine but fails in autograder. Without looking at your code it is not so easy to diagnose the problem, but here is a potential reason why your code fails on autograder: I assume you are using a vector as container for handCard, so the .size() method returns an unsigned int as its size. It is possible that static_cast converts in a weird way and behaves differently in gcc. I believe you don't need static_cast for the return of .size() when comparing with a regular int, so try to remove static_cast and see if autograder passes."}, {"id": 3596, "value": "Where the compilation warnings are, click on player.cpp. Give it a couple seconds to load (won\u2019t appear immediately), and then a description should appear. Where it says \u201cError output: \u201c and there is a chunk of code, it should reveal the issue. Usually from what I\u2019ve seen, it\u2019s just some single minor issue that will allow your code to work on your end, but Autograder doesn\u2019t like it that way. (Ex. I forgot to do #include <cassert> once and had assert statements which worked fine on VScode but not Autograder)"}, {"id": 3597, "value": "Nothing immediately stands out to me as problematic from the screenshots of the driver that you provided, although it is very possible that I am overlooking something. I would recommend writing additional tests for the add_and_discard function itself to ensure it's truly adding the upcard to the dealer's hand when appropriate. Getting your debugger working for that portion would be ideal. What is going on with the debugger that's preventing you from stepping through that portion?"}, {"id": 3598, "value": "@2311"}, {"id": 3599, "value": "Try adding a. . \"<\", in between Human and euchre_test50.in in your args.. "}, {"id": 3600, "value": "I think your understanding is correct - this is precisely what ``euchre_test50.out.correct`` shows."}, {"id": 3601, "value": "@2311"}, {"id": 3602, "value": "@2311"}, {"id": 3603, "value": "Yes - except for the fact that Adi can't order up `Hearts` if that was the suit of the upcard. The screw the dealer mechanism states that the dealer must order up a suit other than the rejected suit. See [here](https://eecs280staff.github.io/p3-euchre/#round-two) for more information."}, {"id": 3604, "value": "Yes. The lead card is just the first card played in each trick.\u00a0. Yes. Each player should be playing one of their five cards each trick, so they should be left with only one by the final trick.\u00a0"}, {"id": 3605, "value": "A lot of functions rely on other functions in euchre. Because of this, it's hard to immediately determine what is going wrong and where the error first occurs.\u00a0. . I recommend using your debugger to step through the code. I would make sure players are going when they should be, that they have the correct cards in their hand. You can also track the variable you believe is causing the loop to run an extra time."}, {"id": 3606, "value": "Your sort function does not have to account for trump suite and SimplePlayer does not have to have a sorted hand. Also, the sorted nature of the hand only considers the relationship defined by the < operator.. . https://eecs280staff.github.io/p3-euchre/#human-player : See section \"adding the upcard and discarding\".. . I would delete your function so that you match the output of the autograder."}, {"id": 3607, "value": "resolved"}, {"id": 3608, "value": "* You can use local sanitizers to detect undefined behavior (the students' answer), memory leaks, and illegal memory access. [Here](https://eecs280staff.github.io/tutorials/setup_asan.html) is the setup guide for sanitizers.. * You can upload your project to CAEN and rerun your tests there. The CAEN environment is the same as the autograder, so it is more likely to replicate the autograder's output. [Here](https://eecs280staff.github.io/tutorials/setup_caen.html) is the setup guide for CAEN. (You can enable sanitizers on CAEN as well.). * Ensure that you are using `ifstream` to read `pack.in`, not `fstream`. `fstream` requires both read and write permissions to `pack.in`. Both your local environment and CAEN will allow you to write to `pack.in`, so `fstream` would work fine there, but the autograder won't allow you to write to `pack.in`, so `fstream` would fail on the autograder. You have to use `ifstream` instead, which only requires read permissions."}, {"id": 3609, "value": "After someone orders up in the first round of making trump, you _always_ call `add_and_discard` on the dealer. If the dealer wants this option, they would take the upcard and discard a different card from their hand. If they don't want this option, they would just ignore the upcard."}, {"id": 3610, "value": "For\u00a0play_card, a simple player plays the highest card that follows suit, otherwise, they play the lowest card in their hand. At the start of the test, you add the Jack of Diamonds and the Ten of Diamonds to AI-2's hand. You then ask AI-2 to play a card given the trump suit of diamonds and a led card of the Ten of Diamonds. Since both cards in AI-2's hand at that point follow the led card suit of Diamonds, AI-2 should play the highest of the two which is the Jack of Diamonds.\u00a0"}, {"id": 3611, "value": "You shouldn't need to account for repeated cards in Player.cpp or euchre.cpp, i.e., you can assume that there will be no repeated cards in a player's hand. However, you cannot assume that the cards passed to `Card_less` and `operator"}, {"id": 3612, "value": "The autograder is planned to come back online on Monday, March 6."}, {"id": 3613, "value": "Have you tried restarting VSCode or rebooting your computer?"}, {"id": 3614, "value": "There could be multiple reasons. Like the student mentioned, you may want to double check the you put Card.h file under the same folder. Also since the name of the class is \"Card\" not \"card\", whenever you create a card, you should use \"Card c\" instead of \"card c\". Sometimes trying to remake exes can help (in your case it would be make euchre.exe). You can also try closing your IDE/Editor, and reopening it. The IDE/Editor is not always smart enough to find the path to the files, so the last two \"solutions\" is asking it to restart from the beginning and try to find the files."}, {"id": 3615, "value": "1. There are 21 inputs from lines 30 to 50 because in this hand the trump is decided in the first round, which necessitates the extra input from the dealer for them to choose which card to discard. Then the game continues normally with 20 inputs. This doesn't happen in the previous hand because trump making reached round 2, therefore there is no input needed from the dealer. . 2. In line 34, the 4 is not out of bounds here because the input in this case is asking for a card in that players hand, which ranges in input from index 0 to index 4, therefore 0,1,2,3,4 are all inbounds."}, {"id": 3616, "value": "You need to check how you are choosing the upcard at the start of each hand. You might be defining it only once and then after hand 0 it becomes a default card.. . You need to reset the pack at the start of every hand, whether it is noshuffle or shuffle."}, {"id": 3617, "value": "That euchre_test01 is pretty tricky. For hand 1, the trump suit is Diamonds. On trick 4, Edsger leads with the Jack of Hearts, which is the left bower. Since the left bower is considered as the trump suit, Fran must play her only card that follows the trump suit which is the Nine of Diamonds rather than the ten of spades. Hope that helps! Follow up with any additional questions."}, {"id": 3618, "value": "Run your code through CAEN, it will run your code in a similar environment to the autograder, and might help you figure it out. Just make sure address sanitizer is disabled because those two don't work together."}, {"id": 3619, "value": "For example, you may find that the second Card_less() has a lot of similar functionalities compared to the first Card_less(). If you choose to copy and paste some code fond the first one into the second one, you may get \"code duplication\". In this case, you should consider how to call the first Card_less() in your second Card_less() to avoid using duplicate code.. In general, duplicate code may make a file longer than it should be, less efficient, and more difficult to maintain. Using a helper function to take care of the chunk of duplicate code is another common solution."}, {"id": 3620, "value": ""}, {"id": 3621, "value": "You only need to reset once in this function (i.e. after the 7 loops)"}, {"id": 3622, "value": "Marking as resolved"}, {"id": 3623, "value": "Your Pack should only include 24 cards that Euchre needs. Check your pack constructor if there are other cards involved."}, {"id": 3624, "value": "The student answer is correct if you are trying to debug euchre.cpp, but it looks like you want to debug the Player public test which does not take any arguments. First, make sure to follow the tutorial for whatever OS you are on (Mac or Windows), and then put whatever file you want to step through in the \"program\" part of the launch.json file (for instance, you would currently be running the Player public test). If you want to debug your own test cases and step through those, you would put\u00a0\"${workspaceFolder}/Player_tests.exe\"."}, {"id": 3625, "value": ""}, {"id": 3626, "value": "Adding the \"< <filename>\" may be changing the value of argc. Either try to recreate the launch.json according to the tutorial (and follow the part where it says to use stdio for input redirection), or temporarily comment out the check you have to see if argc == 12."}, {"id": 3627, "value": "In your case, the order of your cards, from smallest to largest, should be King of Spades, King of Clubs, Ten of Hearts, Queen of Hearts, Jack of Hearts. In different tricks, as the led card changes, the order may change as well."}, {"id": 3628, "value": "Since Spades is trump, the Jack of Clubs (the left bower) counts as a Spade rather than a Club. So Andrew has no Clubs in his hand, and he will instead play the lowest card in his hand."}, {"id": 3629, "value": "That is the error that gets printed when you call the program incorrectly, from the spec:. . . How are you using sdiff? You should be inputting two files, for example\u00a0sdiff euchre_test50.out euchre_test50.out.correct\u00a0"}, {"id": 3630, "value": "We have these test cases so that if you have bugs in your Player.cpp or other files, you can still get credit for euchre.cpp. That means anything that pertains to general euchre functionality must be in euchre.cpp. This would include printing! Make sure all your print statements are in euchre.cpp not in Player.cpp."}, {"id": 3631, "value": "You may have accidentally edited it the file. I generally rerun it again if it I get a weird diff check or output just to be sure I have a bug and I didn't just misrun the program."}, {"id": 3632, "value": "It looks like you are creating an object that is abstract, which is not allowed in cpp. Player is an abstract class because it has at least one member function that is pure virtual. A pure virtual function is = 0 rather than has {/*implementation*/}. If you haven't implemented every function in Simple player, it will also be abstract because it will inherit the pure virtual function.\u00a0 Remember that you can only create Player * because you are not actually creating a player object itself. For more information on this, see the Player.cpp section of the P3 FAQ (@1463)."}, {"id": 3633, "value": "I would show white space because it most likely is a spacing error. Also, you have to echo the arguments at the beginning of the output"}, {"id": 3634, "value": "This is something you should go to office hours for. To me it sounds like it is stemming from your play card function. We have an explanation of euchre_test01 (@1728) that says what cards the players have in their hand as well as why they play the cards they do. My best advice to finding a tricky bug is to use your visual debugger. Try stepping through the play card function. Keep an eye on the variables and what cards are in each persons hand. See how your function compares cards and which if/else statements it goes into."}, {"id": 3635, "value": "To fix the segmentation fault, I would suggest running your visual debugger without any breakpoints. It should stop right where the segmentation fault occurs. From there you can go back in the call stack and look at all the variables to see what memory is being accessed and why it might be invalid. For more information on the call stack, see our debugging guide (https://eecs280staff.github.io/tutorials/debugging_guide.html).\u00a0. . For the Euchre Public Tests, I took a peak at your code in the autograder. It looks like you are printing \"Error opening file\" instead of running the program. Make sure you are using the is_open function to check if a file is open (https://cplusplus.com/reference/fstream/ifstream/is_open/)."}, {"id": 3636, "value": "If you call the shuffle() function 20 times on the a default pack, the pack will become the same as the default pack.in."}, {"id": 3637, "value": "From what I can see on AG, your pack public tests exited with non-zero code, possibly because there is a segfault in your program. You did pass the long line test, the issues are long functions, deep nesting, too many parameters, and code duplication."}, {"id": 3638, "value": "In your if statement it looks like you don't have a complete condition.....try putting (typee != \"Simple\" || typee != \"Human\"). The computer is evaluating \"Human\" to true so it will never make it to any lines of code after the if statement."}, {"id": 3639, "value": "congrats! I will mark as resolved"}, {"id": 3640, "value": "Looking at your shuffle function in Pack, it looks like you are shuffling half the deck 7 times, then shuffling the other half of the deck 7 times. This is an incorrect implementation. It could be possible that by chance it worked the first time.. . A correct implementation creates a copy of the cards. The cards array is going to be overwritten with the card order. You can use the copy of the cards array to remember the original locations of each card before you started overwriting the cards array.. . When thinking about the actual overwriting during the shuffle function, I would try mapping the current index of the card and then the index of the spot you want it to end up in. You will see that there is a possible mapping so you can write cards[new index] = cards_copy[old index].. . Hope this helps!"}, {"id": 3641, "value": "Resolved in followups"}, {"id": 3642, "value": "Have you tried stepping through each of temp arrays with a debugger and making sure the correct cards are being placed in the correct location? Glancing at you code, in your second loop for temp 2, you start placing the cards from the original pack at temp2[12]....as a result temp[0 to 11] are probably getting initialized as a default card."}, {"id": 3643, "value": "The jack of spades is the left bower, meaning we consider it a club. Keeping that in mind, player jihong can and has to follow suit because the lead suit is clubs and jihong has a club. The jack of spades should be played in this instance, not the ten of spades."}, {"id": 3644, "value": "A false positive does not take a point off, however it does not gain you any points and it also indicates that there is something wrong in your code. A false positive is a test case that is written wrong, meaning it asserts the incorrect answer. It passes on your code, though, because your code also returns the incorrect answer."}, {"id": 3645, "value": "Either way will work, although it's worth mentioning the sort function() won't return the highest card played. So, it might be better to use Card_less in this case"}, {"id": 3646, "value": "Note argv is an array of char pointers. How would you print the output of items of an array?"}, {"id": 3647, "value": "From what I am reading, there might be a few issues:. 1. In the last `for` loop, `card[s+1]` will be overwritten when `s` increments in the next iteration. 2. In the last `for` loop, only 7 cards in your original pack are updated, instead of all 24. 3. You'll need to call `reset` at the end of the function. . I highly recommend reading the students' and instructors' answers in @2314: try writing your shuffle function based on a small deck of cards first (the one on Wikipedia is really helpful) - try out different methods, and see if your output matches with the correct one."}, {"id": 3648, "value": "You'll need to print the prompts for some human player functions inside `player.cpp`. See [here](https://eecs280staff.github.io/p3-euchre/#making-trump-1) for an example."}, {"id": 3649, "value": "I think you're sort of on the right track. You would want to divide this into two cases: (1) there is at least one non-trump card, and (2) all cards in the hand are trumps. Then within each of these cases, you want to use `Card_less` to compare your current card with the max card you've read so far."}, {"id": 3650, "value": "yes we finished it over a few days ago. when we submitted to autograder two days ago it compiled fine \u00a0\u00a0"}, {"id": 3651, "value": "Make sure you include the necessary arguments and input in your launch.json. You can find how to do so on VS code tutorial page."}, {"id": 3652, "value": "I had to delete the screenshot because it contained student code. However,\u00a0 it is expected that the code in the functions should be similar (the functions being the smaller Player functions).. . Try reordering the functions in either human or simple player so that the checker does not find 17 lines in a row that are similar.\u00a0"}, {"id": 3653, "value": "Just to reiterate the student answer, I think the best way to check your understanding of the shuffle function would be to test it with a smaller deck of cards, like the one example on Wikipedia."}, {"id": 3654, "value": ""}, {"id": 3655, "value": "Try running your code through CAEN, it'll run your code in a similar environment to the autograder - just make sure you turn off address sanitizer."}, {"id": 3656, "value": "marking as resolved"}, {"id": 3657, "value": "You shoud only call sort within add card! Sort doesn't work with const declarations so you may be calling it within that function. You shouldnt have to write your own fuction."}, {"id": 3658, "value": "I think the faculty are still discussing but are hoping to have a solution for everyone today. We appreciate your patience.. . [EDIT: See Canvas for information regarding the extension!]"}, {"id": 3659, "value": "Error 139 means the program crashed before it reaches exit. As the test info says, there is a segmentation fault when running your driver."}, {"id": 3660, "value": "Unfortunately, this error could have many possibilities. Please go to office hours so that we can help you better."}, {"id": 3661, "value": ". Would we have to derive two instances of the game driver to account how the game will run if we have simple players and how the game will run if we have human players?. . No, the game should run the same (same functions will be called for each player). Differences in how players act are handled within the player functions.. . . \u00a0If so, or somewhat along those lines, should we pass in a parameter that indicates that all players are either human or player? My point in doing this is to pass in their argument so then I can hard-code in my implementation:. Ex: If argument given to function is \"Human\", execute only printing who won the trick and not the other players and what card they play like Player does.\u00a0. . Since the previous answer is no, this doesn't really require an answer. However, note that a game can be played with both human and simple players. It is not required that all players are human / all players are simple. Also, printing should be handled inside the human player functions.. . . To distinguish which functions from Player.cpp need to be called, would we also utilize putting (Human::) or (Player::) by the functions we need to indicate to the compiler which ones to use?. . No. You are calling the functions on an object, so you would just call functions normally (if player1 is a pointer, then\u00a0player1->function() and if player1 is a value then\u00a0player1.function()).. . . Mini-Question: I basically created a .h file with RME's to help GSI/Professors/Peers understand my code and how my functions work/their sole purpose. Would this run into any error since I've created it for my driver?. . You cannot submit the .h file, so this is an issue. You should only be editing files which you are submitting, because edits made in other files / new files created will be completely ignored by the autograder. This is unless you want to just have like a cpp file for testing, like Pack_tests.cpp - you can still implement that since it will test your code, and does not affect anything."}, {"id": 3662, "value": "players is a vector of pointers, so players[i] is a pointer to a player.. There are two things wrong with your code.. First, you need to do players.push_back(...) instead, since you are pushing into the vector, not into the pointer.Second, if you were trying to access a player function you would need to use -> instead of\u00a0. since that's how you access a function of a pointer."}, {"id": 3663, "value": "make_trump returning true does not indicate whether you are in round 1 or 2. It will return true whenever the player wishes to make trump (i.e. if they say yes to the upcard I round one or if they choose a suit in round 2).Also, you cannot call add_and_discard inside of make_trump because make_trump is const.What you need to do is just return true/false in make_trump based on whether or not the player makes trump, and then in euchre.cpp, you can check if it's round 1 or 2. If it's round 1 you call add_and_discard but if it's round 2 you don't."}, {"id": 3664, "value": "You're supposed to sort the hand before you print it out, yes. Common ways to do this are sorting a copy of the hand as described in the student answer or making sure the hand is sorted every time you add a card to the hand."}, {"id": 3665, "value": "in discord, an instructor said that we should be able to handle if two players have the same name.\u00a0"}, {"id": 3666, "value": "Keep an eye on @2131 for latest updates."}, {"id": 3667, "value": "AG is still unstable, yes. Keep an eye on @2131 for latest updates."}, {"id": 3668, "value": "marking as resolved"}, {"id": 3669, "value": "Yes"}, {"id": 3670, "value": "See @2131"}, {"id": 3671, "value": "Have you made sure to set up the input redirection?"}, {"id": 3672, "value": "You could implement this in multiple ways. One strategy would be to make variables to keep track of who is playing, starting with the leader, and keep a vector of cards played in a round. When a round starts, the leader will play a lead card and add this to the vector. From there, iterate through the remaining players and have them each play a card. Finally, determine what card was the highest. Winner then becomes the leader, and you would do this 4 more times, keeping track of who won more tricks. You will also have to add to the total scores at the end of this.. . You can split this up into however many functions you believe makes the most sense for you, then call them within play_hand() and/or play() and/or other related functions.\u00a0. . Hopefully this helps!"}, {"id": 3673, "value": "For anyone else coming across this, you don't need to call print_hand inside euchre.cpp. If the trump is chosen during round 1, then you should just call add_and_discard for the dealer, and you can print the hand in there."}, {"id": 3674, "value": "Does ordering of cards matter when making trump? You want to count the number of face/ace cards in the hand, so you have to traverse the whole hand."}, {"id": 3675, "value": "resolved."}, {"id": 3676, "value": "Might want to check that your add and discard correctly discards a card"}, {"id": 3677, "value": "Jack of hearts is a trump, so it\u2019s treated as diamond too. It\u2019s the left bower. So the suit played has to be trump too."}, {"id": 3678, "value": "I'd recommend first stepping through your code with the debugger or adding cout statement debugging to determine exactly which line of code is causing the segfault, that way you can directly address the issue."}, {"id": 3679, "value": "I'm attaching screenshots of all the diffs. It looks like your issue is related to scoring/how you calculate the winner of the hand in euchre.cpp. If you're passing the normal public tests, this means there's something in your implementation of card/pack/player that is correcting for this bug in your euchre.cpp. It's a bit hard for me to know without knowing the logic of how you're calculating teamzerotricks and teamonetricks. Let me know if you aren't able to find the issue, but hopefully this helps give you a good start. . . . . "}, {"id": 3680, "value": "First make sure you checkout these two sections(passing arguments and input redirection) so you set up debugging for euchre.exe correctly.. . My suggestion is to set a breakpoint on the first line of main(). Then press continue and xcode will automatically stop when an abort message pops up, such as seg fault. Then you can view something called the \"Call Stack\" in your Xcode debugger (you have to look around a bit to find it).. . The call stack will show you the most recent function calls. Trace those function calls to see what function caused the segfault. Then start debugging that function."}, {"id": 3681, "value": "4. . https://eecs280staff.github.io/tutorials/style_guide.html#functions"}, {"id": 3682, "value": "I suggest setting up a breakpoint in your euchre.cpp to investigate further why you are no printing out any output."}, {"id": 3683, "value": ". . . . . . Me and my partner are struggling to access the argv functions in the void play function. Can someone guide us to a way we can access them?. . . . . . . This is a design choice for setting up your euchre.cpp. You can access them in main(). One idea is to create a Game class, and make an instant of it in main() and use argv information to construct the game object."}, {"id": 3684, "value": "I think that\u2019s it"}, {"id": 3685, "value": ". I know that we are supposed to be simulating a real game of euchre, so in theory a player's hand will never contain duplicate cards, but just to be safe- for the purposes of writing function implementations in Player.cpp, am I safe to assume that each card in a player's hand will be unique?. . You can assume that you have a valid deck of cards"}, {"id": 3686, "value": "Since it\u2019s a single card, I recommend looking into add and discard function. Was this properly called? Is the function implementation correct? Those are some questions you could think about when trying to debug."}, {"id": 3687, "value": "If you\u2019re missing card, then try testing cardless more since there could be a couple of different cases this function considers. For example, left and right bowers, or when you have a led and trump suit together.. . If you\u2019re missing player, I think a common place to catch bugs is the make trump, lead and play card functions. And it\u2019s for the same reason because there are a couple of different cases you\u2019d need to consider.. . Also generally try to have at least 1 test for each function."}, {"id": 3688, "value": "resolved."}, {"id": 3689, "value": "resolved"}, {"id": 3690, "value": "resolved, see followups"}, {"id": 3691, "value": "Remember that the hand for the player has to be sorted when printing it out (and in general, you can keep it sorted if you remember the invariant)"}, {"id": 3692, "value": "Try running with address sanitizer on CAEN, which has the same environment as the autograder."}, {"id": 3693, "value": "The euchre social slides from a couple weeks ago also have a table explaining when to print march or euchred.\u00a0"}, {"id": 3694, "value": "Make sure Card is included in your build. Also make sure the function signature for lead function matches the one in Player.h"}, {"id": 3695, "value": "Please put in Card.cpp. You shouldn't change anything in Card.h."}, {"id": 3696, "value": "I personally used a private member variable to keep track of the dealer index and incremented it by 1 after each round (and corrected to keep it between 0 and 3 if need be). . Just an addition to the answer above, the easiest correction to keep within bounds is just to modulo the dealer position by 4."}, {"id": 3697, "value": ". . . . . . if my upcard is heart, and in round two I have Jack of diamonds. does Jack of the heart is considered a left brewer, and then order up by diamonds. . . . . . . In round two, you would consider the suit of the same color as trump, so in this case diamonds. If you have one face card of this suit, then you will order up (per simple player strategy). And yes, jack of heart will be considered a card of the diamonds suit."}, {"id": 3698, "value": "Here's my suggestion, set a breakpoint on that assert statement. Keep pressing continue till the assert statement fails. In any IDE you use, you will see something called the \"call stack\" which shows what function is called add_card(). Add_card() will be on top of this stack, so click on the function below it to trace where it was called.. . "}, {"id": 3699, "value": "Could you share more of your game class code?"}, {"id": 3700, "value": "We don't run style checks on your variable name or function names. However, know that in C++, CamelCase is the convention. Snake case should be used for naming constants."}, {"id": 3701, "value": "You could have a bool declared before the loop to keeps track and change it if certain conditions are met while looping."}, {"id": 3702, "value": "Yes it is down and we are aware of the situation."}, {"id": 3703, "value": "to debug with inputs, you can edit your launch.json file and put in the inputs in the \"args\" ... see this tutorial: https://eecs280staff.github.io/tutorials/setup_vscode.html#input-redirection"}, {"id": 3704, "value": "Only the dealer ever picks up the card, and they only do so during the first round. During the second round they choose what suit they want to be trump, and don't pick up the card. "}, {"id": 3705, "value": "Just Euchred!. "}, {"id": 3706, "value": "see student response"}, {"id": 3707, "value": ""}, {"id": 3708, "value": "deal_one() is a function defined for Pack not Player.\u00a0. . Try using pack.deal_one() to get a card to deal, then use add_card() from Player to add it to a players hand. You have to think about how to do this in 2 rounds, and deal in orders of 3 cards, 2, 3, 2 in the first round and 2 3 2 3 in the second round."}, {"id": 3709, "value": ""}, {"id": 3710, "value": "You should set up your debugger to take in euchre_test50.in as an input redirection and the rest of the necessary arguments as command-line arguments. Visit the tutorials page to see how to set it up for your IDE.The rest of it will be normal debugging, so you want to set a breakpoint and continue from there. There is also a debugging tutorial available on the website."}, {"id": 3711, "value": "Set a breakpoint on the first line of your main() and start debugging from there to see what line aborts the program. If it exits immediately, make sure you pass in the arguments to the debugger (you can find the tutorial on how to do so on the tutorials page for your IDE)."}, {"id": 3712, "value": "This might be an issue with how you use Player_factory and create pointers. I have made this post private please post a screenshot of the test case (test_player_play_card) and your Player_factory."}, {"id": 3713, "value": "I imagine this is frustrating, and I apologize for the inconvenience. We are discussing this, and we will send an announcement soon.\u00a0"}, {"id": 3714, "value": "Make sure to put the arguments and input file as necessary in your launch.json, per the tutorial."}, {"id": 3715, "value": "Make sure to include this change in your main when using input redirection.\u00a0"}, {"id": 3716, "value": "Jack of diamonds is the left bower, so it counts as a trump card (aka hearts suit). You have to follow suit, and the suit in this case is Diamonds. So, you will play ten of diamonds."}, {"id": 3717, "value": "No, but you have to print out what card a player played in euchre.cpp"}, {"id": 3718, "value": "Players will have cards added to their hand through functions such as add_card() and add_and_discard()."}, {"id": 3719, "value": "i think you should be able to pass 1 and 2 for the parameters.\u00a0"}, {"id": 3720, "value": "You should have an array of players. In player.cpp, there should have been a private member variable for a person's hand, so when you make your 4 player array, you should have 4 hands already."}, {"id": 3721, "value": "there are 17 bugs for you to catch. if your test case catches one bug, you get one point. if you have a false positive, you lose one point. it doesn't really matter how many test cases you have - it depends on how many bugs those test cases can catch.\u00a0"}, {"id": 3722, "value": "resolved."}, {"id": 3723, "value": "If the upcard is diamonds, the simple player will only consider ordering up hearts, and will do so if they have at least one face card with hearts as the suit.\u00a0"}, {"id": 3724, "value": "You are calling pack::shuffle() it seems like. You want to make sure to call shuffle for the pack variable you have created. For instance,\u00a0. . Pack p;. p.shuffle();"}, {"id": 3725, "value": "Make sure you deal before you reveal the upcard."}, {"id": 3726, "value": "Yes you can, but also think about in functions is it necessary to call sort?"}, {"id": 3727, "value": "Did you give it a file name to write the output to after the \">\"? Given your screenshot, I suspect it is because zsh expects a file to write output to after the \">\" sign but is not given."}, {"id": 3728, "value": "This is a segfault. You're most likely either indexing out of bounds or trying to dereference an invalid pointer."}, {"id": 3729, "value": "The simple player aims to play the highest card that follows suit if possible. In this case, the player can follow suit. And because ledsuit is spades, but trump is hearts, ace of spades ranks above jack of spades (as jack of spades is not the same color as the trump suit, it has a lower value than queen/king/ace)."}, {"id": 3730, "value": "The screenshot is corrupted. Please try attaching a file ending in .jpg or .png"}, {"id": 3731, "value": "every function, as noted in the style guide."}, {"id": 3732, "value": "I don\u2019t think it means your test cases are invalid since you caught bugs the first time. You might want to double check that you didn\u2019t change anything in Player tests. Your player tests are run with buggy versions of code and should be independent of your player.cpp implementations. If you have version control, maybe check to see what changed from the last submit to this submit."}, {"id": 3733, "value": "@2131"}, {"id": 3734, "value": "Are you on mac? if so, you should use stdio for your input and output redirection in launch.json, not args."}, {"id": 3735, "value": "You're using\u00a0strcmp\u00a0in euchre.cpp, which requires you to\u00a0#include <cassert>."}, {"id": 3736, "value": "Can you run make clean? Then, can you type ls and send a screenshot of the output?\u00a0"}, {"id": 3737, "value": "It seems like you are not processing argv correctly.\u00a0"}, {"id": 3738, "value": "I don't believe the unit test framework has an equivalent. However, if you run tests through command line, it should give a stack trace, and if you use a debugger, it should give you the state of your program when the assert does fail."}, {"id": 3739, "value": "What do you mean by initialize privately? If you mean that they are initialized directly in private, then that might be causing an issue. Your private member variables are like blueprints, you haven\u2019t actually made the Game class yet and they can\u2019t be assigned values since you don\u2019t have the Game object. So in your constructor, you probably want to call them and set their values to some default value since that\u2019s when you make the Game object and give your values"}, {"id": 3740, "value": "@2131"}, {"id": 3741, "value": ""}, {"id": 3742, "value": "If I understand correctly, you submitted other legit files like Pack.cpp, Player.cpp, etc. and the autograder isn't showing them. That's possibly a result of the ongoing instability of the autograder system. We're working with autograder support to figure something out. Thanks for your patience as we work through this. We'll do what we can to get things fixed and make it right."}, {"id": 3743, "value": "You can just leave this part to euchre.cpp."}, {"id": 3744, "value": "Resolved"}, {"id": 3745, "value": "Algorithm is a library for the C++ Standard Library that you are including in your files. You do not need to delete that file, and it is not locally on your computer.. . Your IDE may show you that the error is in a Standard Library function but those errors will stem from somewhere in your own code - in this case somewhere where you are calling sort in your local files. You can use the debugger call stack to figure out what is calling sort.. . One common error that I would check is if you are sorting your hand vector in any const member functions. Recall that sorting changes the hand member variable which is a compiler error."}, {"id": 3746, "value": "Make sure you use\u00a0ifstream\u00a0for reading in the pack instead of an\u00a0fstream.\u00a0fstream\u00a0requires write access for files, which AG will not give you."}, {"id": 3747, "value": "Rather than reading the Human player's input into a string, can you read it into a Card? Remember that you implemented the >> operator for Card. Once you have that Card, you can get its suit, right?"}, {"id": 3748, "value": "Don't include unnecessary header files like \"Pack.h\" in your Player.cpp. Note from [https://eecs280staff.github.io/p3-euchre/#requirements-and-restrictions](https://eecs280staff.github.io/p3-euchre/#requirements-and-restrictions):. . ![image.png](/redirect/s3?bucket=uploads&prefix=paste%2Fk514yxvwbad3p%2Fedf7a1bed680a60f89ed2ed902b0df6233ad164bd6cf39ca89aa87688d22165f%2Fimage.png)"}, {"id": 3749, "value": "They key distinction when using these functions is whether the trump suit exists in your context. When using .get_suit(), the trump suit is not determined yet, such as in the make_trump() function. When using get_suit(trump), the trump suit is provided and has an impact on the rest of the game, so you would be using this function anywhere after make_trump."}, {"id": 3750, "value": "Are you including the input file euchre_test50.in in your debugger arguments? Like so:. . ```./euchre.exe [args...] "}, {"id": 3751, "value": "You can make private helper functions, but you won't be able to add public functions to the Player interface for the reason specified by the student answer."}, {"id": 3752, "value": "Remember to always delete an object you\u2019ve created using dynamic memory or else you\u2019ll get memory leaks left on the heap."}, {"id": 3753, "value": "Your Pack::shuffle function looks generally correct to me. In your euchre.cpp shuffle function, are you passing the pack variable by reference? If it were passed by value, your pack variable would not reflect the shuffle once the function returned.. . If you are already doing this, I would step through with the debugger to make sure the cards and next index in your pack are getting updated. This is based on the fact that the Jack of Diamonds is what should be returned if no shuffle took place at all."}, {"id": 3754, "value": "fixed the issue, mark as resolved. "}, {"id": 3755, "value": "Your constructor takes Player parameters, but you're giving it Player pointers, which are not the same."}, {"id": 3756, "value": "You called get_upcard() function when you call make_trump() for each player. And your get_upcard() function erase a card from your remaining_card array. First of all, you remaining_card array should only have 4 cards at the begining of the make trump process, after you erased 4 of them, there's nothing there and that's what causing the error. Second of all, your understanding of the make trump process is not correct, the players should use the same upcard the each round of make trump. I suggest you to read through the spec about make trump again."}, {"id": 3757, "value": "Adi has three trump, but they could be non-face/ace.. . Copied from spec:. \"During round one, a Simple Player considers ordering up the suit of the upcard, which would make that suit trump. They will order up if that would mean they have two or more cards that are either face or ace cards of the trump suit (the right and left bowers, and Q, K, A of the trump suit, which is the suit proposed by the upcard). (A Simple Player does not consider whether they are the dealer and could gain an additional trump by picking up the upcard.)\""}, {"id": 3758, "value": "9 of spades"}, {"id": 3759, "value": ""}, {"id": 3760, "value": "Same pack from the previous hand otherwise shuffling the original pack would always result in the same hands being created (dealt to different players or the same exact players having the same exact hand depending on who won the previous hand)"}, {"id": 3761, "value": "\"Invalid new-expression of abstract class type 'SimplePlayer'\". . It's telling you that SimplePlayer and HumanPlayer are abstract classes, meaning you haven't implemented all the functions from Player.h."}, {"id": 3762, "value": "Jack of Diamonds could be a possible left bower (if trump is Hearts) so maybe somewhere in Simple Player you\u2019re not considering for left bower/trump. Remember the left bower is not the suit of its suits\u2019 name, it\u2019s the suit of the trump."}, {"id": 3763, "value": "When you run make, it's giving you the error that there's an undefined reference, so it stops creating an executable, which is why the executable doesn't exist.. . The undefined reference error says you haven't defined\u00a0operator<<(std::ostream&, Player const&), which is defined in Player.h. Make sure you implement this funcion in Player.cpp."}, {"id": 3764, "value": "\u201cno matching function for call to \u2018swap\u2019\u201d error happens if you call sort on a memeber variable in a member function that\u2019s const (shouldn\u2019t modify anything). Check where you\u2019re using sort in your code The spec says \u201cinstead call \u2018sort\u2019 when adding a card to hand\u201d"}, {"id": 3765, "value": "Segmentation faults occur when your code tries to access memory somewhere that the CPU cannot access (ex: accessing an index of an array that is greater than its size). I would suggest looking through any loops you have in euchre.cpp that maybe be accessing memory incorrectly"}, {"id": 3766, "value": ""}, {"id": 3767, "value": "I feel like the most likely reason is that you have some undefined behavior which is causing the different outputs. Try running with the address sanitizer (as detailed in: https://eecs280staff.github.io/tutorials/setup_asan.html)"}, {"id": 3768, "value": ""}, {"id": 3769, "value": "The EECS280 staff is aware that the autograder is currently down again. There is issues with the server, which is why other classes are facing the same issues.\u00a0. . We are discussing the best way to proceed and appreciate your patience. I understand how frustrating it is to not get feedback on your code when you need."}, {"id": 3770, "value": "hahah I was about to type that! Sorry I was answering other questions about the autograder :/. Glad you got your problem fixed!"}, {"id": 3771, "value": "The instructional staff is aware of the issue and will be discussing the best way to proceed. We appreciate your patience :)."}, {"id": 3772, "value": "The screenshots don't have enough context for us to be able to diagnose the issue. This seems like a good question for OH."}, {"id": 3773, "value": "These look like errors relating to the constructor. Make sure the function signature for your implemented constructor matches the one from Player.h, and make sure that it matches the calls from Player_factory."}, {"id": 3774, "value": "The spec says to use sort whenever a player adds a card to their hand, so I believe the answer would be no, the exact card doesn\u2019t maintain its original index (since, like you said, the size of the hand changes throughout the game)"}, {"id": 3775, "value": "If you are using VS Code, the debugger might be helpful!"}, {"id": 3776, "value": "I believe it does not include blank lines or comment lines."}, {"id": 3777, "value": "yes"}, {"id": 3778, "value": ". \"one or more cards that are either face or ace cards of the trump suit in their hand (the right and left bowers, and Q, K, A of the order-up suit)\". . according to the spec, yes they will, as long as the order up card is hearts. you're right that jack of diamonds would be considered left bower, therefore the conditions are met"}, {"id": 3779, "value": "We are aware and will update you when things are fixed. @2131"}, {"id": 3780, "value": "I believe it does as it will then be a bower and considered a heart."}, {"id": 3781, "value": "It is expected human players follow all the rules."}, {"id": 3782, "value": "Their original hand and hand after ordering up will be the exact same. They won't pick up the upcard or anything like that. I do believe you should consider the suit that the trump would be if the player makes trump when deciding to make trump."}, {"id": 3783, "value": "You have 10 arguments in the first screenshot. According to the spec, that means your error message should print out since there are NOT 12 arguments. If the program is crashing before the error message prints, you may be accessing argv[ i ] where i >= argc"}, {"id": 3784, "value": "You might have made changes to the code which you have not yet compiled. Make sure to make the executable before debugging."}, {"id": 3785, "value": "i think your test cases can have the same format as the public test cases!\u00a0"}, {"id": 3786, "value": "It seems your understanding of scoring is incorrect, from the project spec :. . \"The team that takes the majority of tricks receives points for that hand. If the winning team had also ordered up, they get 1 point for taking 3 or 4 tricks, and 2 points for taking all 5. Taking all 5 tricks is called a march. If the winning team did not order up, they receive 2 points for taking 3, 4 or 5 tricks, which is called\u00a0euchred.\". . Basically you can only earn one or two points at a time,\u00a0. 1 point: if your team called trump and you won 3-4 tricks. 2 points: your team won all 5 tricks or the other team called trump and you won 3+ tricks"}, {"id": 3787, "value": "Check if your code in euchre.cpp is trying to access \u00a0argv[ i ] where i >= argc. Accessing data outside an array could be causing the segmentation fault."}, {"id": 3788, "value": "It's hard to tell with what you've given. The rest of the error message should give some better context. Just make sure you use an ifstream for the pack and #include <fstream>. It might be good to come to OH for this if that doesn't help."}, {"id": 3789, "value": "This works, you can set one instance of a class equal to another instance of the same class and it will copy over all member variables as well.. . Additionally, since Pack uses a C++ `std::array` for the cards, when that's copied over it will automatically copy the cards as well. This is in contrast to a C-style array, with which you would have to copy the cards yourself with a for-loop, for example. But with a C++ array it does it for you :)"}, {"id": 3790, "value": "You will only need to call add_and_discard if trump is made in the first round. After the first round the upcard is \"turned over\" and the dealer can no longer pick it up."}, {"id": 3791, "value": "you could try to run it in your terminal or command prompt and use the diff check to see the differences.\u00a0. . here's how to do it according to the project doc: https://eecs280staff.github.io/p3-euchre/#example-with-simple-players"}, {"id": 3792, "value": "Check out the student response in @1951 (note: the results have not been verified by staff, I just found it and think it may be useful). You could write a quick test that performs a shuffle and prints all cards out by calling deal_one().. . If you get the correct output, then your shuffle should be correct. Come into OH if you have further questions."}, {"id": 3793, "value": "Take a look at your validation for shuffle/noshuffle again. If the argument is \"shuffle\", then the second part will be true, and the error will print. If the argument is \"noshuffle\", then the first part will be true, and the error will print."}, {"id": 3794, "value": ". The dealer shuffles the deck at the beginning of each hand.. . . At the beginning of each round, the pack should be reset and possibly shuffled."}, {"id": 3795, "value": "If you do not specifically initialize an instance of a class, it will call the default constructor - in this case even if you do not set the upcard to a specific card, it will initialize to the two of spades (assume your Card.cpp is implemented correctly). You can initialize the variables if you want, but they will be initialized based on the default constructor anyway.\u00a0"}, {"id": 3796, "value": "@1699"}, {"id": 3797, "value": "As said below, spec -> trick taking -> value of cards"}, {"id": 3798, "value": "You should definitely be able to test it through either the command line or by changing the arguments in your debugger. Changing the arguments given shouldn't affect whether or not your code compiles.. . If you're getting compilation errors, it will not be because of the arguments you provide since arguments are only used with the executable."}, {"id": 3799, "value": "Did you write constructors for your simple player class?"}, {"id": 3800, "value": "If you are asking about make_trump, Jack of Diamonds would count as a trump face or ace for both hearts and diamonds. This is because when diamonds is trump, Jack of Diamonds is the right bower, and when hearts is trump, Jack of Diamonds is the left bower.. . As the instructor said face_or_ace only checks if the card is J,Q,K,A though."}, {"id": 3801, "value": "You are not required to write test cases for the human player functions, but you can test it locally if you wish to (and would definitely not hurt to do so)."}, {"id": 3802, "value": "Staff is aware of the issue and is working to resolve it, see @2131"}, {"id": 3803, "value": "resolved"}, {"id": 3804, "value": "It's impossible for both teams to get a point in one hand so both teams can't break the threshold at the same time. I just checked if either team was at or above the threshold after each hand"}, {"id": 3805, "value": "The autograder doesn't allow you to submit a 2nd submission while the first one is still running, so this message is just telling you that it's finished up with the \"core tests\" and you are allowed to submit another one now if you want. If it's being slow to run all of the tests, it's likely due to the error mentioned @2131 . This feature is so that people are able to make multiple submissions when the AG is under a high workload\u00a0"}, {"id": 3806, "value": "i got a string to suit error yesterday, i think it's pretty similar, it means ur some function in your euchre.exe is keep reading when it should not. for example, make trump read a suit or pass, but lead card and play card read a number, so if your lead or play card function read too much, they may read in a pass, then it doesn't match any rank"}, {"id": 3807, "value": "Changed visibility to private since you're sharing\u00a0a lot of code. It looks like many people have viewed this.\u00a0Please don't do this again.. . Generally, questions like these that involve showing a lot of code warrant coming into OH. I saw the error pretty quickly, but still come into OH in the future if you have questions similar in nature to this.. . In your Game ctor, when you add Player pointers to the players vector, you're deleting the player immediately, so the player can't be accessed. Then, if you access the player at any point, you're trying to use memory that you've deleted, which results in a segfault."}, {"id": 3808, "value": "Code given in starter files will never be considered an honor code violation, this is just fine!"}, {"id": 3809, "value": "False positives mean that your tests reported error when running against a correct implementation. If you don't know which test is causing the false positive (maybe you have multiple tests within one function), try submitting without suspicious tests and see if false positives reoccur. If you know which step is causing the false positive but don't know why it causes error, it is possible that your implementation does not 100% follow the spec and there may be a bug."}, {"id": 3810, "value": "The left bower is considered a card of the trump suit."}, {"id": 3811, "value": "Im fairly certian player_tests.cpp should only be simple player tests."}, {"id": 3812, "value": "Recall that, if trump is heart, then the Jack of Diamonds is a bower, so it is considered to be a heart.. . Because of this, Gabriel cannot follow suit, they must play the lowest card in their hand.. . Hope this helps!"}, {"id": 3813, "value": "Yes, saving your pack as a game member variable is a good idea."}, {"id": 3814, "value": "Just that whenever the function is virtual in parent class, it never works. I tried making a function that is not virtual and it did run the function in the parent class"}, {"id": 3815, "value": "For example, if you want to run. ./euchre.exe pack.in noshuffle 1 Adi Simple Barbara Simple Chi-Chih Simple Dabbala Simple\u00a0. You need to put \"euchre.exe\" as \"${workspaceFolder}/euchre.exe\" under \"program\", and other arguments under \"args\" (like [\"pack.in\", \"noshuffle\", ...])"}, {"id": 3816, "value": ""}, {"id": 3817, "value": "In (1), you're calling the function and saving the return value into led_card. If lead_card removes a card from the hand, then a card will be removed from the hand.. . In (2), you're calling the function twice, so yes, the function will be called twice. If the function removes a card from the hand both times, then 2 cards will be removed from the hand in total."}, {"id": 3818, "value": "You don't need to add protection. From the spec,. . You may assume all user input is correctly formatted and has correct values. You may also assume the user will follow the rules of the game and not try to cheat.. . "}, {"id": 3819, "value": "I would suggest looking around line 12 within your card.cpp and seeing if any functions are longer than 40 lines. If they are, you should break the code up into smaller helper functions."}, {"id": 3820, "value": "Make sure your Game constructor receives an `ifstream` **by reference**---it is refusing to copy a stream because that is not possible."}, {"id": 3821, "value": "I'm not sure if this is your problem, but in my scenario, my euchre_test50 was failing for Card, Pack, and Player, but passed for the default euchre_test50 autograder test. The problem was I had some code in Player that should have been in euchre.cpp and was not necessary for Player (some cout functions), so when the autograder used its version of Player, it didnt use the code I had in my Player that I was putting towards euchre.cpp. So I had to take the extraneous Player code and implement it into euchre.cpp.\u00a0. . Hopefully this helps"}, {"id": 3822, "value": "You can use redirection to have cin read from file rather then human input."}, {"id": 3823, "value": "In the second round of making, you no longer need to consider add_and_discard(). The dealer only adds the card during if the trump is made on the first round."}, {"id": 3824, "value": "Search results for this error imply that you might be putting executable statements (function calls by themselves) outside functions, but I don't see how that relates to constexpr and `RANK_NAMES`/`SUIT_NAMES`. If you are certain that you have no function calls by themselves outside functions next to these declarations, please make this post private and attach a screenshot of the error squiggle and the compile error (when you run `make Card_tests.exe`). . Edit: The solution was to [update the C++ standard](https://eecs280staff.github.io/tutorials/setup_vscode.html#intellisense-c-standard)."}, {"id": 3825, "value": "If you are using VSCode, you can follow the student's instructions according to the steps in [our VSCode setup guide](https://eecs280staff.github.io/tutorials/setup_vscode.html#input-redirection). Otherwise, find your IDE in our [tutorials](https://eecs280staff.github.io/tutorials/) and look for \"input redirection\"."}, {"id": 3826, "value": "maybe because of not having using namespace std;?"}, {"id": 3827, "value": "Adding to the instructors answer, you can also place conditional breakpoints. Rather then just creating an if with a breakpoint, you can add a conditional breakpoint, giving you the same functionally without needing to modify your code."}, {"id": 3828, "value": "There should be a reset function that you have written in pack.\u00a0"}, {"id": 3829, "value": "Looks like you've fixed the problem! I'll marked as resolved"}, {"id": 3830, "value": "It seems like a lot of students are facing problems with Autograder... we've still investigating the issue, but we are planning to grant some extra submits to accommodate for this. More details will be announced later on Piazza."}, {"id": 3831, "value": "You can call the first cardless in the second if you want, but you\u2019ll need to consider when you can call it.\u00a0. . And yes, you can create a helper function to replace the code duplicate. This is actually even good practice. Do remember to declare them static too."}, {"id": 3832, "value": "The initial value of `argc` is determined by the operating system as it loads this program, so we know for sure that at the instant when `main` begins running, `argc` is equal to 12. To isolate the cause, you could try writing:. . ```cpp. #include . int main(int argc, char** argv) {.   std::cout << argc << std::endl;. }. ```. Compile this into something like `argc_test.exe` and then run `./argc_test.exe pack.in noshuffle 1 Adi Simple Barbara Simple Chi-Chih Simple Dabbala Simple`. If the output is not 12, then the way you run those commands or the command-line shell might be at fault.. . (I know that the office hours queue will be excruciatingly long, but we would need to diagnose your environment further if the above steps don't help)"}, {"id": 3833, "value": "The overloaded insertion operator takes a reference to a Player, not an address."}, {"id": 3834, "value": "The functions given for the Game ADT are merely suggestions. You can change the parameters and types of the functions. But in general, you'd want a make_trump which loops through all four players and sees if any of them want to make trump (and do this for two rounds). . . The Player `make_trump` function takes in a round number as input, so just putting in the right number there will handle what suit the player is considering, assuming it's done correctly in the Player `make_trump`.. . Speaking of which, the simple player strategy is to consider the suit of the upcard on round 1, but to consider the *next* suit of the upcard on round 2 (i.e. the opposite suit of the same color, see `Suit_next` in `Card.h`)"}, {"id": 3835, "value": "The staff is aware of the issue and is working on granting extra submissions, an announcement will be made later, see @2131"}, {"id": 3836, "value": "Is your game variable a pointer? If so, you should be using -> instead of . (so, game->play())"}, {"id": 3837, "value": "Hard to tell without seeing your code, so maybe submit to autograder and have an instructor take a look, but here are some suggestions, from most likely to least likely:. . When you do something like pack[0] = pack[1], now, pack[0] and pack[1] are both equal, and if you did pack[1] = pack[2], now all three of them are equal. So, you can't just move the array around like that. You either need to use temporary variables to store the value of cards, or you can make a second array and just add cards into that, and then replace the original one.Are you ever assigning more than one at a time (for example, did you accidentally write something like pack[1]=pack[3], pack[2]=pack[3])How are you moving the cards around? No new cards should be made, only the locations of cards should be switched.. It's probably the first one, but if not maybe you can describe how you implemented it (without sharing too much info, just generally) in the followups and I can try to help.. "}, {"id": 3838, "value": "I would recommend using your debugger to pause when the last correct line gets printed (possibly using [conditional breakpoints](https://eecs280staff.github.io/tutorials/debugging_guide.html#conditional-breakpoints)) and then compare the players' hands to the explanation [here](https://docs.google.com/document/d/1zbyHnfIM1AT6-mfISJso5J2U49rdHX_SKEp8UGwUAdo/edit?usp=sharing) for any discrepancies. The tests may have exposed some edge case you did not account for correctly."}, {"id": 3839, "value": "Try setting `next` to 0 in the istream constructor. Not initializing can result in it being initialized to junk, which means that the code can sometimes work and sometimes not (undefined behavior)"}, {"id": 3840, "value": "It looks like your return statements are in the for loops when you probably meant to have them outside them. Also, be careful of initializing `highestNum` to 4 because `hand[4]` might not be a led suit card, and then you'd be comparing all led suit cards to an initial non led suit one."}, {"id": 3841, "value": "Spades stays the trump for the whole hand (1 hand = 5 tricks). The led suit changes every trick.. . So no, the trump is still Spades until the next hand starts and the cards are redealed."}, {"id": 3842, "value": "hand.size() has data type size_t which is unsigned. Yes you can change int i to size_t i to avoid this waring. You can also cast the data type from size_t to int like this int(hand.size())"}, {"id": 3843, "value": "You may want to create a temp variable to hold the value so you can return it after you erase it!\u00a0"}, {"id": 3844, "value": "Player_tests.cpp shouldn't have an effect on your euchre_test00.out file, except for the fact that it might catch an error in your code. So, you should keep your old tests (the ones that worked with the autograder), and just try to fix your code.. . . If the led suit is jack of spades and trump is heart, and the player have jack of clubs and king of spades, which card would the player play?. . The player would be forced to play king of spaces, because you have to play the a card from the led suit if you can."}, {"id": 3845, "value": "Could you step through the code with breakpoints to see what line is called just before the exception is thrown?"}, {"id": 3846, "value": "This looks like undefined symbols rather than undefined behavior. Undefined symbols is a compiler error which means the compiler doesn't recognize certain variables or functions. Undefined behavior happens at runtime and is the result of bad coding practices (e.g. indexing out of bounds, leaking memory).. . It seems like you haven't implemented your == and "}, {"id": 3847, "value": "There aren't actually two empty lines there, its just showing that to make space for the extra lines you printed in your output file. Let me explain:. . Here is a guide on what the symbols mean. So for yours:. . . It looks like some changes earlier in the file caused your lines to be mismatched. So sdiff corrects this for you.\u00a0) means that only the second file contains the line, but the difference is ignored. The reason it does this is to be able to line up the two lines that are actually different (the ones connected by the third red line). So\u00a0| denotes that the two lines are different.. . Also, it looks like you have an extra whitespace after \"Edsger orders up Clubs\", which is what\u00a0> means.. . So, summarizing, your only differences (from this screenshot) are:. \"Edsger orders up Clubs\" should be \"Edsger orders up Spades\"there is an extra line after \"Edsger orders up Clubs\". And then you also have some differences earlier in the file."}, {"id": 3848, "value": ". So, before you deal, you have to shuffle the pack correct?. . Yes. . . . Then, at the end of the function, do you have to reset the pack?. . You can do it there or at the end of each hand, either one should work.. . . . Would I shuffle it in deal or in main before I call deal?. . Either one works, you just have to shuffle before you deal.. "}, {"id": 3849, "value": "Try running your code through CAEN, just make sure that you remove address sanitizer first, because those two wont work together.. . "}, {"id": 3850, "value": "You shouldn't do `#include \"Pack.h\"` in the tests or `Player.cpp`."}, {"id": 3851, "value": "Is your code missing the last line? Run the code on your own computer and check that you are actually printing \"Adi and Chi-Chih win!\" in euchre_test00.out"}, {"id": 3852, "value": "Per this resource: https://cplusplus.com/reference/string/string/string/.. . You can construct a c++ string by passing in a c style string pointer.. . Ex. string a(p);. . Where p is a pointer to a c string."}, {"id": 3853, "value": "Euchre_test50 utilizes human players whereas the other two public tests use simple players, I would recommend making euchre.exe in your terminal, then running. . $./euchre.exe pack.in noshuffle 3 Ivan Human Judea Human Kunle Human Liskov Human < euchre_test50.in > euchre_test50.out. . $ sdiff -B euchre_test50.out.correct euchre_test50.out\u00a0. . this will compare the difference in output, then you can properly what is different - it would be impossible to tell what is wrong without seeing your code directly"}, {"id": 3854, "value": "You can't set arrays equal to each other in this way. You have to instead loop through one array and copy each individual Card into the other. You can, however, do something like Card copycard = card;"}, {"id": 3855, "value": "yes the dealer keeps rotating 0-1-2-3-0-1-2-3 etc until the end of the game"}, {"id": 3856, "value": "Yes, but not because Jack of Clubs is a lower value.. . First, you check if you can follow suit. If you can, you play the highest value in the suit. Jack of Clubs is a left bower, and so it is actually part of the spades suit. Jack of Diamonds is not in the suit so it is not considered. So you are only allowed to play Jack of Clubs.. . Now, just to explain this fully, let's say your led card was ten of hearts. Then, you can't follow suit, so you play the lowest card. So you would play the Jack of Diamonds, since Jack of Clubs is more powerful (since it's the left bower)."}, {"id": 3857, "value": "You can create human players and test their names for example, but there is no way that you may control what the human player wants to play in the game. However, you can write your own human player test cases to test your own code locally."}, {"id": 3858, "value": "That's a design choice and is completely up to you."}, {"id": 3859, "value": "The line number just gives you the line of where the offending function starts. It looks like it's flagging the if>for>if>if (last if in line 207)."}, {"id": 3860, "value": "You should find a way to utilize the custom Pack constructor that takes in an istream argument. The logic to get to that point should be similar to how we used ifstreams in p2."}, {"id": 3861, "value": "I am having the exact same issue"}, {"id": 3862, "value": "Is there a way you can consolidate the player names and/or strategies into a single data structure that you can pass in?"}, {"id": 3863, "value": "Follow the spec exactly as it says, if the led suit and trump are not equal, play the lowest trump. If the led suit and trump are equal, play the highest card."}, {"id": 3864, "value": "No"}, {"id": 3865, "value": "What you said seems reasonable."}, {"id": 3866, "value": "Resolved"}, {"id": 3867, "value": "The error is saying that the offending function start on line 60. It seems like the second block you stated is the problem. I believe this is because even though the if/for depth is 4, the function itself is nested within the class, making it have depth 5."}, {"id": 3868, "value": "Try something like:. . Card a(QUEEN, HEARTS);. "}, {"id": 3869, "value": "In your for loop, you may want to add an empty space after you print out each argument (something like cout << \" \")"}, {"id": 3870, "value": "You shouldn't use libraries other than what's listed [here](https://eecs280staff.github.io/p3-euchre/#requirements-and-restrictions)["}, {"id": 3871, "value": "You are allowed to add any member variables and functions to the Game ADT that you'd like. The design is up to you, as long as it gives the correct output without undefined behavior"}, {"id": 3872, "value": "The original pack is used throughout the entire game; at the end of each hand, you'll reset the pack with the provided method, and before each hand you will shuffle the same pack (assuming \"noshuffle\" was not entered as one of the game options)."}, {"id": 3873, "value": "Note you've created a player pointer that has specified the strategy and the name of that player. Once you've read in a pack of cards, you need to need these cards to each players hand. What function do the player classes contain that might help you here?"}, {"id": 3874, "value": "Found this answer online, maybe it will work: Set the environment variable MallocNanoZone to 0.. . Here is how you set environmental variables in Xcode. "}, {"id": 3875, "value": "Try saving the index of the leader every round, then you use the modulus operator to find who goes second, third and fourth.. . For example, say the leader is index leader_index in the vector. Thus, you can use. second_player = (leader_index + 1) % 4;. to find the index of the player who plays the second card."}, {"id": 3876, "value": "You cannot make changes to Player.h. Also, why do you need to store the types? The coolthing about inheritance/polymorphism is that once you create the objects, you can just treat them as the base class without having to implement any derived-class-specific logic. Further specializing would likely make your implementation more complicated."}, {"id": 3877, "value": "Check out these posts: @1939 @1826"}, {"id": 3878, "value": "It looks like your PlayerFactory uses custom constructors that take in a string parameter, but you haven't defined them."}, {"id": 3879, "value": "It's failing at line 35 of Card.cpp. What's that line?"}, {"id": 3880, "value": "They will play Jack of Spades. For game purposes, left bower is considered to be of trump suit.\u00a0. . Side note: max card per hand is 5"}, {"id": 3881, "value": "You're probably getting issue because the RME comments are also identical between the functions. If you remove the duplicated RME, then I think you may be all good."}, {"id": 3882, "value": "It's hard to tell exactly what the problem is by looking at a picture.. The general strategy is: whenever you have no idea where the problem is, set a breakpoint at the very beginning of your main function(since this is where your program starts running) and step through your code. Once you hit a segfault, the program will halt and you know where the error occurs. And as to what causes this error, you could progressively move the starting breakpoint from the beginning to the line of failure, each time making sure a small region of code works fine and narrowing down the buggy region."}, {"id": 3883, "value": "You should try to write tests for each function that you implement in Player. There isn't really a requirement, but that's the best strategy when trying to catch all of the bugs."}, {"id": 3884, "value": "It could just be a weird IDE thing, sometimes IDEs don't recognize a variable name or something and won't color it correctly. If your program compiles in the terminal, then you're good to go. You can also try closing and reopening your IDE."}, {"id": 3885, "value": "You should not implement any function in the Player class as it is an abstract class and is only meant to be derived from.. . You should be creating a HumanPlayer and SimplePlayer class, both of which derive from the Player class. Then, for both SimplePlayer and HumanPlayer, you must at least implement all of the functions that are outlined in Player (because we derive from Player, and Player is an abstract class so we must implement all of them). You can add more functions if you see a need for them, but it's not required."}, {"id": 3886, "value": "I also made this mistake recently. Yes diamonds is the trump suit. This makes Jack of Hearts the left bower which is also a diamond. Thus, in Line 67 when Edsger leads Jack of hearts, the lead suit for that trick is actually diamonds, so Fran can follow suit, so she should play her Diamonds."}, {"id": 3887, "value": "Both the Simple player and Human player lead card functions should determine what card the player wants to lead with (look at spec for simple player logic, human player will enter through command line) and remove that card from their hand."}, {"id": 3888, "value": "Simple player is just a computer that will never print out its cards, so there's no need to sort them."}, {"id": 3889, "value": "Make sure you set the Custom Working Directory in XCode."}, {"id": 3890, "value": "We cannot disclose specifics on what types of tests will expose certain bugs. All we can suggest is that you continue to write test cases keeping the spec and RMEs in mind."}, {"id": 3891, "value": "You should use cout statements in your game class. I believe you are referring to input and output redirection, meaning that you can call your euchre game like . . ```. ./euchre.exe pack.in noshuffle 3 Ivan Human Judea Human Kunle Human Liskov Human  euchre_test50.out. ```. . This will use the `euchre_test50.in` file as the input for your game automatically and then output everything to the `euchre_test50.out` file (it will create the file if it doesn't already exist). Anytime that you use `cout` in your code it will either print to your terminal OR it will print to the file if you have specified."}, {"id": 3892, "value": "Resolved"}, {"id": 3893, "value": "Even though it looks like Edsger leads with hearts, because it is the Jack of Hearts it's the left bower, and the left bower is *always treated* as if it were the suit of the same color (in this case Diamonds). So the led suit is actually Diamonds, and because of that Fran must follow suit with the Nine of Diamonds. This is a tricky one so let me know if you have questions!"}, {"id": 3894, "value": "This appears to be an issue where you accessed data off the end of a `std::array`. Try using a debugger to see where this error stemmed from, and double check your logic for calculating that index!"}, {"id": 3895, "value": "It looks like you've fixed the issue? Let us know if it persists."}, {"id": 3896, "value": "I think you're allowed to reuse up to 100 tokens of code, so you might just have sections that are too long that are being reused. making a helper function to call instead might help"}, {"id": 3897, "value": "yes"}, {"id": 3898, "value": "You should use cout. Using redirection will automatically change the behavior of cout to write to a given file instead for comparing with the correct file."}, {"id": 3899, "value": "You're allowed to design your testing however you want! By the sounds of it, it seems like you are implicitly testing play card through your other tests.. . The autograder doesn't care if you do or don't have an individual test for each function, only if you catch the bugs or not."}, {"id": 3900, "value": "resolved, they gave us extra days and extra submissions\u00a0"}, {"id": 3901, "value": "Make sure to include algorithm before you call the sort function."}, {"id": 3902, "value": "Besides those 4 and the error with opening file, you can assume everything else is in the correct format\u00a0"}, {"id": 3903, "value": "See followups."}, {"id": 3904, "value": "Each of your players should have a hand. You could just loop and print the hand.\u00a0"}, {"id": 3905, "value": "It seems like you've fixed the issue according to the autograder? Let us know if it persists."}, {"id": 3906, "value": "@2036"}, {"id": 3907, "value": "Yes, this is correct, the suit of the upcard is the new trump"}, {"id": 3908, "value": "It should look something like this: args: [\"pack.in\", \"noshuffle\", ..., \"<\", \"euchre_test50.in\", \"<\", \"euchre_test50.out\"]"}, {"id": 3909, "value": "These are called conditional breakpoints.. VS CodeVisual StudioXcode. For each of these, you could have the condition be i==3"}, {"id": 3910, "value": "Take a look at the lecture notes, but when implementing a virtual function you don't write virtual, and before the curly bracket of the function you need to write override. For example, if I had a function called virtual Bird talk const in my bird class, then I would need to write in my chicken class which is like a derived class from the base class bird then I would write Bird talk const override { ...Implementation...} Also, the unused variable comes when you don't use the variable anywhere else, so you declare it, but you don't use it. Hope this helps.\u00a0"}, {"id": 3911, "value": "@2036"}, {"id": 3912, "value": "yes @2036"}, {"id": 3913, "value": "I think I had a similar error and it was because I didn\u2019t include \u201cpublic\u201d when I inherited my class. Maybe check that?\u00a0. . class Human : public Player\u00a0"}, {"id": 3914, "value": "It would be reasonable to store the played cards in a vector and compare. There\u2019s also the option of just calling cardless every time and storing only the highest card. I think it comes down to a design choice.\u00a0. . Also, for your follow up, yes doing !cardless works, but also do think about what happens if you swapped a and b. That basically tells you whether b is less than a, or in other words, a >= b."}, {"id": 3915, "value": "@2036I am having the same error too.\u00a0"}, {"id": 3916, "value": "@2036I also got the same error"}, {"id": 3917, "value": "It seems like you've fixed this? Let us know if you're still facing the issue."}, {"id": 3918, "value": "@2036"}, {"id": 3919, "value": "Marking this as resolved since it seems you've fixed it, but let us know if there's still issues."}, {"id": 3920, "value": "Typo. Herb has 10 of spades not 9 of spades."}, {"id": 3921, "value": "argv[1] is a c-styled string and not a c++ string. You need to cast argv[1] into a c++ string using something like string(argv[1]) and then assign its value to input_filename."}, {"id": 3922, "value": "I doubt it. Everything part of the project 3 checkpoint has to be submitted for the main submission anyway, and the tests that are run on those files are also run during the main submission. So you would've had to do that work anyway."}, {"id": 3923, "value": "Make sure you are not dereferencing a nullptr. Specifically, double-check that the Player pointer p has already been created."}, {"id": 3924, "value": "Resolved"}, {"id": 3925, "value": "The name, as a member variable, should be initialized in your derived class constructor."}, {"id": 3926, "value": "Make sure there is a semicolon after the class. "}, {"id": 3927, "value": "Try to have Game take in the fstream by reference rather than value. That might fix your error, as it would no longer try to copy the stream."}, {"id": 3928, "value": "You need to shuffle the deck before dealing at the start of each Hand. So, the upcard should be different because after each hand concluded, we don't reset and reshuffle the deck. BUT we continue shuffling the already shuffled deck."}, {"id": 3929, "value": "Resolved"}, {"id": 3930, "value": "You opened your project with root user. Try reopening it with your regular user access."}, {"id": 3931, "value": "You should manually test to see if it gives out the correct errors for incorrect inputs. Other than that, since all methods except play() should be private, I don't think you could really test it. Unless you started playing games with 4 humanplayers and putting inputs yourself to see if it scores correctly.\u00a0"}, {"id": 3932, "value": "It looks like you're indexing out of bounds in make_trump."}, {"id": 3933, "value": "You're calling add_card in add_and_discard when the player should have a full hand, which explains why the assertion is failing.. . If you have further questions about how you should modify what you have, come to OH, and we'll be happy to help."}, {"id": 3934, "value": "Did you update to the latest version of those functions detailed in Change Log in the spec? Depending on your Pack constructor implementation, you may need to update those functions to the latest version provided."}, {"id": 3935, "value": ". When a Simple Player leads a trick, they play the highest non-trump card in their hand. If they have only trump cards, they play the highest trump card in their hand.. . . Since a simple player will play the highest non-trump card in their hand, they would play the highest ace in this case (D>C>H>S). Card_less would return either true or false, depending on which is lower than the other."}, {"id": 3936, "value": "The trump suit can be equal to the led suit since the led suit will change every trick but the trump suit will remain the same for the whole hand. The left bower is the Jack of the suit of the same color as the trump suit. So if the trump suit was hearts then the Jack of hearts would be the right bower but the Jack of diamonds would be the left bower, no matter if the led suit of that trick was diamonds, hope this helps!\u00a0"}, {"id": 3937, "value": "It may just be that your output is wrong (ie. you're missing \"Ten of Diamonds played by Edsger\"). Otherwise, I would ctrl-F for every time you print endl."}, {"id": 3938, "value": "I have a similar problem, and I found that my Card_less function is buggy. I got 14/14 for my Card_tests.cpp, so I never thought my Card.cpp would be buggy but it was. So, if you have no idea where to check, maybe try to doublecheck your Card_less for potential bugs.. . More info: For Hand 6, Gabriel is the dealer, and the trump should be heart. So, if Gabriel has a 10 of clubs when he should have 9 of hearts. This could also mean there is a problem with add_and_discard function (as 10 of clubs should be discarded, not 9 of hearts), or any other function that add_and_discard depends on. Or, you may also forget to call add_and_discard when needed"}, {"id": 3939, "value": "The jack of hearts is the left bower when diamonds is trump, so the jack of hearts is actually a diamond in this case. Fran would follow the suit of the led card, which is diamond, so she would play diamond."}, {"id": 3940, "value": "player[1]"}, {"id": 3941, "value": "In TEST(test_simple_player_add_and_discard_cannot_follow_suit) I think your error happens on play 3. If a Simple Player can follow suit, they play the highest card that follows suit. You lead with the 9 of clubs, and clubs is the trump suit. Therefore, the highest card that can follow suit is the Jack of Spades because it is the left bower (not the King of Clubs).\u00a0"}, {"id": 3942, "value": "It seems like you\u2019re trying to compare a Rank with a Suit. Did you use a struct to store those two and directly compare them? Maybe that\u2019s causing an issue."}, {"id": 3943, "value": "The explanation is right but not because it was dealt to him. Fran orders up Hearts in round 1 so the dealer gets to take the upcard and choose to discard a card from his hand. That\u2019s why it ends up in his hand."}, {"id": 3944, "value": "It's not clear from your picture which assert_equal you're failing. Could you give a little more context?"}, {"id": 3945, "value": "I would recommend running your code with address sanitizer locally to determine the cause of the undefined behavior. It could be something wrong with the initialization of your pack or how you are reading it in from the istream; sanitizer should help narrow down the causes."}, {"id": 3946, "value": "It would be since autograder compares your output to the correct output. You should sort your hand to make it the same."}, {"id": 3947, "value": "The first set of tests uses all of your files. The second set of tests uses the instructor solution for Card, Pack, and Player, but it uses your implementation of euchre.cpp. If you pass the former but not the latter, you're likely not respecting the interface for the Card, Pack, and/or Player files."}, {"id": 3948, "value": "Since we're using Player pointers in euchre.cpp, we can't access any members of Simple or Human players that don't also exist in Player.h without downcasts. I'd argue that this will make your euchre.cpp unnecessarily complicated, and you should be able to do everything necessary with just the Player functions. What is a case where a SimplePlayer's hand should be modified externally? And even if there is such a case, what would make it different from a HumanPlayer's use case?. . Also, if you expose a function setPlayerHand to be public, then you can modify the player's hand from pretty much anywhere, which becomes another thing to keep track of. It would be a lot cleaner to only modify the hand within the SimplePlayer class itself.. . Final note. Even if you wanted to use explicit downcasts in euchre.cpp, the AG may not even allow you to #include \"Player.cpp\", and then you won't have any way of accessing these extra functions anyway."}, {"id": 3949, "value": "The only time you should be sorting the vector is right before you print the hand.. . "}, {"id": 3950, "value": "Make sure you provided function definitions for every function in Player.h, especially the ones marked as virtual"}, {"id": 3951, "value": "When you use the delete keyword on a pointer, you are calling the program to delete the objects in the memory place where your pointer is pointing to. I personally would just create the players inside constructor for the game class and delete them at the end of play(). . . If you want to create player pointers outside of the Euchre class and pass them in, you can call on delete for each pointer at the end of the play() function, or you can delete the players after the game logic has ended and returned to main (but you need to keep a copy of those addresses so you can call delete on each of them at the end of the main function)."}, {"id": 3952, "value": "The error is saying that you go out of bounds in play_card, actually! I would run through your debugger with this example. You're likely going out of bounds of the size of the player's hand when trying to find the card to play."}, {"id": 3953, "value": "You don't necessarily need to use empty(). It might be helpful for assertions in your test cases."}, {"id": 3954, "value": "For same ranks, ties are broken by Spades < Hearts < Clubs < Diamonds. So first you would compare the ranks. If they have same ranks, compare the suits."}, {"id": 3955, "value": "If you call a function to just print something, you probably wouldn't expect it to modify anything, right? So yes, to be able to print a sorted hand, it should be sorted before you call print.. . Really, though, when do you ever really need to sort it? If it's already sorted, then you don't need to sort it again. You really only going to need to sort when the hand is modified, right? But also, if you remove a card from a sorted hand and don't change ordering, then it should still already be sorted. That leaves one case for when you need to sort."}, {"id": 3956, "value": "You want to make an instance of your game class, and then you can the dot operator to call the member functions"}, {"id": 3957, "value": "resolved"}, {"id": 3958, "value": "You need to use a static cast to convert\u00a0rank and\u00a0suit from integers to enum types"}, {"id": 3959, "value": "you need to edit your launch.json to use the debugger. for example, if you wanted to debug the first test (euchre_test00), with those inputs, you edit this line of the debugger:\u00a0. . \"args\": [\"pack.in\", \"noshuffle\", \"1\", \"Adi\", \"Simple\", \"Barbara\", \"Simple\", \"Chi-Chih\", \"Simple\", \"Dabbala\", \"Simple\"],. . . this basically tells the debugger what to input as arguments when it runs the selected file. Then, you should just be able to run the debugger and be able to see what is going on as you normally would.\u00a0"}, {"id": 3960, "value": "Your discarding is correct if the trump is Hearts. But, the proposed trump will be diamonds at first. So in round 1, simple player wouldn\u2019t accept it since they only have 1 trump card (Jack of hearts). In round 2, however, the proposed trump switches to hearts and you would discard 10 hearts since Jack of Diamonds is the left bower. Also, you would play the highest trump card if all your cards are trump. Assuming Hearts is trump, you would play in this order Jack of hearts, Jack of diamonds, ace, king, queen of hearts."}, {"id": 3961, "value": "Since the trump suit is diamonds, that means the jack of hearts is also the trump suit (left bower), so the led suit for that first trick is diamonds. Fran follows suit by playing the nine of diamonds, which is why Fran discards it instead of the ten of spades."}, {"id": 3962, "value": "Trump suit can be the same as the lead suit."}, {"id": 3963, "value": "That seems reasonable to me"}, {"id": 3964, "value": "Resolved"}, {"id": 3965, "value": "Resolved"}, {"id": 3966, "value": "The player to the left of the dealer is the eldest hand. Since the game is played clockwise (i.e. the current player's left plays next), we define an increment in index (0 --> 1) to represent that order. In your example, yes, Barbara is the eldest hand if Adi deals."}, {"id": 3967, "value": "Using the insert operator into an object of type card will do whatever the insert operator is defined to do for that type. For card, you are meant to define it to read in all the info for 1 card, meaning all the words to get the rank and the suit."}, {"id": 3968, "value": "I would double check `operator!=` or `operator"}, {"id": 3969, "value": "From the spec:. . March: When the side that made trump* wins all 5 tricks.. Euchred: When the side that didn\u2019t make trump* wins 3, 4, or 5 *tricks.. . . Since they didn't make trump, they cannot march, they can only euchre."}, {"id": 3970, "value": "I would check when you create the pack -- are the cards being created properly? When you shuffle the deck, are the cards still stored in the pack correctly (not as addresses?)"}, {"id": 3971, "value": "You can add whatever helper functions you want, it wont be an issue. BTW the spec suggests making the private."}, {"id": 3972, "value": "For forloops in your lead_card function, how are you setting your bounds? Make sure you aren't just iterating from 0 to 4 (for a hand size of 4). . I suggest using address sanitizer which is good at finding memory errors."}, {"id": 3973, "value": "\u201c\u00a0In the simplest case, cards are ordered by rank (A > K > Q > J > 10 > 9), with ties broken by suit (D > C > H > S).\u201d \u2014 spec"}, {"id": 3974, "value": "I'm thinking your order_up_suit variable isn't being set properly, since it's having trouble passing it to the insertion operator overload. I would reccomend setting a breakpoint at the line the error has, and inspecting the variables section of the debugger to see what order_up_suit is being set to. The issue may be with how you initialize order_up_suit, or how it's set in make_trump."}, {"id": 3975, "value": "For a simple player, yes. For a human player it is a bad idea since you're supposed to print out the hand without the upcard in it."}, {"id": 3976, "value": "Could you try to create an instance of your game class by doing Game Euchre(fin, ...);. rather than Game Euchre = Game(fin, ...)?"}, {"id": 3977, "value": "< denotes that the line is only in the first file (\"Adi and Chi-Chih have 2 points\" is only in the left file).. . | means that the lines are different (\"euchred!\" is different from \"Adi and Chi-Chih have 1 points\" are different).. . Together, these just mean that in the first file the following:. . euchred!Adi and Chi-Chih have 2 points. . was replaced with. . Adi and Chi-Chih have 1 points. "}, {"id": 3978, "value": "Yes. @1837"}, {"id": 3979, "value": "You should never have to do this (you can call the same methods for both and just have differences within the methods), and also in general, you just shouldn't do this because it is better to just \"Tell, Don't Ask\" when working with polymorphism.. . If you really really wanted to, then you could do something like this, with dynamic casts."}, {"id": 3980, "value": "You can read them as is."}, {"id": 3981, "value": "@1813"}, {"id": 3982, "value": "This seems like something to ask in OH. However, your points-to-win checking seems like it could be problematic. Consider using\u00a0atoi."}, {"id": 3983, "value": "Check @1699, this is probably because you're calling sort in a const function."}, {"id": 3984, "value": "In shuffle no. 1. Nine of ClubsNine of SpadesTen of ClubsTen of SpadesJack of ClubsJack of SpadesQueen of ClubsQueen of SpadesKing of ClubsKing of SpadesAce of ClubsAce of SpadesNine of DiamondsNine of HeartsTen of DiamondsTen of HeartsJack of DiamondsJack of HeartsQueen of DiamondsQueen of HeartsKing of DiamondsKing of HeartsAce of DiamondsAce of Hearts. . In shuffle no. 2. Nine of DiamondsNine of ClubsNine of HeartsNine of SpadesTen of DiamondsTen of ClubsTen of HeartsTen of SpadesJack of DiamondsJack of ClubsJack of HeartsJack of SpadesQueen of DiamondsQueen of ClubsQueen of HeartsQueen of SpadesKing of DiamondsKing of ClubsKing of HeartsKing of SpadesAce of DiamondsAce of ClubsAce of HeartsAce of Spades. . In shuffle no. 3. Queen of DiamondsNine of DiamondsQueen of ClubsNine of ClubsQueen of HeartsNine of HeartsQueen of SpadesNine of SpadesKing of DiamondsTen of DiamondsKing of ClubsTen of ClubsKing of HeartsTen of HeartsKing of SpadesTen of SpadesAce of DiamondsJack of DiamondsAce of ClubsJack of ClubsAce of HeartsJack of HeartsAce of SpadesJack of Spades. . In shuffle no. 4. King of HeartsQueen of DiamondsTen of HeartsNine of DiamondsKing of SpadesQueen of ClubsTen of SpadesNine of ClubsAce of DiamondsQueen of HeartsJack of DiamondsNine of HeartsAce of ClubsQueen of SpadesJack of ClubsNine of SpadesAce of HeartsKing of DiamondsJack of HeartsTen of DiamondsAce of SpadesKing of ClubsJack of SpadesTen of Clubs. . In shuffle no. 5. Ace of ClubsKing of HeartsQueen of SpadesQueen of DiamondsJack of ClubsTen of HeartsNine of SpadesNine of DiamondsAce of HeartsKing of SpadesKing of DiamondsQueen of ClubsJack of HeartsTen of SpadesTen of DiamondsNine of ClubsAce of SpadesAce of DiamondsKing of ClubsQueen of HeartsJack of SpadesJack of DiamondsTen of ClubsNine of Hearts. . In shuffle no. 6. . Jack of HeartsAce of ClubsTen of SpadesKing of HeartsTen of DiamondsQueen of SpadesNine of ClubsQueen of DiamondsAce of SpadesJack of ClubsAce of DiamondsTen of HeartsKing of ClubsNine of SpadesQueen of HeartsNine of DiamondsJack of SpadesAce of HeartsJack of DiamondsKing of SpadesTen of ClubsKing of DiamondsNine of HeartsQueen of Clubs. . In shuffle no. 7. King of ClubsJack of HeartsNine of SpadesAce of ClubsQueen of HeartsTen of SpadesNine of DiamondsKing of HeartsJack of SpadesTen of DiamondsAce of HeartsQueen of SpadesJack of DiamondsNine of ClubsKing of SpadesQueen of DiamondsTen of ClubsAce of SpadesKing of DiamondsJack of ClubsNine of HeartsAce of DiamondsQueen of ClubsTen of Hearts. . . If my algorithm is correct (which I think it is but it could be wrong) then this is what I get. "}, {"id": 3985, "value": "For anyone else wondering, Fran does not discard the nine of hearts, because he is never given the option. Fran orders up hearts, but Edsger is the dealer, and add_and_discard is called on him. Edsger does not discard the nine of hearts either."}, {"id": 3986, "value": "The players vector (proposed by the spec) has Player pointers. Take a look at the Polymorphism lecture slides on how to get base class pointers that refer to instances of a derived class."}, {"id": 3987, "value": "Make sure you're using namespace std."}, {"id": 3988, "value": "Make sure you're declaring the derived classes as deriving from a public Player. For example,. . class SimplePlayer : public Player {. \t// .... };"}, {"id": 3989, "value": "Yes."}, {"id": 3990, "value": "Have you included the necessary header files in `Card.cpp`?"}, {"id": 3991, "value": "You don't have to create a `player` object in any of the player class functions. If you're referring to setting a player to represent the dealer in the driver program, I wouldn't recommend defining a player as the dealer either (as players take turn to be dealer in a game)."}, {"id": 3992, "value": "You need to define a virtual destructor for a simple player. Think about if you have to do anything in the destructor."}, {"id": 3993, "value": "Have you initialized all member variables of the `Pack` class in your `istream` constructor?"}, {"id": 3994, "value": "The statements should math exactly with what's shown in the spec under Example with Human Players."}, {"id": 3995, "value": "I'd recommend using a debugger to get to this part of execution and seeing what the state of the player's hand looks like. You may be having some error in erasing the played card from the hand. It could also be an error in euchre.cpp where you do some processing of the played card before printing it."}, {"id": 3996, "value": "Check to make sure all the functions are exactly the same, including return type, function name, parameters, and whether or not it\u2019s const. Also, make sure you don\u2019t have \u201c= 0\u201d copied over from Player.h."}, {"id": 3997, "value": "Just to add on to the students' answer, if the setting is noshuffle, then you would reset the pack at the start of each hand as well."}, {"id": 3998, "value": "Check out @1699, the short of it is that you are probably calling `sort` on a class member variable in a const function (probably make trump)."}, {"id": 3999, "value": "1. Delete your `launch.json`. 2. Follow the new platform-specific [macOS create `launch.json`](https://eecs280staff.github.io/tutorials/setup_vscode.html#macos-create-launchjson). 3. Try again to configure [macOS input redirection](https://eecs280staff.github.io/tutorials/setup_vscode.html#macos-launchjson-changes). . The root cause of this problem is a `launch.json` that's configured to use the Microsoft C/C++ extension instead of the CodeLLDB extension.  It was an easy mistake to make because in retrospect, the instructions could have been better (my fault -- awdeorio).  I fixed the instructions so now there are separate sections for macOS and Windows `launch.json` setup.. . Sorry for the confusion!  Please let me know if I missed anything in the fresh tutorial update.. . ----. stdio i don't believe is a valid launch.json field. If you want to do input and output redirection do . . ```. .... \"args\": [\"pack.in\", \"noshuffle\", \"1\", \"Adi\", \"Simple\", \"Barbara\", \"Simple\", \"Chi-Chih\", \"Simple\", \"Dabbala\" ,\"Simple\", \"\", \"euchre_test50.out\"],. .... ```"}, {"id": 4000, "value": "You can use the commands on the top of these files to run the test and compare it with the correct output we've provided with you.. "}, {"id": 4001, "value": "it shouldn't matter, since you are discarding the lowest card (first element in the vector) so sort wouldn't change anything, because the rest are still in order.."}, {"id": 4002, "value": "You don't need to delete ptr in player_factory(). You will be deleting the ptr returned by player_factor() when you later call the function in your driver's program.\u00a0"}, {"id": 4003, "value": "This means you have some function which is too long in your code. Specifically your euchre.cpp has a function with 47 non-comment lines when it should have a maximum of 40. Try to further break up your code into functions."}, {"id": 4004, "value": "yes and yes"}, {"id": 4005, "value": "You could create a player vector in your main function, and then pass that into game."}, {"id": 4006, "value": "My understanding is it's not saying you should always discard the upcard, it's saying when the upcard you picked is the lowest card in your hand, then u should discard it. that's why it says\"(or -1 if they want to discard the upcard)\".\u00a0"}, {"id": 4007, "value": "If the cards are neither the led or trump suit, you would compare the cards as normal: ranks (A > K > Q > J > 10 > 9), with ties broken by suit (D > C > H > S). So, you should get true if the jack of hearts is less than the jack of diamonds."}, {"id": 4008, "value": "Changing visibility to private since this is very specific to your test cases.. . In test_less_than, take another look at the last assert statement. In test_less_than_equal, take another look at the third assert statement."}, {"id": 4009, "value": "That's correct. But since the dealer for each hand is different (rotate to the left), all players will get different cards for each hand."}, {"id": 4010, "value": "I initialized a card, and then used ostringstream and istringstream to take in strings. Then, you can just use ASSERT_EQUAL() to compare it with the desired string output.. "}, {"id": 4011, "value": "We need to reset it. In other words, for each hand there will be 3 (excluding the upcards) unused cards."}, {"id": 4012, "value": "can you be more specific as to what functions in your test file were marked as false positives?"}, {"id": 4013, "value": "Well, here's the order that the cards are in from highest to lowest:. Right bower (jack of trump). Left bower (jack of other color of trump). Ace of trump. .... Nine of trump. Ace of led. .... Nine of led. The rest of the cards are just compared normally (you can use <, >, etc. for them). . If the trump suit is equal to the led suit, its the same thing, just remove the \"Ace of led ... Nine of led\". . So start by checking if the cards are right/left bowers, in trump/led suit, etc.\u00a0. . Hope that helps!"}, {"id": 4014, "value": ". One of the private tests uses it.. . Aside from that, I assume that it just exists to have a full implementation of a pack of cards (or rather, a pack of cards with only the ones used in euchre).\u00a0"}, {"id": 4015, "value": "resolved"}, {"id": 4016, "value": "You can't set breakpoints in vscode and debug from terminal. You will have to use GDB (or LLDB on mac) if you want to debug from the terminal"}, {"id": 4017, "value": "You shouldn't be implementing function in the player class directly. You should creates 2 child classes for Simple player and human player and overrides virtual functions from the player class. Also, make sure to include \"Player.h\" in you player.cpp"}, {"id": 4018, "value": "I believe you are calling the function slightly wrong. If suit_a is a suit, then you should pass it into the function since is right bower takes in a suit which it treats as the trump suit. You are using suit_a as a card and a suit in this function call. If you are trying to determine if the card is right bower, make sure you have a Card c declared and a Suit trump declared. You would call it c.is_right_bower(trump) I believe in that case. Hope that helped!"}, {"id": 4019, "value": "Check out this post @1599"}, {"id": 4020, "value": "Yes, the operator functions do not consider trump, so the order is how it is in pack.in. Cards are ordered by rank (A > K > Q > J > 10 > 9), with ties broken by suit (D > C > H > S)."}, {"id": 4021, "value": "Really, the structure of the Game class is entirely up to you. However, it can be really helpful to make smaller functions that perform smaller steps. Duplicating code isn't great, so you should definitely call the functions you've already implemented when you can. If you think that shuffling in the Game class isn't big enough to warrant its own function, then you don't have to."}, {"id": 4022, "value": "Set visibility to private since you've included an entire function. In the future, please don't make public posts with chunks of your own code.. . The purpose of operator>> is to be able to read in a\u00a0Card. Currently, you're reading at most the rank into\u00a0str\u00a0and nothing more, but we really need to read the rank, the \"of\" in between, and the suit. Think more carefully about what you're actually trying to do.. . You should be reading in something in the format of \"<rank>\u00a0of\u00a0<suit>,\" and this should modify the rank and suit of\u00a0card. We've also provided functions\u00a0operator>>(std::istream &is, Rank &rank) and operator>>(std::istream &is, Suit &suit), and you should be able to use these to help you read in the values and set the members of\u00a0card.. . Example usage of the provided operator>> functions:. . Rank rank;. Suit suit;. is >> suit >> rank; // Let's say is has \"Spades Nine\". cout << rank << \" of \" << suit << endl; // Prints \"Nine of Spades\""}, {"id": 4023, "value": "We don't grade or check your comments, but well-documented code is a great practice to learn.\u00a0"}, {"id": 4024, "value": "I would look at line 181 in your `Player.cpp`. The error might be due to the `swap` function that you're calling."}, {"id": 4025, "value": "Probably something with your launch.json. Make sure that in args you don't include ./euchre.exe as an argument.. . It should be alright to post a screenshot of your launch.json in a followup if you need further guidance (don't post any code ofc)."}, {"id": 4026, "value": "Yes, overridden functions must have the same function signature. See [here](https://www.simplilearn.com/tutorials/cpp-tutorial/function-overriding-in-cpp) for more info."}, {"id": 4027, "value": ". I was just wondering what we would place in \u00a0freopen() in the case of project three\u00a0. . You have to change \"main_test.in\" with the input file for this project, in this case, \"pack.in\"."}, {"id": 4028, "value": "I don't see where you got the number 24 from. Going off of the equations I see in the Wiki page, I think 20 in-shuffles should restore the pack."}, {"id": 4029, "value": "The integer you read in should be the index of the card in the player's hands, so you don't necessarily have to convert it to a card."}, {"id": 4030, "value": "marking resolved"}, {"id": 4031, "value": "@1699 -- the probable cause is that you are calling `sort` on a member variable inside of a const function. Since `sort` modifies what is being sorted, this violates const and leads to the above error."}, {"id": 4032, "value": "You should only be printing player hands and prompts for taking in input (sample output is provided in the Human Player section of the spec for many of these) within Player.cpp. All game-related output such as leading / playing hands should be printed from the driver."}, {"id": 4033, "value": "Never mind I figured it out!"}, {"id": 4034, "value": ""}, {"id": 4035, "value": "@2036"}, {"id": 4036, "value": "To test add and discard, I would run the add and discard function, then run play_card 5 times and assert that each card played matches what you expect to see. If your add and discard function is wrong, then one of the play_card calls will return the wrong card."}, {"id": 4037, "value": "argv is an array of strings, not c++ strings. You cannot directly use != or == to compare. Instead, you could convert to c++ strings and then compare, or use strcmp (from ) on the cstring you are comparing directly."}, {"id": 4038, "value": "If you use a vector of pointers then it would be fine to do `players[i]->`, yes. I would say a vector of pointers is the easiest way to work with the `Player_factory`."}, {"id": 4039, "value": "It seems like you have a memory leak somewhere. Make sure you have a delete corresponding to every new. Also make sure you use delete[] when you use new to create an array."}, {"id": 4040, "value": "`control reaches end of non-void function` means that there are functions where you might not return a value. Here specifically it looks like you need to add return statements at the end of `lead_card` and `make_trump` so that you return something even if you don't go into any if statements."}, {"id": 4041, "value": "The VS Code setup tutorial has workarounds for input redirection here. In short, on Linux/WSL, make \"<\" and \"euchre_test50.in\" separate strings in the \"args\" array, rather than one combined string. If you're using the CodeLLDB extension on macOS, set the \"stdio\" variable instead."}, {"id": 4042, "value": "Yes, you would print an extra newline when making trump, adding card (dealer), and discarding card (dealer) is completed in each round, respectively. You can run your driver on public tests without these newlines and use the sdiff command to compare against the correct output so that you can get a sense of where you should be putting your extra newlines."}, {"id": 4043, "value": "Although lectures 11 and 12 provide great practice and examples for how to create an ADT, you should have all the tools you need for Euchre after lecture 10.\u00a0"}, {"id": 4044, "value": "You are expected to print out the command to the ostream (i.e. the .out file you produce from euchre.cpp). Professor Juett said this was more of a design choice by the instructors, but all you need to implement is printing out all 12 arguments before printing anything else. Hint: there is a space followed by an endline after the last argument.. . The autograder also has the command on the first line of the .out.correct file which your output is being compared against.. . A Reference can be found here in the spec:. . https://eecs280staff.github.io/p3-euchre/#example-with-human-players:~:text=Simple%20Dabbala%20Simple-,First%2C%20print%20the%20executable%20and%20all%20arguments%20on%20the%20first%20line.%20Print%20a%20single%20space%20at%20the%20end%2C%20which%20makes%20it%20easier%20to%20print%20an%20array.,-./euchre.exe%20pack"}, {"id": 4045, "value": "The main driver program, euchre.cpp, should not need to know what the four players' cards are. Instead, euchre.cpp should just be calling the member functions of players to orchestrate the game. Follow up with any additional questions!"}, {"id": 4046, "value": "Great question! As you mentioned, we cannot modify the Player interface to accommodate this. One approach could be to use repeated calls to a function like lead_card to access the cards in a player's hand and store it in some vector. Then you can inspect the vector's contents to see if the player had what you expected."}, {"id": 4047, "value": "Just to confirm, you can still compile your Player tests without any problems, right? If so, I think your C/C++ extension is struggling to include unit_test_framework.h correctly due to some configuration issue. Could you share your c_cpp_properties.json file, please?"}, {"id": 4048, "value": "Does your Card_tests.cpp file end with a call to TEST_MAIN()?"}, {"id": 4049, "value": "I think this is due to the fact that make_trump() is a const function, meaning it cannot modify the Player object. However, add_and_discard() is not a const function, so the compiler cannot guarantee add_and_discard() won't modify the Player object when called from make_trump().. . Unfortunately, it looks like you cannot call add_and_discard() from make_trump(). Thinking ahead, can you call add_and_discard() from somewhere else when making trump?"}, {"id": 4050, "value": "When overriding functions in derived classes, you have to be sure you match the function signature exactly. In this case, you are missing the const for the make_trump function."}, {"id": 4051, "value": "I guess you don't need to worry about turning down the card. You simply do not consider the upcard suit in the second round. If making trump happens in the first round, the dealer will take the upcard and discard a card from his hand."}, {"id": 4052, "value": "Yes, you should be using cin"}, {"id": 4053, "value": "Calling your SimplePlayer or HumanPlayer constructors directly from Player_tests.cpp should not work, since neither of those classes are defined in Player.h (they should only be defined in Player.cpp); however, Player_factory() is defined in Player.h, so including Player.h is enough for you to be able to use it.. . You technically could get around this issue locally by adding class declarations for SimplePlayer and HumanPlayer to your Player.h, but you shouldn't do this: When you submit your cpp files to the autograder, we'll compile them against our own copies of the header files, so your Player_tests.cpp will just fail to compile.. . Thus, testing your constructors via Player_factory() is the only way, as far as I'm aware. However, your Player_factory() has the ability to test both constructors with every meaningful input, right? So you shouldn't have any trouble catching constructor-related bugs using just Player_factory()."}, {"id": 4054, "value": "For deal_one(), it \"Returns the next card in the pack and increments the next index\". Think about when you may want to use \"the next card\". At the beginning of the game, we need to deal cards so each player has 5 cards in hand. deal_one() can help with tracking which is the next card to deal."}, {"id": 4055, "value": ". The spec says that the simple player does not consider whether they are a dealer.. . For making trump, think about how knowing whether you are the dealer or not matters. Per spec, \"If\u00a0making\u00a0reaches the dealer during the second round, a variant called\u00a0screw the dealer is invoked: the dealer must order up a suit other than the rejected suit.\""}, {"id": 4056, "value": "You are deleting from an empty hand most likely"}, {"id": 4057, "value": ". Can we use assert statements in place of if and if else statements? Would this cause the test to fail is the assert is false? I'm not sure if assert returns a boolean value or causes the tests to abort.. . if statements create a logical flow to your program. Meaning if x, do y, else do z. Assert statement are a way of enforcing presumptions or requirements of a function or program (like the statements in your REQUIRES clause.. . Asserts are what we call a macro (macro = not a function, a placeholder that gets substituted with another piece of code). Whatever you have inside of an assert should be a boolean value (e.g. 1 > 2). Assert will abort the program if the boolean value inside of it is false.. . . assert(1 > 2); // will abort"}, {"id": 4058, "value": "The upcard should be added after printing the players hand, as it wont actually be shown as part of the hand. . "}, {"id": 4059, "value": "No matter what is in the simple players hand, they will order up the suit that is the same color as the up card."}, {"id": 4060, "value": "No, since the player is able to follow suit, they must follow suit. Thus the ace of diamonds should be played. The Jack of diamonds in this case is considered a heart because hearts is trump."}, {"id": 4061, "value": "It is good practice to make member variables of a class private. You could read in the players in your main function and pass them into the class object through various ways, constructor, public setter functions, etc."}, {"id": 4062, "value": "Player_factory is a\u00a0function that returns a pointer that points to a player(simple/human depending on the function input) instance.. . oss2.str() is Alice because we've overloaded the << operator to print the name of a player, and the name of the player that\u00a0alice\u00a0points to is Alice."}, {"id": 4063, "value": "We are not aware of any issues with euchre_test50.in. If you look at the output of euchre_test50.correct, the game ends at three hands. So there is no need to write more input."}, {"id": 4064, "value": "I realize it's not a big function, but refrain from posting your code publicly.. . ~~As for the issue, it's probably that you need to implement the rest of the abstract Player class functions in SimplePlayer. SimplePlayer will remain abstract unless all abstract functions from the base class, Player, are implemented in it.~~"}, {"id": 4065, "value": "Marking resolved; if students want to see the question that was resolved, use the question history slider at the top of the piazza UI."}, {"id": 4066, "value": "resolved"}, {"id": 4067, "value": "See https://eecs280staff.github.io/p3-euchre/#adding-the-upcard-and-discarding for tips on keeping the human hand sorted. It shouldn't be necessary for make trump."}, {"id": 4068, "value": "Assuming you mean euchre.cpp specifically, you may consider running with address sanitizer and just running a really long game (e.g. points to win = 100) to see if there's memory issues at any point. I think the test cases we give you for the driver are relatively thorough, but don't take that as a guarantee."}, {"id": 4069, "value": "In terms of pacing I'd say you're probably fine. Per student answer, simple is probably tricker than human because you're essentially coding an AI instead of just reading input. There are some tricky bits (read the spec carefully!) but you will probably find them if you implement something and diff any failed tests with correct output.. . We on staff are here to help, so don't be shy if you have questions :)"}, {"id": 4070, "value": "Yes, you can reuse the same names as long as they are not in the same scope (ie. different TEST function)"}, {"id": 4071, "value": "Sorry, I missed the parameter in the make_trump function. Thank you!"}, {"id": 4072, "value": "@1580_f1"}, {"id": 4073, "value": "If the player has no card of the led suit, they will play the lowest card on hand. Since in this scenario, both the trump and led suit has been determined, the lowest card is selected with the trump and led suit in mind. So in your example, the player will play the lowest one of the regular cards."}, {"id": 4074, "value": "@1802"}, {"id": 4075, "value": "Please make a followup if you already tried ASAN."}, {"id": 4076, "value": "Agreed with the student answer, this is most likely a timeout because some of your tests are taking too long."}, {"id": 4077, "value": "When using the operators >,<, ..., you only need to compare based on rank and suit, ignoring trump, led card, etc.. . For both of the card_less functions, you'll need to consider a lot of test cases - for example, returning true if b is the right bower and a is not the right bower. You should not be changing ranks of cards here."}, {"id": 4078, "value": "you need to add #include <algorithm> at the top of the file you use it in, then sort() should work :)"}, {"id": 4079, "value": "Check your implementation of deal_one(), looks like that could be buggy. Also, when you initialize a card object, are you setting next to be 0 (in the constructor)?"}, {"id": 4080, "value": "Looks like your code adds 3 players to the game instead of 4. Double check the part of your main function that creates the player objects.. . Address sanitizer also helps for debugging out of bounds errors."}, {"id": 4081, "value": "1. Questions about is_dealer: you can assume dealer will order up when it is their turn. You don't need to check it. You just need to read the input and set order_up_suit according to the input.. . 2. Don't know how to use all parameters: you don't need to use all parameters in human's make_trump function. . 3. Human can't cheat, you can always assume human will always follow the rule"}, {"id": 4082, "value": "Are you trying to sort inside of a const function? Sorting changes the sorted vector, so if you are sorting a hand vector then that means that you need to do it in a non-const function."}, {"id": 4083, "value": "Another thing to try is to make sure you create a console project, not an empty project when initially making a project in Visual Studio."}, {"id": 4084, "value": "resolved"}, {"id": 4085, "value": "This warning is there to prevent accidental hiding of overloads when overriding is intended. Make sure your make_trump function for Simple Player class has the exact same name and parameters as the parent class's make_trump. I also recommend to go to OH if you need further help! It's a bit hard to debug this error without looking at your code."}, {"id": 4086, "value": "Resolved."}, {"id": 4087, "value": "I suggest you to go to OH for help! This is very hard to debug without seeing your code."}, {"id": 4088, "value": "You don't need to do anything with discarded cards, since they are not used after add_and_discard is added. The student answer is a valid way to approach the problem."}, {"id": 4089, "value": "To address the first situation: Which of those cards is of higher value in this particular moment? (Think of the cards as a hierarchy of values due to trump instead of just their numbers). . To address the second: In the rules of Euchre, if you have a card of the lead suit, you must play a card of the lead suit. Even if another card in your hand is higher due to trump, simple and human players are bound to the rules to follow suit.. . I hope that helps!"}, {"id": 4090, "value": "The student answer isn\u2019t completely correct. A false positive occurs when a test case fails even when run with a correct (instructor) implementation. One of your assert statements isn\u2019t written correctly."}, {"id": 4091, "value": "I am not exactly sure what you mean why \"When it reaches Hand 1\" (please feel free to clarify in follow up), but the pack should only be shuffled a total of 1 time before dealing."}, {"id": 4092, "value": "For Player.cpp, you will need to create two classes (one for simple, one for human) that inherit from the given Player class.. . Within the implementation of your two classes, you can decide what private variables you need to keep track of the player's hand. In other words, the implementation is up to you as long as it conforms to (and inherits from) the interface provided by the given Player class.. . This Pro tip from the spec suggests using a vector of Cards to store a player's hand:. "}, {"id": 4093, "value": "0 represents the first card"}, {"id": 4094, "value": "Your implementation of Player should not require the use of Pack.. . If you are not using Pack objects but just included Pack.h to be safe, you should remove that line and it should run on the autograder.. If you are using Pack objects in your Player.cpp, you should reconsider whether it is an appropriate use of the Pack abstraction, and modify Player to work without using Pack."}, {"id": 4095, "value": "It's completely okay to have tests that use multiple functions inside of them. I would agree that it's difficult to test add_and_discard() without using lead_card(). Instead of trying to test each function in isolation, I would think of testing different scenarios that push edge cases for all of the functions involved. I hope that helps!"}, {"id": 4096, "value": "This is a really good question, and really important idea (polymorphism, static vs dynamic type).. The short answer: at this point in the slides, it will execute Triangle::print(), so it will print the three sides of Triangle.. . However, there is a later slide that talks about this:. . . . . Since ptr points to an Isosceles, it seems natural that Isosceles::print should be called rather than Triangle::print.. We can accomplish this by making Triangle::print a virtual function:. . . . If Triangle is defined like this, the ptr->print from your original question will use Isosceles::print, thus printing 1, 12"}, {"id": 4097, "value": "The newline comes after the ordering up process is finished. In this case, since Judea is a human player, she needs to discard a card. The new line comes after that happens.. . "}, {"id": 4098, "value": "Looks like you need to `#include ` at the top of your Player.cpp file. Pro tip is that if you look at the docs on https://en.cppreference.com/w/cpp/algorithm/sort, the top of the page tells you what to include in \"defined in header .. ![image.png](/redirect/s3?bucket=uploads&prefix=paste%2Fk514yxvwbad3p%2F4374d26fd1d5ee1e11cbfb28f8bf7ee801b23c31bfe4b9dc60ac3e43dce277bd%2Fimage.png)"}, {"id": 4099, "value": "This is normally the case, but you have to keep in mind that since the trump suit in this round is Hearts, the Jack of Diamonds (which is the left bower), is considered a heart (and not a diamond). Therefore, the only cards remaining are considered trump (besides the nine of clubs), so Gabriel plays the nine of clubs. Hopefully this makes sense!"}, {"id": 4100, "value": "I'd recommend adding breakpoints to step through your code and find when you index out of bounds. Coming to office hours is also a good option if you're still indexing out of bounds as it is hard to find these problems by just reading the code. It's much easier if we can see the code running with break points.\u00a0"}, {"id": 4101, "value": "The student answer is correct for the most part. You shouldn\u2019t necessarily have to remove the virtual keyword, but you will have to implement every function in the derived classes as specified in Player.h."}, {"id": 4102, "value": "I believe you can reuse an istringstream if you call clear(). This is from online documentation for istringstream."}, {"id": 4103, "value": "The dealer's cards don't have any effect on what suit can actually be chosen for trump. For the first round, you can ONLY chose the same suit as the upcard, or to pass. Anyone can choose any suit to be trump in the second round, regardless of the cards in their hand.The SimplePlayer that you'll be implementing, however, follows set rules (self-imposed rules, if you will) when picking a suit in the second round. SimplePlayers will only ever order up the suit of the same color as the upcard (for example, if the upcard was Diamonds, the SimplePlayer would only consider Hearts by this rule). Again, in a real game, any suit can be picked in the second round, but the bots follow this limitation to make the implementation easier."}, {"id": 4104, "value": "You could use a vector of pointers if you really wanted to. However, I would strongly advise against it since there are only at most 24 cards you have to deal with, and the headache of managing memory isn\u2019t worth it for that little performance gain, if any.\u00a0"}, {"id": 4105, "value": "Resolved. Always make sure you \"make\" your executable and resolve any compilation errors before trying to run it!"}, {"id": 4106, "value": "Resolved"}, {"id": 4107, "value": "I believe the spec is just referencing the typical strategy that most humans would play; you do not (and should not, to keep in line with the spec and the autograder) implement any strategy other than the one directly described, since you'll get different behavior from what's expected.As for the trump question, you should play the highest card of the led suit unless the player has none of the led suit, in which case you will play the lowest value card in their hand.\u00a0"}, {"id": 4108, "value": "This probably means that a card function you are using in the istream ctor for pack is incorrect. Specifically, check your operator>> overload for Card and compare it to the operator overloads we have for Rank and Suit; it's probable that you're not checking for the EOF bit correctly (and you can check our changelog in the spec to see how we handle that)."}, {"id": 4109, "value": "No, you don't change the upcard."}, {"id": 4110, "value": "Can you try to implement Player_factory() after declaring the two child classes?"}, {"id": 4111, "value": "Not entirely sure what your question is asking, so if the student answer does not satisfy you feel free to come to OH."}, {"id": 4112, "value": "The checkpoint AG was closed today. You should from now on submit to the full P3 AG."}, {"id": 4113, "value": "I've been using them, I don't see why not\u00a0"}, {"id": 4114, "value": "Yes"}, {"id": 4115, "value": "By the rule of respecting the interface, you should not write a function to get the card vector. There are some other functions (e.g. play_card) that you have already defined and you can use to get individual cards the player has, and you can write your tests with those."}, {"id": 4116, "value": "Looks like you have a couple of errors. At some point in your code, you are trying to access the Suit with a value of 8 which does not exist. Also, looks like you are trying to access an index which is out of bounds.. . I recommend running your code through CAEN, which will run it in a similar environment to the autograder, and will behave in a very similar way."}, {"id": 4117, "value": "The 2 main options would be to either save an extra member variable in your class, or you could make the make_trump() function return the value, and you can hang onto its result in the calling function."}, {"id": 4118, "value": "First, the simple player would consider the suit that was led: spades. Since they do not have any spades, they cannot play within the suit.. . Also, note that Jack of Hearts is actually a diamonds because it is the left bower.. . So, the player would play the lowest card in their hand, which is Queen of Clubs.. . In case you were curious, the ranking of the cards in their hand, from highest to lowest, is:. - Jack of Hearts. - Queen of Diamonds. - Ten of Diamonds. - Ace of Clubs. - Queen of Clubs"}, {"id": 4119, "value": "This is a decision up to you, but vector might be easier\u00a0"}, {"id": 4120, "value": "According to Playing and Leading Tricks\u00a0in the spec, that's all you need."}, {"id": 4121, "value": ""}, {"id": 4122, "value": "`players[i]->get_name()` works and is the most stylistically appealing here."}, {"id": 4123, "value": "You're most likely indexing out-of-bounds. It's looks like one of the issues may be in\u00a0test_simple_player_make_trump. I'd recommend using the address sanitizer or running your code on CAEN since CAEN mimics the AG environment."}, {"id": 4124, "value": "Looks like you're going out of bounds. This is likely to happen in for loops, so make sure that your conditions are correct. If you can't find it, try using address sanitizers"}, {"id": 4125, "value": "For the checkpoint, there are 14 and 17 graded mutations to catch for Card and Player respectively. However, it is possible that you have other bugs in your program that are not in the mutation testing suite."}, {"id": 4126, "value": "The new keyword creates an object of the specified class and returned a pointer to that object, which lives on the heap and not in the stack. Returning a pointer to an object of derived class is OK because it is an Upcast, as explained in last week's lecture (Since HumanPlayer / SimplePlayer defined and overwrote all functions declared in Player, there is no problem calling a virtual Human member function since it will at runtime redirect to the version of that function overwritten in the derived classes). . . For operator"}, {"id": 4127, "value": "It doesn't matter whether you check if SimplePlayer has any card of the next suit or not. As a simple player, if the player must order up, it will order up the next suit in round 2. As the dealer in round 2, the player is forced to order up regardless of his cards. Therefore, a SimplePlayer dealer will always order up the next suit in round 2 regardless of whether it has any cards of that suit."}, {"id": 4128, "value": "You only need scope operator if you implement outside of the class definition, so if you implement inside the class don't use the scope operator:. . ```. class SimplePlayer : public Player {. .... const std::string& get_name() {. }. .... } // end of class definition. ```. . If you implement outside the class like this, use the scope operator but using `SimplePlayer::` like so. ```. class SimplePlayer : public Player {. .... }; // end of class definition. . const std::string& SimplePlayer::get_name() {. }. ```"}, {"id": 4129, "value": "You\u2019re indexing out of bounds on line 69 of your pack.cpp. Check you\u2019re indexing and stopping conditions on your loops at this line.\u00a0"}, {"id": 4130, "value": "you shouldn't edit the .h file, you don't submit it so any changes wouldn't do anything, the classes need to be defined in the .cpp file."}, {"id": 4131, "value": "The make_trump function returns a bool to tell you if the person ordered up a suit or not (true means the person did order up). When the player orders up the upcard, the dealer should pickup the up-card, which temporarily gives them 6 cards in their hand. Then, according to the human or simple player's decision, the dealer will discard a card. Then, the trick taking phase of the game can begin."}, {"id": 4132, "value": "The bower rules only apply to the trump suit, not the suit led. In this case, the Player should play the ace of diamonds, as it is the highest card of the led suit. The bowers are both considered to be the suit of the trump (so if the Player had a Jack of Diamonds, it couldn't be played here as it's considered to be a heart card due to the bower/trump rules)."}, {"id": 4133, "value": "The left bower is no longer its original suit: it is the trump suit. So the suit on its face doesn\u2019t matter. SimplePlayer would want to play the trump suit."}, {"id": 4134, "value": "Make sure your factory function is below the class definitions. Otherwise, the compiler may not be able to find the class definitions."}, {"id": 4135, "value": "Unfortunately AG will not let you submit after the deadline has passed. Check in with one of the staff to see how to fix your code.\u00a0"}, {"id": 4136, "value": "resolved. "}, {"id": 4137, "value": "It's a destructor\u2014it's declared as public so you can delete Players from memory later on in the project (in the driver, I believe).You don't need to override it.Here's an extra reference just in case you're curious:https://www.geeksforgeeks.org/destructors-c/amp/"}, {"id": 4138, "value": "Look through your << operators. Are each of the implementations also inside the header file? Make sure to check that they have the same parameters."}, {"id": 4139, "value": "You are likely calling sort in a const member function, which sorts the member variable hand. This is a violation of the const member qualifier."}, {"id": 4140, "value": "you\u2019re probably using it in a const function, which goes against the rules of const since it\u2019s modifying hand, so you have to move it somewhere elseedit: see @1699"}, {"id": 4141, "value": "Since the Jack of Clubs is the left bower, it is considered as a trump card, which has Suit Spades. In this case, since the simple player does not have any Spades card, it follows with the lowest card on hand, which is the Nine of Clubs."}, {"id": 4142, "value": "Right now, order_up has no value, yet you use it in a comparison with upcard.get_suit(). This will lead to undefined behavior as your computer has no idea what it is comparing upcard.get_suit() with. To fix this, simply assign order_up a value to start with."}, {"id": 4143, "value": "Yes, is_dealer is only used in round 2."}, {"id": 4144, "value": "What may have happened is that you used a certain library function and your IDE autoincluded this header file for you. This is not one of the libraries we include in the autograder's installation of C++, which is why compilation fails (it simply can't find that library)."}, {"id": 4145, "value": "Run your code through CAEN (make sure to turn off address sanitizers). . Looks like an issue with pointers, check in your test_player_lead_card_jacks that you are creating and deleting all pointers correctly."}, {"id": 4146, "value": "Yes"}, {"id": 4147, "value": "\"this->\" is used to access member variables of a class within a member function. It is optional so no you don't necessarily need it. It is useful to clarify which variable you are specifying when there is another local variable with the same name (just don't do that). . . the \"->\" operator is used when dealing with pointers, as opposed to \".\" when working directly with objects."}, {"id": 4148, "value": "Take a look at the pro-tip here! https://eecs280staff.github.io/p3-euchre/#playing-tricks"}, {"id": 4149, "value": "Check your class / function definitions. You have two functions defined with the same signature (name & arguments) but different return type, which is causing this error."}, {"id": 4150, "value": "I would recommend walking Gn through with your debugger here. Most likely you\u2019re passing a bad string into string to suit hence the error. By bad string, I mean a string that isn\u2019t one of the four suits.\u00a0"}, {"id": 4151, "value": "I believe @1673 has the same error as you."}, {"id": 4152, "value": "You're correct in that the function should not be changed. What's most likely happening is you are passing in a string that is violating the requires clause of the function. Make sure you format the string correctly (eg. the first letter is capitalized) and you are passing in strings that can be turned into ranks (\"Two\",  \"Three\", \"Four\",   \"Five\",   \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\",   \"Jack\", \"Queen\", \"King\", or \"Ace\")."}, {"id": 4153, "value": "The Jack of Hearts should be played. This is because the left bower is considered to be part of the trump suit, so assuming Diamonds was led, this would be the highest card that follows suit."}, {"id": 4154, "value": "resolved"}, {"id": 4155, "value": "Make sure \"Card.h\" is included in your Pack.h file, make sure you defined the constructor Card(Rank r, Suit s) in Card.cpp, and make sure you are not accidentally putting rank and suit in the reverse order when you use Card c(r,s)."}, {"id": 4156, "value": "Make sure the Player_factory function is at the bottom of your Player.cpp file (or at least below your Human and Simple implementations). . . Regarding the bottom error, this looks like you are trying to call sort in a const function. Sorting the player's hand will modify the player object which violates const."}, {"id": 4157, "value": "Looks like there is an issue between your Player.cpp and the public player tests file.\u00a0Make sure that all your functions defined within C++ and there are no functions that are declared but not defined. Check if any functions or global variables have been defined in multiple places - this can confuse the compiler. Also check to make sure that any libraries you used are properly imported. Follow up with staff if you're still running into an issue.\u00a0"}, {"id": 4158, "value": "Double check the ordering of suits. SPADES "}, {"id": 4159, "value": "You could make a local array of 24 cards, put the cards from the original array into that array based on the shuffle rules (hint: look at even/odd indices), and then copy the local array back to the original. . . Also, when it says shuffle 7 times, yes you do need to loop and do the shuffle action 7 times."}, {"id": 4160, "value": "i could be wrong, but i don't think you're supposed to return anything because this is a constructor.\u00a0"}, {"id": 4161, "value": "you're not really outputting anything because this is a constructor. what you're essentially supposed to do is fill the cards array (a private variable that's already initialized for you) with all the card combinations shown in pack.in. you're not supposed to use pack.in in your implementation, but that file helped me visualize what i'm putting in the array. the hint given in the spec (Suit s = static_cast<Suit>(s) ) essentially just helps you cast the suits and ranks so you can make a card out of them.\u00a0. . hope this helps!\u00a0"}, {"id": 4162, "value": "It's best to just use the default pack constructor."}, {"id": 4163, "value": "To emphasize the student answerer's first point, the lead card is better suited as a local variable in the function because you shouldn't need to keep track of what the lead card is throughout the Game object's entire lifetime."}, {"id": 4164, "value": "To emphasize: even if you don't use those parameters, you need to have them there or else the compiler will call HumanPlayer an abstract class (because you didn't explicitly override the definitions from the base class)."}, {"id": 4165, "value": "It's not possible to tell based on the screenshot; feel free to make a separate private post with more code."}, {"id": 4166, "value": "resolved"}, {"id": 4167, "value": "I believe this is addressed by the euchre.cpp implementation. If trump is ordered up during the first round you would then call add_and_discard in euchre.cpp."}, {"id": 4168, "value": "It could be the other way around as well where the variable you're assigning to is of the desired type, but the variable you are assigning *with* (the right hand side) is the wrong type. Double check your logic."}, {"id": 4169, "value": "Did you make a constructor for SimplePlayer to initialize the name to the player?. . Also try moving the Player_factory to underneath the derived classes in Player.cpp, worked for me for this same issue\u00a0"}, {"id": 4170, "value": "See @1730.. . You don't need to handle this, as we are assuming the human player won't cheat."}, {"id": 4171, "value": "In this case, I think it has to do with your third assert statement. The King of Hearts is not less than the Queen of Diamonds, and you have it asserting that it is true."}, {"id": 4172, "value": "Have you tried stepping through with your visual debugger or printing out what r and s are before you create the Card? I would also recommend seeing what ra, junk, and su to see if the error is with how you read in from the file."}, {"id": 4173, "value": "See the Student's Answer under\u00a0@1699 for the way I implemented sorting :)"}, {"id": 4174, "value": "You could just check to make sure that `next` is less than the size of the pack."}, {"id": 4175, "value": "You may be missing a closing bracket in your default Pack constructor, so it is attempting to call the istream Pack constructor instead of defining it."}, {"id": 4176, "value": "I'm sorry but we cannot give out specific hints on how to catch bugs! I would suggest that you make sure you have at least one test for every function, think about the edge cases, and look at some of the conditional logic (if statements mostly) in your implementation and make sure that you are testing all of the different paths that you can take in your implementation."}, {"id": 4177, "value": "Could you send the function stubs for some of these functions (minus the implementation)? I know you said that you have exact copies in your implementations but I just want to make sure as this is normally the issue that needs to be resolved for an error like this."}, {"id": 4178, "value": "If you are implementing these as static helper functions outside of the class, you should call then with just func() and not class_name.func()."}, {"id": 4179, "value": "Here is my personal ranking of difficulty, however others might not agree. 1 is most difficult and 6 being least difficult. . 1.\u00a0play_card. 2. make_trump. 3. lead_card. 4. add_and_discard. 5. add_card. 6. get_name"}, {"id": 4180, "value": "Does it compile? Sometimes VSCode gets confused but compiling in the command line is always the ground truth.. . Edit: the operator>> is outside the scope of the Card class because it is not a member function. This means that you cannot directly access any private elements of the Card class, which rank and suit are. This is why we have getRank() and getSuit() functions so that we can access those private member variables outside of the class."}, {"id": 4181, "value": "Not at all! It's generally recommended to implement functions in the .cpp file and write the function stubs in the .h file (abstraction!)."}, {"id": 4182, "value": "Generally yes since we already know what cards the Human will play from the input."}, {"id": 4183, "value": "I would suggest clearing everything within the [] square brackets of \"configurations\" element and starting fresh with a new configuration. To do so, you should click \"Add configurations\" and select lldb launch assuming that you are on Mac. I would reference the debugger tutorial while you do those steps.. . Please follow up with a screenshot of your launch.json after those changes if it still does not work."}, {"id": 4184, "value": "In the first case, you're checking if r1<=r2. In this case, that's true because NINE<=NINE.\u00a0"}, {"id": 4185, "value": "Personally, I just added \"name\" as a private member variable of the SimplePlayer and HumanPlayer classes. This passes all of the public tests just fine.The functions inside of SimplePlayer and HumanPlayer don't really \"override\" the Player functions per se as they were never truly defined inside of Player, but you would treat it as though you were overriding them, yes."}, {"id": 4186, "value": "No, the 9 of diamonds will be played since the spades is the trump suit. This means that in the context of this hand, any card that is a spade will be automatically higher than cards with any other suits. Therefore, in this hand, the nine of spades will be higher than the nine of diamonds. Since the player has a lower card in their hand, the nine of diamonds, the simple player will play this card when given the choice between them."}, {"id": 4187, "value": "That error is printed when it's possible for the function to never hit a return statement. In this case, you have returns in an if/else if, but if neither of those branches ever execute, then you exit the for loop without having returned."}, {"id": 4188, "value": "You can assume that the human player won\u2019t cheat, so there is no special message you need to print to enforce the screw the dealer rule."}, {"id": 4189, "value": "No, you don\u2019t have to shuffle for each trick. The hands will be different each time for each trick because after you play a trick, you discard the hand from the simple players hand. Thus every trick will be played with a different 4 cards."}, {"id": 4190, "value": "The static cast is turning the integer into a suit. For example in the definition of the suit enum, SPADES is defined to be 0. If you static cast 0 into a suit, it then turns the 0 into SPADES."}, {"id": 4191, "value": "If you are running euchre.cpp which mandates arguments, then yes you would need to fill in the args in launch.json with the correct arguments. If you are running pack_public_test then you shouldn't need any args.. . That could be the problem. I would also check to make sure you are running the debugger not running the program in the terminal. Sometimes VSCode can also freeze so I would suggest shutting down VSCode and retrying. Beyond that, I would suggest going to OH to get help as it seems it might be a more complex bug.\u00a0"}, {"id": 4192, "value": "Nope, Pack_tests is optional. However there will be private tests for Pack (as well as all the other files) after the main deadline."}, {"id": 4193, "value": "Yes, set it to 0.\u00a0"}, {"id": 4194, "value": "Yes, any code we provide is available for you to use."}, {"id": 4195, "value": "It looks like your Card_tests.cpp cannot find the missing reference to function Card::get_rank(), which should be implemented in your Card.cpp. Check to make sure you\u2019ve implemented those functions, and then also make sure your Card_tests.cpp has #include Card.h at the top of the file.. "}, {"id": 4196, "value": "The function it is having a problem with is safe_not_equals_helper() which is in unit_test_framework.h. I do see in your code that you #include \"unit_test_framework.h\" in player.cpp, which shouldn't need to be there, that could be causing a double definition of the function. Also make sure you are including Player.h in player public tests not player.cpp. You should never include a .cpp file in this class."}, {"id": 4197, "value": "The error you are getting is not a compilation error, but rather an assertion error. This means something is going wrong while your code is running. Specifically, the assertion is on line 79 of Card.cpp. You should look there to see what exactly is going wrong, and you can also use a debbuger to see what leads up to the assertion failing.Edit: the above answer is correct, but I'd like to throw in that the error means that your code is calling \"assert(false)\" somewhere; try to work out where this is (line 79 of Card.cpp, as stated above), and work backwards to figure out why the assertion might be false (it could be that you just forgot to delete one of the \"assert(false)\" statements provided by some of the starter code, or you could be breaking one of the REQUIRES clauses)."}, {"id": 4198, "value": "It looks like your type configuration is \"cppgdb,\" but in the setup tutorial it's supposed to say \"cppdbg\". Take a look here!"}, {"id": 4199, "value": "The discussion comment is correct."}, {"id": 4200, "value": "You have a memory leak somewhere. Make sure everywhere you use new has a corresponding call to delete, and make sure if you are deleting an array you use delete[]"}, {"id": 4201, "value": "Any functions that you implement should have test cases for them!"}, {"id": 4202, "value": "You still need to have the return type when declaring the function. If your function is not returning anything, remember to put in \"void\". . . Also, the reason you put the helper functions in the private section is they are useful within the class, but are not expected to be used outside of the class, and it is thus better to restrict that functionality."}, {"id": 4203, "value": "From the pro-tip in this section:. . For consistency with autograder test cases, the cards in a human player\u2019s hand must always be printed in ascending order, as defined by the\u00a0<\u00a0operator in\u00a0Card.h.. . So trump and led suit are not considered for sort, and just depends on how you defined\u00a0<"}, {"id": 4204, "value": "You should manually be checking which cards are trump, and only compare/consider those that are not (when looking for the highest non-trump). . For your question about sort(): fromthe pro-tip in this section:. . For consistency with autograder test cases, the cards in a human player\u2019s hand must always be printed in ascending order, as defined by the\u00a0<\u00a0operator in\u00a0Card.h.. . So trump and led suit are not considered for sort."}, {"id": 4205, "value": "The RME says that we should modify order_up_suit, I followed this instruction as modifying a new suit object would not send that information anywhere.\u00a0"}, {"id": 4206, "value": "resolved"}, {"id": 4207, "value": "I don't see why not :)"}, {"id": 4208, "value": "From the spec:. . At the beginning of each hand, announce the hand, starting at zero, followed by the dealer and the upcard.. "}, {"id": 4209, "value": "When you say populates pack.cards correctly what exactly do you mean? Is it creating a full deck with 52 cards or only 9-A. Without seeing your code, my guess is you need to rethink your logic on incrementing next. You want to return the card at index next and then increment it. Remember that doing ++next will increment next then do ALL operations on the line. Doing next++ will do ALL operations on the line and then increment next.\u00a0. . In regards to the follow up, deal_one only deals the card at the 'top' of the deck (aka index 0), then marks that card as dealt by incrementing next. That means next acts as a reference to the top card index, which is why we have to increment it after returning the top card. When a deck is shuffled, we have no idea what cards are where and we can't go based off rank or suit.\u00a0"}, {"id": 4210, "value": "Great question! You don't need to pass arguments if you assign all the variables as member variables in the class! If you don't assign all variables as member variables, then you would need to pass variables as parameters."}, {"id": 4211, "value": "Note - I have mainly seen these errors on Windows machines (not mac) so only run the following lines if using Windows. If using mac, please follow up.. . I would try making sure your gdb is installed properly. To do so, you can run in your terminal these commands:. . gdb --version. // if a version comes up it is installed. If a version is installed, you can run the following line to find the MiDebuggerPath for the launch.json. which gdb. . //If a version does not come up (aka blank or no line after gdb --version) then run this command. . sudo apt-get install gdb. "}, {"id": 4212, "value": "Make sure that you are not using the scope operator when declaring a Player object because you are creating a player object outside of the player class (ex: SimplePlayer(name) ). Also make sure that you are passing in a const string not a string. Even though they are both strings, the computer seems them as different argument types because what you pass in has to match exactly to what is defined in the function declaration.\u00a0"}, {"id": 4213, "value": "From the spec:. . Implement the Simple Player in\u00a0Player.cpp\u00a0by creating a class that derives from our\u00a0Player\u00a0abstract base class. Override each Player function in\u00a0Player.cpp\u00a0for the functions declared in\u00a0Player.h.. . . Here is information on derived classes"}, {"id": 4214, "value": "add_and_discard takes in a\u00a0const Card, are you inputting a simpleplayer by accident? If you can't find an issue, could you show how you are calling the function, and also show the line where you declare the variable that you pass in."}, {"id": 4215, "value": "I would suggest going to OH for this bug because it is a bit more complex and hard to debug without physically stepping through the code. My guess is that you haven't updated your make (make Pack_public_test.cpp) or that a proper cpp package hasn't been installed.\u00a0"}, {"id": 4216, "value": "I ran into this issue myself, and had to do a bit of Googling to figure out what the issue was.. . So, it turns out that the \"const\" modifier after the member function declaration (the \"const\" in \"void print_hand() const\", for example) essentially tells the compiler that the member function DOES NOT modify any of the member variables of the class being dealt with.. . Note that \"make_trump\" does not modify any member variables of any of the Player classes, and so is defined as being \"const.\" Functions declared as \"const\" can ONLY run other \"const\" functions, as otherwise they could potentially change member variables of the class (which is not allowed by the compiler). This means that \"print_hand\" must also be declared as \"const\".. . The issue here is with the sort function\u2014the sort function DIRECTLY CHANGES one of the member variables of the Player class (the Player's hand, namely), which is illegal. This is where the \"swap\" errors come in, since the swap function is TRYING to alter the \"hand\" variable of the Player class, but due to the \"const\" definition, this is illegal.. . To fix the issue, we CANNOT alter any of the member variables of the Player class in any way. The easiest way to solve this problem, therefore, is to simply create a COPY of the Player's hand, and then sort and print the COPY. This way, we aren't actually altering any member variables of the class.. . This is the way I understood it, feel free to correct me if I'm mistaken.. . Here's a good StackOverflow answer that pointed me in the right direction:. https://stackoverflow.com/questions/13103755/intellisense-the-object-has-type-qualifiers-that-are-not-compatible-with-the-me"}, {"id": 4217, "value": "I would suggest heading to office hours for this issue as it would be easier for an instructor to fix the issue if they can tinker with the code. Here are also some other posts about the same thing that might help: @1615"}, {"id": 4218, "value": "You do not need the virtual keyword. Also, this is a declaration of your function, so remove the\u00a0= 0; and replace it with\u00a0{}, similar to the function right above get_name() in your screenshot."}, {"id": 4219, "value": "The dealer is always the one that picks up the upcard and discards, regardless of who chooses trump. Also note that this only happens during round 1, the dealer doesn't pick up any cards if it gets to round 2.\u00a0. . If you are confused, I recommend checking out this explanation @1678"}, {"id": 4220, "value": "Yes, you should ideally be storing the played cards in an array/vector/etc. Unless you can think of another way to do it, like storing highest played card or something like that, though I did it with a vector."}, {"id": 4221, "value": "During the second round, the simpleplayer\u00a0only considers the suit of the same color, so if the upcard was hearts, they would only consider diamonds."}, {"id": 4222, "value": "resolved"}, {"id": 4223, "value": "Resolved"}, {"id": 4224, "value": "The standard vector function `.erase() `requires you to use iterators (a type of object that can traverse a container, in this case a vector) in order to use it. Iterators will be covered later in the course, but here's what you need to know for using `.erase()`:. . `erase()` can be used on a single element of a vector, or a range of values (with the last value in the range being *exclusive*).. . You can use `.begin()` on a vector to get an iterator to the beginning of the vector. Adding an index to the iterator value to will get you to a location other than the beginning of a vector.. . If I wanted to erase a *single* element from a vector called `vec` (lets say, the third element): I would use `vec.erase(vec.begin() + 2)` since the third element is in index 2.. . Similarly, if I wanted to erase a range of elements, I could do: . ```cpp. vec.erase(vec.begin() + 2, vec.begin() + 6) \\\\ erase all elements from index 2-6, not including index 6. ```. . more info on this here: https://cplusplus.com/reference/vector/vector/erase/"}, {"id": 4225, "value": "Hi! You are right that your function does return a value for every possible value of Suit, but your compiler is not smart enough to catch that. I would remove a condition such that there is a default returned suit. Follow up with any more questions."}, {"id": 4226, "value": "For anyone else coming across this:. . Make sure that you have\u00a0--std=c++11 in your makefile."}, {"id": 4227, "value": "It seems like you're trying to make trump when the player only has one card in their hand. Try adding four more cards and then continue with the test to see if that resolves the out of bounds issue."}, {"id": 4228, "value": "None of them are particularly more difficult than the others, but player is probably the most time consuming. The only difficult functions in Card are the two Card_less functions, and the only slightly difficult function in Pack is shuffle.\u00a0"}, {"id": 4229, "value": "I don't think you should be comparing the bob and correct pointers if you're trying to make sure they have the same cards in their hands. One option is to make two vectors, have each player play all their cards and put their cards into one of the two vectors, sort the two vectors, then assert that the vectors are equal."}, {"id": 4230, "value": "You should not have the class header Card in Card.cpp. Basically, there should not be lines of code in Card.cpp that look like this:. . . class Card {. public:. \t// stuff. }. . Instead, just define the functions. Functions that you define that are from the card class should look like this:. . . ReturnValue Card::function_from_card_class(params) {.   //stuff. }"}, {"id": 4231, "value": "You should put them in the cards array. Also make sure to give a value to\u00a0next."}, {"id": 4232, "value": "(first answer)Think about how many cards are supposed to be in the deck and what happens if that number is exceeded\u00a0(second answer)I believe \"next\" is meant to be used to count the next card that would be drawn from the Pack; hence, if the \"next\" variable \"points\" (it's not really a pointer, but rather an index counter, but minor point) to an index outside of the Pack, then the Pack can be considered \"empty.\"In short, you just want to return whether \"next\" is at an index that is beyond the bounds of the \"cards\" Array."}, {"id": 4233, "value": "They aren't two \"new\" functions, they just updated the starter code and changed how the functions were written. Instead of adding them into your code, you should just replace the old ones."}, {"id": 4234, "value": "Resolved"}, {"id": 4235, "value": "The followup is good advice. If that doesn't work, another solution is to change it to a `for` loop that loops `PACK_SIZE` times, since the file is guaranteed to have that number of cards."}, {"id": 4236, "value": "When making trump, there is no trump suit yet. The point of making trump is to decide the suit of trump. It seems like you don't fully understand the making trump process, so let me explain before answering your question:. . During round 1, after cards are dealed, the next card in the deck, the \"upcard\" is flipped up, and this is a \"potential trump\". You go around, starting with the person after the dealer, asking if anyone wants to make this suit the trump suit, and everyone says yes or no. If someone says yes, the suit of the upcard becomes the trump suit, and the dealer picks up the upcard and discards a card. If all four people say no, the upcard is flipped back over (or at least, in a physical game of euchre).. . During the second round, you go around, again starting with the person after the dealer, asking if anyone wants to\u00a0choose the trump suit (they can choose any suit now, not just say yes/no to the suit of the upcard). If someone chooses, the suit that they choose becomes the trump suit. If no one chooses, the dealer is forced to choose.. . The \"trump\" suit does not really exist in round 2, so it doesn't need to be considered. Also, only considering the \"Next Suit\" (other suit of same color), is not a real strategy used in euchre, it is just done to make the simpleplayer easier to code. In a real game you would just consider if you have a strong enough hand under some trump to choose that trump. (There is a disadvantage to being the one to choose the trump suit, I can explain in followup discussions if you're curious).. . Now, onto your question:. . In your example, I assume that you meant that Heart was the suit of the upcard. You do not need to consider this suit at all. Just consider the next suit, diamonds, following the rule given in the spec. If the player has one or more face or ace diamond, then make the trump suit diamonds, and if not, then you pass.. . Hope that helped!"}, {"id": 4237, "value": "It's hard to say without knowing the specific errors and how your other functions are implemented. Have you ascertained that the issue is with the `shuffle` function and not anything else?"}, {"id": 4238, "value": "It is safe to assume there are no duplicates, but this doesn't mean you can't call Card_less on the same card (comparing a card to itself). You should return false when the card is equal to itself."}, {"id": 4239, "value": "What are you #include'ing in your Pack.cpp? Make sure you never #include a cpp file and only #include .h files."}, {"id": 4240, "value": "For your current scheme, ensure that your custom working directory is the one that contains `pack.in` (i.e., the directory where you extracted all the starter files). [Here](https://eecs280staff.github.io/tutorials/setup_xcode.html#working-directory) are the instructions for changing your custom working directory."}, {"id": 4241, "value": "See @1699; I got a similar error as you, but solved it as I outlined in the solution."}, {"id": 4242, "value": "It just means you're failing test_pack_default_ctor because of a failed assert statement."}, {"id": 4243, "value": "Resolved"}, {"id": 4244, "value": "We're assuming in this project that Human Players follow the rules. The only invalid behavior you need to check for is what's explicitly stated in the spec under \"Euchre Game > Interface.\""}, {"id": 4245, "value": "anywhere, as long as they're called at the correct time."}, {"id": 4246, "value": "Glad you figured it out. In C++ when a function is not declared in a .h file with the other things it refers to, the ordering of statements matters so the compiler knows what is referring to what."}, {"id": 4247, "value": "Returning a reference to the input/output stream allows us to\u00a0chain multiple objects together.. Take the insertion operator as an example.. int a = 3;. int b = 4;. cout << \"a is \" << a << \", b is \" << b << endl;. This is able to print\u00a0a is 3, b is 4 because the insertion operator returns a reference to the output stream. Otherwise, it would fail after the first insertion since\u00a0for the second insertion operator, you are passing in a void(the return of cout << \"a is \") and an int(a), which does not match the parameter types of the function.. . In our case, we want to chain input/output, so we can read in a rank and a suit on one line, for example. That's why we overload the operators with return types."}, {"id": 4248, "value": "Adding onto the instructor answer - yes, shuffle is definitely the most difficult.. . Ranking the rest, though all are not that different in terms of difficulty (hardest to easiest):. - the istream constructor. - the default constructor. - deal_one. - reset and empty"}, {"id": 4249, "value": "Adding onto the instructor answer - yes, the Card_less functions are 100% the hardest, I would say that the one that only considers trump might even be a little harder, because in the one that considers the led card, you can just call the trump one in like half of the scenarios (when both are in the led suit, etc.).. . I would say the rest are pretty equal, but if I had to rank them (from hardest to easiest):. - string_to_rank and string_to_suit. - the >> operators. - The >,<,==, etc. operators. - Suit_next. - The class functions - get_rank(), etc.. are all pretty equally easy"}, {"id": 4250, "value": "The way I approached it was quite similar; if A was a trump and B was not, A would never be less than B, and vice-versa.If both were trump, you really only need to worry about whether A or B (or both) are one of the bower cards, since if neither are a bower card the normal \"<\" operator will suffice.Same goes if neither of the cards are of the trump suit; you can just use \"<\".I ended up with 3 main if statements, and inside the one that checks if both are trump cards, I had 3 more nested conditionals. That should be all you need, although using more isn't an issue as long as the code works."}, {"id": 4251, "value": "One workaround is to call\u00a0`play_card`\u00a0five times and assert that the played cards are equal to what you expect. If the wrong card was discarded in add_and_discard, then it will erroneously show up when you call play_card (assuming a correct play_card implementation)."}, {"id": 4252, "value": "I would make sure you choose a working directory it seems like your code isn\u2019t connected to where your files are. . Also make sure not to show your code!"}, {"id": 4253, "value": "It looks like you're not covering the diamonds suit, the default value is the Two of Spades, so those last few cards aren't being filled"}, {"id": 4254, "value": "Your code for the \"operator<<\" is likely defined incorrectly.. . See https://stackoverflow.com/questions/54847198/undefined-symbols-for-architecture-x86-64-operator"}, {"id": 4255, "value": "If the upcard is the 10 of diamonds, then diamonds will be the proposed trump suit. If trump is made in the first round, then diamonds will become trump.\u00a0. . If the upcard is the 10 of hearts, then hearts will be the proposed trump suit. If trump is made in the first round, then hearts will be the trump suit.\u00a0. . If trump is made in round 1, the trump suit is the suit of the upcard."}, {"id": 4256, "value": "Any combination of Players and Humans is allowed, including what you said. The bullet you're referring to means that it's invalid to try to specify a player other than those 2. For example, the user can't type something like \"BigBrainPlayer\" and have the program run as intended."}, {"id": 4257, "value": "If you remove the parameters, then the functions signatures are no longer the same as what they're trying to override. Then there will be a pure virtual function that you aren't implementing in the derived class, which is invalid since we're trying to make an instance of the class.. . It's ok to not use the parameters. We have to keep them because we're overriding a function in the derived class."}, {"id": 4258, "value": "You can't really compare if two objects are identical like as you said they're compound, so I would recommend testing if the name of the player subclass you just constructed matches the name that you passed in its constructor."}, {"id": 4259, "value": "Define and implement in Player.cpp \u2014 do not modify the .h files because any modifications you make will not match the autograder's .h files"}, {"id": 4260, "value": "Yes, you can use the Card_less function in a for loop to find the lowest card.\u00a0"}, {"id": 4261, "value": "You can try to test your human player functionally without the driver. However, being able to actually just play the game would most likely be a much more convenient and quick way to see if the human input is working properly."}, {"id": 4262, "value": "Resolved."}, {"id": 4263, "value": "Each player should have exactly 5 cards in their hand while making trump, so your usage of MAX_HAND_SIZE should be completely fine."}, {"id": 4264, "value": "It might be helpful to post the compiler errors. From what you described it seems like that is the proper way to go about testing those functions."}, {"id": 4265, "value": "You never initialize `next` to 0 in the constructor, so it's accessing some random card object which is default initialized to Two of Spades."}, {"id": 4266, "value": "The picture in the followup is exactly right. The member variables to initialize are called `rank` and `suit`, so they need to be lowercase. Review the member initialization list parts of the ADT lectures for more information."}, {"id": 4267, "value": "Pack has a variable called next index which tells you which card to deal. In shuffle you should set that back to 0, as you want to start dealing from the top of the pack again."}, {"id": 4268, "value": "They are the same for human players"}, {"id": 4269, "value": "The sorting of the card is defined by the `"}, {"id": 4270, "value": "The left bower is always the trump suit, so it counts as a Club rather than a Spade. So the led suit is Clubs, which is the same as trump, meaning neither Queen of Diamonds nor Queen of Spades are impacted by trump or led card. The default ordering is applied, which means using the default suit ordering since the ranks are the same. This ordering is Spades "}, {"id": 4271, "value": "It appears that you defined `std::istream & operator>>(std::istream &is, Card &card)` twice in your `card.cpp` in line 158 and line 179."}, {"id": 4272, "value": "Yes, this is possible. There's still a deterministic return for this though, what would 12 < 12 evaluate to?"}, {"id": 4273, "value": "Check that you have valid indices when you call `hand.erase(hand.begin() + i)` (replacing the names with whatever names you used for your variables). This is saying that the index `i` that you are trying to erase at is out of bounds.. . The line number refers to the iterator implementation, which is not your code. It's not super intuitive to read."}, {"id": 4274, "value": "I'm the debugger try doing through your code until a few lines before the segmentation fault. It might be that you are trying to print an uninitialized suit and have undefined behavior."}, {"id": 4275, "value": "It is probably an issue with your function header. Could you include a screenshot of how you wrote the header for that function?"}, {"id": 4276, "value": "See the spec at https://eecs280staff.github.io/p3-euchre/#requirements-and-restrictions. . ![image.png](/redirect/s3?bucket=uploads&prefix=paste%2Fk514yxvwbad3p%2F47cc7ee361003a246ce35e2b0a25c220deab21d0d4c9607a9f58ca9418112854%2Fimage.png)"}, {"id": 4277, "value": "Make sure that you have included the vector library and use std::vector (if you don't have a using namespace std at the top)"}, {"id": 4278, "value": "`next` is a private member variable of Pack and should therefore be initialized in the constructor."}, {"id": 4279, "value": "Resolved"}, {"id": 4280, "value": "That's what I would suggest! But there's multiple ways to go about it :)"}, {"id": 4281, "value": "`std::array` operates simliarly to the arrays from project 2 (using square bracket notation). So yes, you can just use the `[]` operator to index into the array and initialize all your cards."}, {"id": 4282, "value": "I'm wondering if the error comes from dealing one card since the `next` variable is never initialized to 0 in your constructor. Does setting `next` to 0 fix it?"}, {"id": 4283, "value": "Simple player only considers the next suit in the second round, so you would consider ordering up spades. In this scenario, because you have at least one face/ace spades card, you would order up spades.. . When we say \"same color suit\", we mean the suit that is the same color but not the same suit. Note in the second round, it is illegal to order up the same suit that was considered in the first round."}, {"id": 4284, "value": "There are usually a variety of possible causes for this error. The most common one is that your c++ extension on vscode isn\u2019t configured to cpp11. If that doesn\u2019t fix your error, come to office hours so that we might be able to help you better."}, {"id": 4285, "value": "In cards.cpp you should consider all ranks (including two through eight) -- you just won't be using them in the euchre driver."}, {"id": 4286, "value": "Marking resolved"}, {"id": 4287, "value": "Just remove that line -- Pack.h is included in the Player.h file already and the autograder doesn't expect you to include it in the Player.cpp file."}, {"id": 4288, "value": "It shouldn\u2019t be possible since we\u2019re really only simulating \u201creal\u201d games."}, {"id": 4289, "value": "You should probably be creating a private member variable in your Simple/Human player implementations to store the hand. Then you can get the size of this variable to get the #cards."}, {"id": 4290, "value": "Why not try it out and make sure it passes your tests?"}, {"id": 4291, "value": "index of the card in the hand vector. see the example in the spec"}, {"id": 4292, "value": "It does not include blank lines (or comment-only lines, I believe)"}, {"id": 4293, "value": "`trump` is the parameter that you'll be passing in when you call this function in your game implementation. For instance, if `trump` that is passed in is `SPADES`, then your `card_less` function would need to take that into account when comparing two cards as trump is considered the suit of the highest value."}, {"id": 4294, "value": "A) Technically 1 and 2 comprise all cases since the led and trump suit can only either be equal or not equal, so I'm not 100% sure what the cases are that you're specifying.. . B) Screw the dealer is enforced, so if we're ever in round 2 of making trump and it's the dealer's turn, the dealer must order up, and trump will be chosen by that player.. . C) For the Simple Player strategy, the dealer will order up the \"next suit\" of the upcard, so the same-color suit as you said. In a real game of euchre, you could choose any suit that wasn't the suit of the upcard.. . D) The dealer only picks up the upcard if trump is made during round 1 (rather than round 2). The dealer will pick up the upcard always and then discard something, but the card they discard could be the upcard. (For the Simple Player strategy, this happens if the upcard is less than all the cards the dealer currently has in their hands)"}, {"id": 4295, "value": "string_to_rank() asserts false if the inputted string does not match any of the strings in the RANK_NAMES array in Card.cpp. In other words, if your inputted string isn't anything like \"Two,\" \"Three,\" ..., \"King,\" or \"Ace,\" you'll hit that assert. I recommend using your debugger to check the value passed into string_to_rank() when the assert fails. (A hackier way of debugging this is to just print each rank string read in from your input stream, and see which one definitely isn't a rank)."}, {"id": 4296, "value": "You should read in each card and keep some sort of counter that tells you what index to put the card in the array for."}, {"id": 4297, "value": "As the follow up states, I\u2019m very sure that you just have to set your Custom Working Directory under \u201cEdit Scheme > Options\u201d"}, {"id": 4298, "value": "This error occurs when a subclass tries to provide an implementation of a virtual function with the same name as an already existing virtual function in its parent class. Did you change the signatures of your function in `Simple`? i.e. having different number/types of parameters"}, {"id": 4299, "value": "Converted your post to private since it contains code. Reminder: you should not publicly share your code on Piazza.. . Student answer is good though and you might want to try out the suggestions they provided."}, {"id": 4300, "value": "Using static casts, you should initialize a new instance of the card class.. E.g.:. Card c = Card(static_cast<Rank>(rank), static_cast<Suit>(suit));"}, {"id": 4301, "value": "Resolved"}, {"id": 4302, "value": "Players don't play cards during making trump. If it's round 2 of making trump and it's the dealer's turn, the dealer has to order up (this is called *screwing the dealer* in the spec). To answer the other question, Nine of Hearts would be trump suit, but King of Diamonds would not be since it's a Diamond rather than a Heart."}, {"id": 4303, "value": "From the spec, you can \"Write helper functions in `Card.cpp`\u00a0and\u00a0`Pack.cpp`\u00a0as non-member functions in the\u00a0`.cpp` files and declare them\u00a0`static`\". . The "}, {"id": 4304, "value": "You can assume there will be `PACK_SIZE` number of cards in the file.. . For `shuffle`, you can also assume there are `PACK_SIZE` number of cards."}, {"id": 4305, "value": "Make sure you are not dereferencing a null pointer. It's good practice to check that a pointer is not null before dereferencing."}, {"id": 4306, "value": "There are many ways to implement this invariant. The spec is referring to more of a design choice to ensure that the human player's hand is always kept in sorted order. You can design it however you want as long as the player's cards are sorted for the entire hand."}, {"id": 4307, "value": "Ten of diamonds If neither is led suit either, it is based off of value first and then the suit of the card\u00a0"}, {"id": 4308, "value": "It will be released after the checkpoint due date."}, {"id": 4309, "value": ""}, {"id": 4310, "value": "The card will be of the form [rank] of [suit], like Two of Spades or Three of Clubs. So you need to read in three things: the rank, the word \"of\", and the suit.. . Try making a dummy string and use that for reading in \"of\", then use what you have to read in the rank and suit."}, {"id": 4311, "value": "Take a look at the P3 FAQ\u00a0@1463\u00a0\"Q: How do I use the erase function?\""}, {"id": 4312, "value": "The operator<< and operator>>\u00a0 are implemented for you in the starter code only for Suit and Rank. You have to implement the operators for Card. Check out the RME for the operator<< and operator>> in Card.h for what these functions are supposed to do."}, {"id": 4313, "value": "Try ignoring the nonexistence of duplicates in a deck of cards. Just imagine someone describes two cards to you and asks if they are the same or if the one on the left is less than or greater than the one on the right. So >= just returns true if either > is true or == is true."}, {"id": 4314, "value": "Resolved"}, {"id": 4315, "value": "How are you trying to compile? Does it not compile in both the terminal and your IDE, or just one or the other? Can you screenshot the error that gets produced?"}, {"id": 4316, "value": "You don't want to have class Card {...}; in your cpp file because this is redefinition.. If you need to implement a function outside the class, what you can do is for example Rank Card::get_rank() const {...}. \"Card::\" specifies that this function is a member function of class Card."}, {"id": 4317, "value": "For functions like add_and_discard, you are not going to assert on the function's return value (since it is void), but on the effect that calling that function had on the simple player's hand. For example, if I were to test the add_add_discard function, I would initialize a simple player and populate the player's hand with five cards. Then I would call the player's add_and_discard function with some upcard. Finally, I would check that the correct card was removed from the player's hand.Follow up if you have any questions!"}, {"id": 4318, "value": "The class is\u00a0declared in the header file, but you need to\u00a0define it in the cpp file. See these notes for more info."}, {"id": 4319, "value": "Most likely, you are passing in a value to string to suit that isn't actually a suit. Probably the \"of\" in Two of spades for example."}, {"id": 4320, "value": "A good general testing strategy for Card_tests is making sure you are testing game-specific card combinations like the right and left bowers in functions that may have special cases or act differently with them. I would recommend going through the functions and adding tests that might be interesting with the bowers."}, {"id": 4321, "value": "Note: Even though this a small snippet of code, please avoid sharing anything other than necessary (hence converting the post to private).. . As the student answer suggests, this needs to be == comparison, not a assignment (=)."}, {"id": 4322, "value": "\"In shuffle\" is a variant of riffle shuffle. You want to perform \"in shuffle\" 7 times. More information can be found here."}, {"id": 4323, "value": "You want to keep only one copy of card.cpp in your project file. Either adding it or replacing should work.. . Edit: to add on to the staff answer, if you already downloaded the starter files, you would want to replace the existing definitions for the 2 modified starter functions."}, {"id": 4324, "value": "I would suggest to read through the spec again and think of each and every scenario that may happen. For instance, if you want to test make_trump:. Round 1:. 2+ face card. include Left Bowernot include left Bower. <2 face card. Round 2:. 1+ face card, not dealer<1 face cardscrew the dealeretc. . There are many more scenarios you can test. Try your best!. . You can expose 20 bugs in Simple Player Test"}, {"id": 4325, "value": "They would have the same rank and suit"}, {"id": 4326, "value": "The statement \"Card a2 is less than card b2\" should be true, but you're calling an ASSERT_FALSE() on that statement.. . b2 is the left bower since the trump is diamonds and b2 is the jack of hearts (the other red jack). The left bower is the second highest card in the game, second only to the right bower (in this case, jack of diamonds). However, your test is trying to assert that a2 would be higher than b2. a2 is not the right bower, so b2 is higher than a2.. . Conceptually, treat the left bower as trump. In this case, the jack of hearts should be considered a diamond by card_less."}, {"id": 4327, "value": "Remember to reset the pack at the end of the shuffle."}, {"id": 4328, "value": "No, the simple player will take the trump suit into account when deciding what card to discard. Your Card_less function should be used in SimplePlayer add_and_discard."}, {"id": 4329, "value": "The shuffle and make_trump functions in the Game class will serve a different purpose than, for example, the shuffle function in Pack. In the Game class, your goal is to simulate a game of euchre. In the screenshot, we provided suggestions for helper functions to use in the Game class to make it easier to structure.\u00a0"}, {"id": 4330, "value": "Try testing some edge cases within the SimplePlayer's strategy. For example, if a simple player is supposed to play the highest card, you can test to make sure the left/right bowers are played.\u00a0"}, {"id": 4331, "value": "You can abort if you wish. But again this isn\u2019t required.\u00a0"}, {"id": 4332, "value": "make sure you have put function implementations into card.cpp (you can copy and paste from the header file, card.h). Match the function headers from the header file to the cpp file exactly. If you don't have all the card.cpp functions implemented yet, add assert(false) to the ones you haven't finished to allow it to compile (don't forget `#include`)."}, {"id": 4333, "value": "Are you sure you didn't make any changes? If you made a git commit when it last worked, you can use\u00a0git status\u00a0and\u00a0git diff\u00a0to see specifically what may have changed.. . If you can't figure it out from that, or if you didn't make a commit (which\u00a0you\u00a0should be doing at least at certain milestones for cases like this), come into OH."}, {"id": 4334, "value": "Adding onto the student response, assert statements may also help you catch some bugs that may come up later in the project, specifically when coding euchre.cpp."}, {"id": 4335, "value": "Card.h specifies that the default constructor should follow standard order, which is the same as the order in pack.in. So you should start at nine."}, {"id": 4336, "value": "Try running your code on CAEN, it will run it in a similar environment as the autograder and might help you figure it out.\u00a0. . You can also try running your code with address sanitizer, just make sure to remove the tags when you sync to CAEN, because CAEN doesn't work with address sanitizer.. . "}, {"id": 4337, "value": "Resolved"}, {"id": 4338, "value": "No private tests, what you get on the autograder is your grade"}, {"id": 4339, "value": "Yes, or, what other type of variable could you use that is similar to an array and has a size that can change..."}, {"id": 4340, "value": "Adding onto the student answer, in both cases that you stated, we are comparing cards when we know what trump is. We've defined an explicit ordering of cards, and if you've implemented it correctly, the correct version of\u00a0Card_less\u00a0should make this process pretty simple."}, {"id": 4341, "value": "See followups."}, {"id": 4342, "value": "They are just there to have a complete card class, they are not used."}, {"id": 4343, "value": "You should be able to access the cards array in\u00a0Pack.cpp directly because it is declared in Pack.h. Your issue might be that you're trying to copy your vector into\u00a0cards using an assignment operator. You'll have to iterate through every card in the vector and copy them one by one into the array.\u00a0"}, {"id": 4344, "value": "Make sure you give your private variable name\u00a0a type (string is probably the best option here)."}, {"id": 4345, "value": "I'd recommend coming into OH so that someone on staff can take a look. It's hard to determine a cause with the context you've given."}, {"id": 4346, "value": "Mark as resolved."}, {"id": 4347, "value": "Resolved"}, {"id": 4348, "value": "No. If they are the same, you should return false."}, {"id": 4349, "value": "When writing Card functions, you should not be considering any rules about the Euchre game. You should view it as an independent class, thus you can be given any 2 cards into Card_less"}, {"id": 4350, "value": "Yes, those are just helpers for reading in or printing out Rank/Suit enum types. Those will be inherently called if you try to do something like cout << SPADES (Suit enum type)."}, {"id": 4351, "value": "If we're on round 2 and we reach the dealer, then the dealer must order up the suit of the same color of upcard (ie. if upcard = Spades, order up Clubs), no matter what"}, {"id": 4352, "value": "You can use a temp variable to hold the current value of next so that you can increment next and still have a copy its old value. Or you can use a postfix increment on next. For example, return array[i++] will return array[i] and then increment i after returning.\u00a0"}, {"id": 4353, "value": "It could be that you forgot the scope resolution operator, in which case you would just have to define the function like: bool Card::is_face_or_ace() const { . I'm not 100% sure about the issue with the 'this' keyword, but you actually don't need to use it--you can just use rank directly"}, {"id": 4354, "value": "This is happening because you have a return statement before incrementing next. There's a couple ways to get around this--but basically you're gonna need some way to store the value of next before incrementing it"}, {"id": 4355, "value": "It could be a couple things--but in order for Player_factory to work, all of the Player functions have to be implemented (if there are any pure virtual functions that are not yet implemented, the class is considered \"abstract\"). Also double check that the function signatures in your Player.cpp file exactly match those that are in Player.h. I've seen people forget \"const\" or an \"&\", which would technically make it a different function and cause this issue"}, {"id": 4356, "value": "You shouldn't have class Card{...} in Card.cpp. Just define the functions."}, {"id": 4357, "value": "euchre 3d is my favorite, it's on the app store. the rules are configurable and probably a bit complicated for the scope of this project, but for the most part it maps onto the rules we use in p3."}, {"id": 4358, "value": "I'm not sure if you've changed your code since, but your << operator has ' of ' using single quotes which is causing that number to show up. Change it to double quotes and you should be good"}, {"id": 4359, "value": "Left-hand side and right-hand side I believe!"}, {"id": 4360, "value": "You're likely passing an invalid parameter for\u00a0suit."}, {"id": 4361, "value": "You can create an istringstream and test it the same way as done in\u00a0Card_public_test.cpp:. "}, {"id": 4362, "value": "I checked your autograder submission and it looks like you've resolved the issue! If you have any questions though feel free to follow up"}, {"id": 4363, "value": "No, you should not be editing any files that will not be submitted in the final submission, because the autograder can't see your edits."}, {"id": 4364, "value": "yes"}, {"id": 4365, "value": "It will be submitted for the final submission, it just isn't submitted for the checkpoint. So yes, you should write tests because eventually you will have to submit this file.. . EDIT: You do not actually need to submit Pack_tests, but it is useful to write it anyways to test your code."}, {"id": 4366, "value": "From the spec: value of cards.. When there is no trump nor lead suit, it fits the simplest case: cards are ordered by rank (A > K > Q > J > 10 > 9), with ties broken by suit (D > C > H > S).. For example, Ace of Hearts > King of Diamonds, Queen of Clubs > Queen of Spades."}, {"id": 4367, "value": "You might have forgotten to create a function body for the Card_less function (copy paste the function stub to Card.cpp and curly braces)"}, {"id": 4368, "value": "You'll need to implement a constructor for SimplePlayer that takes in one parameter (the name variable) and sets the name member variable equal to that parameter.\u00a0"}, {"id": 4369, "value": "If you're using XCode, make sure you set the \"Custom Working Directory\" in \"Edit Scheme > Options\""}, {"id": 4370, "value": "Assume the human doesn't cheat"}, {"id": 4371, "value": "What do you mean it \"doesn't work\"? Could you provide the error?. . The ostream operator should just print the player name into os and then return the ostream. It is just useful so that you can do cout << player; instead of having to do cout << player.get_name()."}, {"id": 4372, "value": "Resolved"}, {"id": 4373, "value": "No, the operator += is not defined like that. What you can do is:. . Rank r = (Rank) (JACK + 1). JACK is automatically converted to an int, and then you cast it back to Rank. Just make sure not to go out of bounds."}, {"id": 4374, "value": "You can find the lowest card with Card_less. The statement you quoted is trying to say that you shouldn't have to sort the entire hand to do so. Instead, you can just use the more standard way to find the min/max of an array."}, {"id": 4375, "value": "For example: when you are looking for the lowest card when you don't have the led suit (assume trump is hearts and led is diamonds). Your lowest card not considering trump is 9 of hearts, but your lowest card considering trump is 10 of clubs. In this case you need to consider trump."}, {"id": 4376, "value": "It's probably because the size here is a const int"}, {"id": 4377, "value": "you could create a shuffled array or do the shuffling in place by using temp variables either way could work\u00a0"}, {"id": 4378, "value": "remove the address sanitizer tags and resync and remake -fsanitize=address -fsanitize=undefined\u00a0"}, {"id": 4379, "value": "Yup!"}, {"id": 4380, "value": "I believe lldb is Mac-specific and that gdb is the correct setup for Windows. Whatever was autogenerated by VS Code should be fine."}, {"id": 4381, "value": "@5"}, {"id": 4382, "value": "As the student answer states, you don't have to worry about it. We'll cover destructors soon TM."}, {"id": 4383, "value": "The goal is to initialize the Pack object by reading from (not into)\u00a0pack_input. Calls to get_rank() and\u00a0get_suit() should be made on Card objects that have already been initialized. Therefore, instead of calling these functions, you should be putting data into each index of the cards array."}, {"id": 4384, "value": "You need to make sure to implement the >> for card before you implement reading in a pack."}, {"id": 4385, "value": "Without knowing more about this it's a bit hard to determine what's wrong. Feel free to follow up with more information on your problem, but I would try recreating your project 3 in XCode. You may also find more success at OH."}, {"id": 4386, "value": "To check if a card has both a specified Rank and Suit, you would have to check these separately, using && or || depending on what you need."}, {"id": 4387, "value": "@5"}, {"id": 4388, "value": ". . Initializes the Pack to be in the following standard order: the cards of the lowest suit arranged from lowest rank to highest rank, followed by the cards of the next lowest suit in order from lowest to highest rank, and so on.. . . You should be initializing the cards array in the order described above, as well as the variable next"}, {"id": 4389, "value": "You should not be declaring a new istream to read pack_input. pack_input is already an istream, so you can just use it as one:. . pack_input >> var1 >> var2 >> etc..."}, {"id": 4390, "value": "if you look at the function header, it asks to return the istream. So return\u00a0is"}, {"id": 4391, "value": "Seconding the student response, I find the images on the Wikipedia page most helpful. You should need to use\u00a0std::swap"}, {"id": 4392, "value": "Yes, there should be private variables part of your SimplePlayer and HumanPlayer classes."}, {"id": 4393, "value": "Since it \"Does not consider trump\" (as stated in the 'effects' description), no. They only consider the value of the cards"}, {"id": 4394, "value": "Yes, I believe it is expected that the function should return false if it is not returning true. The return type of the function is bool, and there is no in-between value we could return, so if we aren't returning true, it would make sense to return false."}, {"id": 4395, "value": "Yup! That's totally valid as long you don't have a circular reference, meaning you don't also use <= when you define <."}, {"id": 4396, "value": "It seems like you aren't returning anything in the functions, and they aren't void so you should be returning something."}, {"id": 4397, "value": "You're definitely on the right track. It may be helpful to categorize the possible differences in a bit more organized fashion to see if you're covering all cases. Here's how I would start:. . Are they both trump? If so, is either a bower? I'll let you figure out the rest of this case. Is only one of them trump?. Is neither trump?. . Enumerating each case like this starting from larger-and-more-general to smaller-and-more-specific will let you make sure you're considering every possible case."}, {"id": 4398, "value": "While the operators do not check for trump, they do check for the suit of the card. == will only return true if the two cards are exactly equal, meaning the rank and suit are the same, irrespective of anything else (like trump)."}, {"id": 4399, "value": "The trump suit is the strongest suit in the deck. The rest of the suits (including the suit of the other color) follows by the pattern mentioned in the spec Diamonds > Clubs > Hearts > Spades.\u00a0"}, {"id": 4400, "value": "For other students: Make sure you're using the W23 version of Euchre starter code!"}, {"id": 4401, "value": "Resolved"}, {"id": 4402, "value": "From the moment trump is made (and also while considering trump during make_trump but that's not important here), **the left bower is the trump suit**. So If trump is Hearts, Jack of Diamonds would be a Heart rather than a Diamond for the duration of the hand. This also means if someone leads with Jack of Diamonds, the lead suit is trump, which is Hearts."}, {"id": 4403, "value": "Run the following command:. . git push --set-upstream origin main. . Or replace main with the name of whatever branch you are on. You don't do git push [filename] ever. Instead, you git add [filename], then commit your changes, and just run git push. The \"--set-upstream origin main\" is optional, and it just tells git where to push to by default."}, {"id": 4404, "value": "It seems like you might be doing . . lhs != rhs. .  This is wrong, as it would cause the same function to be called infinitely. You are defining what != means for the Card class, so you can't just use != directly between two objects of the type Card within that definition."}, {"id": 4405, "value": "At the end of operator>> and operator<< functions, you must return the stream. In this case, you'll add. . return os;. and. . return is;. at the end of your functions."}, {"id": 4406, "value": "You may have to change the working directory. Refer to this part of the tutorial, subtitled \"Working Directory\". https://eecs280staff.github.io/tutorials/setup_xcode.html#working-directory"}, {"id": 4407, "value": "You don't need to use it. Just assume the human won't cheat."}, {"id": 4408, "value": "It can't use the get functions as it needs to change the values."}, {"id": 4409, "value": ""}, {"id": 4410, "value": "Yes! When dealing with class objects, you would use the dot (.) operator to call any member functions of that class on the object. For example, if you were to do what you suggested by calling a.is_trump(trump); (don't forget to pass in a trump value as well) it would return whether or not that object is the same suit as the trump suit.\u00a0. . Think of it this way, each card is an entirely separate \"copy\" of the card class, therefore using the dot operator calls the member functions just for\u00a0that card. Even if the function doesn't take in a card variable the private member variables are declared specifically to that card (i.e. rank and suit) which makes this possible. Hope this makes sense!\u00a0"}, {"id": 4411, "value": "I believe the player class should remain abstract, you just have to build out the SimplePlayer and HumanPlayer"}, {"id": 4412, "value": "Try adding an else statement somewhere. For instance if I know that the value passed in a function is either 1 2 or 3, I can write the function like this:. . ```. if input == 1 return \"1\". else if input == 2 return \"2\". else if input == 3 return \"3\". ```. In this case we don't return in all control paths, because what if the user inputs 4? However, because we know that the user can't input 4, we can write it like this to ensure that we return in all control paths:. ```. if input == 1 return \"1\". else if input == 2 return \"2\". else return \"3\". ```. This is just pseudocode but hopefully you'll be able to understand the analogy I'm trying to make and apply it to cards."}, {"id": 4413, "value": "I would start off by creating a temp copy of the cards array to keep track of the original ordering, and then using a for loop through the deck size to reorder the cards into your actual cards array.\u00a0"}, {"id": 4414, "value": "on canvas, it says 149, so 149?\u00a0"}, {"id": 4415, "value": "This link should tell you everything you need to know about enums in this project (initializing, comparing, etc.)! https://eecs280staff.github.io/p3-euchre/enum.html"}, {"id": 4416, "value": "please email eecs280admin@umich.edu"}, {"id": 4417, "value": "Trump is diamonds, and since the Jack of hearts was led(left bower) it's also a trump card, so you must play trump(10 of diamonds) here."}, {"id": 4418, "value": "Yes, you should be implementing all functions that are inside the player class, as well as a constructor, and whatever helper functions you think are necessary."}, {"id": 4419, "value": "Also, from the spec:. . Your implementation may assume any pack input is formatted correctly, with exactly 24 unique and correctly formatted cards.. . You shouldn't really\u00a0have to worry about keeping count. You can just read until the entire file is read, similarly to putting\u00a0std::cin >> <variable> in a while loop."}, {"id": 4420, "value": ".h files contain the function declarations and the .cpp files contain the implementation of the functions declared in the .h file. Thus, ensure the constness, return type, and name of the functions you implement match those of the .h file.\u00a0"}, {"id": 4421, "value": "The return type of this function, as you can see, has a type\u00a0std::istream, which is not void. You need to return something with this type at the end of your function. What variable do we have access to in this function with type std::istream?"}, {"id": 4422, "value": ""}, {"id": 4423, "value": "As \"effects\" states, all you need to do is reset the \"next index to first card in the Pack\".\u00a0next is a variable that tracks index, so you just need to set it to 0."}, {"id": 4424, "value": "For anyone else coming across this post:1. Check for whitespaces. For example, \"Three of Spades \" is not equal to \"Three of Spades\"2. Make sure your == operator is correctly comparing lhs and rhs. See the followup discussion for more information\u00a0"}, {"id": 4425, "value": "As the student answer suggests, ensure that any functions within the Card class declaration in Card.h are implemented in Card.cpp with the scope resolution operator (Card::).\u00a0"}, {"id": 4426, "value": "You want to go through all spades (9, 10, etc), then all hearts (9, 10, etc), etc. So your loops combined should call the constructor 24 times.. . Here is info on how to call a constructor (here's a screenshot of the specific part - look at C++ class:. "}, {"id": 4427, "value": "You could make your own array, or use integer casting to cast from integer to enum (for example,\u00a0(Rank) 0 would return\u00a0TWO"}, {"id": 4428, "value": "You could theoretically declare a new card within the loop and put the assert right after that in the loop as well. This way the card is being written over in every iteration and the assert is being ran with the new data. I haven't tried this myself so I don't know if it'd work the way you're aiming for. . Edit: I just tried this approach and it worked\u00a0"}, {"id": 4429, "value": "It should be failing, since you haven't defined the functions in Card.h, which is why it is failing. You need to define function stubs as stated in the spec, and then it will compile (though it will still fail because you will have assert(false) in each of them."}, {"id": 4430, "value": "Think about how operators are defined. The way we have been doing it is just defining it for two objects of the same type. However, you can also define operators between two different object types:. . . bool operator==(const ClassA& a, const ClassB& b) {.     // some implementation. }  . . In cpp, the == operator is defined between cstring's and std::string's, and it just compares them by comparing their contents."}, {"id": 4431, "value": "No, it means that you should be creating a derived class. More info on that can be found in the notes here.\u00a0"}, {"id": 4432, "value": "The trump suit is the suit of the upcard. In your example, the trump suit would be hearts."}, {"id": 4433, "value": "This function is in place so that the normal function can access the private member variables of the Card class. You do not have to implement this friend function, it essentially serves as a reference to the normally declared std::istream & operator>>(std::istream &is, Card &card); function that can be found below without the friend prefix. You'll use this function to directly access the rank and suit member variables. Hope that helps\u00a0"}, {"id": 4434, "value": "Screen_Shot_2023-02-05_at_9.34.08_PM.png"}, {"id": 4435, "value": "It is worth 5% of the total Project 3 grade, per spec."}, {"id": 4436, "value": "You don't actually need to assert this, but yes, that would be a way to do it. Since the enum values are ints, you could also just check that it is an integer between 0 and 12."}, {"id": 4437, "value": ""}, {"id": 4438, "value": "The erase function takes in an iterator to the object being erased. In order to get an iterator, you can call the vector.begin() function which gives you an iterator to the first element. Just like you do with address mathematics, you can then add the position to get the iterator to a specific element in a vector. An example looks like vec.erase(vec.begin() + x). See here for more details."}, {"id": 4439, "value": "I would recommend using some sort of nested loop to cycle through the ranks and suits, declaring different cards to insert into the array\u00a0"}, {"id": 4440, "value": "For this function I would recommend utilizing the is_left_bower(Suit trump) function implemented a little farther down in the file"}, {"id": 4441, "value": ". . . . . . Do we have to test for the >> operator? I have one for the << operator but I have no clue what to do for the >> one.. . . . . . . Yes. First, create a string stream similar to what you did for testing image_print(). You can then call card >> operator, and afterward you can check whether it read in rank and suit correctly.\u00a0"}, {"id": 4442, "value": "Your function definition is incorrect. What is your return type, and what's the name of the function?. . Please make your post private when you are sharing code."}, {"id": 4443, "value": ". The reason it doesn't include one was because I couldn't find a constructor for the Player class to actually put in my subclass, and I'm assuming that this is what is keeping my code from compiling. I also tried adding Player() in the subclass constructor, but that said that a cast to public class Player is not allowed. So I'm confused on how we're supposed to include the constructor for the super class, and also how to fix the error that I get when trying to compile.. . You won't need a constructor for the superclass. Player is an abstract class that you would never make an instance of, instead, you make Simple and Human players. C++ by default will have an implicit constructor for the super class (super class is a Java term in C++ it is usually called the parent class). The subclass (again a java term, equivalently in C++ called child class) will inherit that constructor but as you can imagine, it is not enough. Simple player has a name that has to be initialized so you will need a custom constructor.. . . I keep getting this error that says that SimplePlayer has not been declared or that a type-specifier is expected before I return a new SimplePlayer, and I was kind of confused as to what that is about. . \u00a0For the type-specifier issue, remember two things. To have a semicolon at the end of SimplePlayer Class definition and also remember to #include \"Player.h\". . . class SimplePlayer : public Player {. public:. \t// stuff here. private:. \t// stuff here. }; // semicolon here"}, {"id": 4444, "value": ". Is there something we should be doing with the definition of this function in Card.cpp in order to correctly access the private member variables?. . No, you shouldn't change the definitions.\u00a0. . You can make a private post with your code and the compiler error for us to take a look."}, {"id": 4445, "value": "The portion of the spec you're talking about lays out three different contexts in which to compare cards. The simple case is when cards are ordered by rank (A > K > Q > J > 10 > 9), with ties broken by suit (D > C > H > S), you can think of the simple case as basic card rules. This is the logic that you will want to apply in the overloaded operators. Considering the trump suit and led suit will come into play in different functions and files.. . Think about card.cpp as a more general card file with a few euchre-specific functions. For example, we could use this to implement a different card game."}, {"id": 4446, "value": "Yes and no. There will be a good amount of if statements, but you can write this function without using else if/else or any nesting. A lot of the logic and cases can be implicit. Think about all of the different instances of two cards being compared and try to lay these out in a way where you consider the highest-value card first. Then, see what is true about the cards if they don't enter an if statement.\u00a0"}, {"id": 4447, "value": "It's hard for us to tell based on the screenshot. The issue might be with your get_rank() or an uninitialized card."}, {"id": 4448, "value": "You will have to wait for an instructor to see your code, but here's a hint: make sure you are checking if the card is the left bower, and if it is then you are returning the trump suit. Otherwise, it should just return the suit."}, {"id": 4449, "value": "https://en.wikipedia.org/wiki/Faro_shuffle#Example. The first example here - the one that shows \"in-shuffle\""}, {"id": 4450, "value": "Try running your code through CAEN"}, {"id": 4451, "value": "Think about the private member variables contained in Pack. Which ones might give you information about whether there still exist cards left to deal? (Or think about it this way--how would you know how many cards have already been dealt?)"}, {"id": 4452, "value": "Yes"}, {"id": 4453, "value": "@5"}, {"id": 4454, "value": "For the first error, you should switch the position of the Card and Rank around the scope resolution pointer. Same for the last error. I think the note is not an error but a reminder.. . Just to clarify, when you write the class member functions, you should remember that the return type is always put in front of the class name."}, {"id": 4455, "value": "It doesn't look like you have a .gitignore file? if you do . . `nano .gitignore`. . in terminal, it should create a .gitignore file where you can add all the files you want ignore. Do Ctrl+S, Ctrl+X to save and quit out of the nano editor."}, {"id": 4456, "value": "I think you return the suit of the given card, and if the given card is the left bower, then return the trump suit, because the left bower is considered to be in the trump suit.\u00a0"}, {"id": 4457, "value": "You're sort of on the right track; however, you will only return a single suit in this function (either the suit of the card, or the trump suit if you card is a left bower)."}, {"id": 4458, "value": "yes, the suit that you pass in as the parameter is the trump suit"}, {"id": 4459, "value": "For clarification, all of your implementation for Card should be in Card.cpp and you should not modify any .h files. Be sure to use the scope resolution operator for implementing member functions of the card class."}, {"id": 4460, "value": "You can only use the const keyword on member functions. You might have forgotten a \"Card::\" before the name of your function."}, {"id": 4461, "value": "I believe that it should compare the cards according to Euchre rules. Thus, it should compare both the ranks and the suits of each card."}, {"id": 4462, "value": "You can only use the == operator to compare objects directly if they are predefined types (say integers or characters). For types you construct yourself, you would need to overload the == operator to give it any meaning for that type. For example, you can use the == operator for strings because the string class defines an == operator which checks if each character of the string is the same."}, {"id": 4463, "value": "if you copying this into your terminal, you want to do sth like. . # change directory to where you want to store your project. # and create a folder. wget https://eecs280staff.github.io/p3-euchre/starter-files.tar.gz. tar xzf starter-files.tar.gz. mv starter-files/* . # move files from starter-files folder to your current folder. rm -rf starter-files.tar.gz starter-files"}, {"id": 4464, "value": "Your ssh key should work for your entire personal device. It is not folder specific, and once your set it up once you shouldn't need to tamper with it again."}, {"id": 4465, "value": "Feb 4th most likely."}, {"id": 4466, "value": "As always, if you're reading ahead then don't put in too much work before the project is officially released -- the spec is liable to change. To briefly answer your questions:. . 1. It's to have a \"complete\" card class -- you're right you don't need to use them for euchre. . . 2. Correct.. . 3. Similar to 1. Your understanding is correct, you shouldn't have duplicates in euchre."}], "links": [{"source": 3418, "target": 3418, "value": 0.9999999999999996}, {"source": 3419, "target": 3419, "value": 0.9999999999999998}, {"source": 3420, "target": 3420, "value": 0.9999999999999999}, {"source": 3424, "target": 3424, "value": 1.0000000000000002}, {"source": 3426, "target": 3458, "value": 1.0}, {"source": 3426, "target": 3515, "value": 1.0}, {"source": 3426, "target": 3688, "value": 1.0}, {"source": 3426, "target": 4084, "value": 1.0}, {"source": 3426, "target": 4086, "value": 1.0}, {"source": 3426, "target": 4206, "value": 1.0}, {"source": 3426, "target": 4301, "value": 1.0}, {"source": 3427, "target": 3433, "value": 0.6666666666666669}, {"source": 3427, "target": 3451, "value": 0.6666666666666669}, {"source": 3428, "target": 3458, "value": 0.7071067811865475}, {"source": 3428, "target": 3515, "value": 0.7071067811865475}, {"source": 3428, "target": 3688, "value": 0.7071067811865475}, {"source": 3428, "target": 4084, "value": 0.7071067811865475}, {"source": 3428, "target": 4086, "value": 0.7071067811865475}, {"source": 3428, "target": 4206, "value": 0.7071067811865475}, {"source": 3428, "target": 4301, "value": 0.7071067811865475}, {"source": 3429, "target": 3429, "value": 0.9999999999999998}, {"source": 3430, "target": 3430, "value": 1.0000000000000002}, {"source": 3431, "target": 3431, "value": 0.9999999999999998}, {"source": 3432, "target": 3432, "value": 1.0000000000000002}, {"source": 3433, "target": 3433, "value": 1.0000000000000002}, {"source": 3433, "target": 3451, "value": 1.0000000000000002}, {"source": 3434, "target": 3458, "value": 0.7071067811865475}, {"source": 3434, "target": 3515, "value": 0.7071067811865475}, {"source": 3434, "target": 3688, "value": 0.7071067811865475}, {"source": 3434, "target": 4084, "value": 0.7071067811865475}, {"source": 3434, "target": 4086, "value": 0.7071067811865475}, {"source": 3434, "target": 4206, "value": 0.7071067811865475}, {"source": 3434, "target": 4301, "value": 0.7071067811865475}, {"source": 3438, "target": 3458, "value": 0.7071067811865475}, {"source": 3438, "target": 3515, "value": 0.7071067811865475}, {"source": 3438, "target": 3688, "value": 0.7071067811865475}, {"source": 3438, "target": 4084, "value": 0.7071067811865475}, {"source": 3438, "target": 4086, "value": 0.7071067811865475}, {"source": 3438, "target": 4206, "value": 0.7071067811865475}, {"source": 3438, "target": 4301, "value": 0.7071067811865475}, {"source": 3442, "target": 3442, "value": 0.9999999999999998}, {"source": 3444, "target": 3451, "value": 1.0000000000000002}, {"source": 3446, "target": 3446, "value": 0.9999999999999998}, {"source": 3448, "target": 3448, "value": 1.0000000000000002}, {"source": 3451, "target": 3451, "value": 1.0000000000000002}, {"source": 3458, "target": 3458, "value": 1.0}, {"source": 3458, "target": 3515, "value": 1.0}, {"source": 3458, "target": 3688, "value": 1.0}, {"source": 3458, "target": 4084, "value": 1.0}, {"source": 3458, "target": 4086, "value": 1.0}, {"source": 3458, "target": 4206, "value": 1.0}, {"source": 3458, "target": 4301, "value": 1.0}, {"source": 3460, "target": 3460, "value": 1.0}, {"source": 3462, "target": 3462, "value": 1.0000000000000002}, {"source": 3465, "target": 3465, "value": 0.9999999999999999}, {"source": 3467, "target": 3467, "value": 0.9999999999999999}, {"source": 3468, "target": 3515, "value": 1.0}, {"source": 3468, "target": 3688, "value": 1.0}, {"source": 3468, "target": 4084, "value": 1.0}, {"source": 3468, "target": 4086, "value": 1.0}, {"source": 3468, "target": 4206, "value": 1.0}, {"source": 3468, "target": 4301, "value": 1.0}, {"source": 3472, "target": 3710, "value": 0.6486493048989729}, {"source": 3475, "target": 3515, "value": 0.7071067811865475}, {"source": 3475, "target": 3688, "value": 0.7071067811865475}, {"source": 3475, "target": 4084, "value": 0.7071067811865475}, {"source": 3475, "target": 4086, "value": 0.7071067811865475}, {"source": 3475, "target": 4206, "value": 0.7071067811865475}, {"source": 3475, "target": 4301, "value": 0.7071067811865475}, {"source": 3491, "target": 3491, "value": 1.0000000000000002}, {"source": 3495, "target": 3515, "value": 1.0}, {"source": 3495, "target": 3688, "value": 1.0}, {"source": 3495, "target": 4084, "value": 1.0}, {"source": 3495, "target": 4086, "value": 1.0}, {"source": 3495, "target": 4206, "value": 1.0}, {"source": 3495, "target": 4301, "value": 1.0}, {"source": 3498, "target": 3498, "value": 0.9999999999999999}, {"source": 3500, "target": 3515, "value": 0.7071067811865475}, {"source": 3500, "target": 3688, "value": 0.7071067811865475}, {"source": 3500, "target": 4084, "value": 0.7071067811865475}, {"source": 3500, "target": 4086, "value": 0.7071067811865475}, {"source": 3500, "target": 4206, "value": 0.7071067811865475}, {"source": 3500, "target": 4301, "value": 0.7071067811865475}, {"source": 3501, "target": 3501, "value": 1.0000000000000004}, {"source": 3503, "target": 3503, "value": 1.0000000000000002}, {"source": 3510, "target": 3510, "value": 1.0}, {"source": 3513, "target": 4196, "value": 0.6142951168339512}, {"source": 3513, "target": 4239, "value": 0.6155870112510924}, {"source": 3515, "target": 3515, "value": 1.0}, {"source": 3515, "target": 3688, "value": 1.0}, {"source": 3515, "target": 4084, "value": 1.0}, {"source": 3515, "target": 4086, "value": 1.0}, {"source": 3515, "target": 4206, "value": 1.0}, {"source": 3515, "target": 4301, "value": 1.0}, {"source": 3519, "target": 3519, "value": 0.9999999999999999}, {"source": 3524, "target": 3524, "value": 0.9999999999999999}, {"source": 3528, "target": 3528, "value": 1.0000000000000002}, {"source": 3532, "target": 3688, "value": 0.7071067811865475}, {"source": 3532, "target": 4084, "value": 0.7071067811865475}, {"source": 3532, "target": 4086, "value": 0.7071067811865475}, {"source": 3532, "target": 4206, "value": 0.7071067811865475}, {"source": 3532, "target": 4301, "value": 0.7071067811865475}, {"source": 3538, "target": 3538, "value": 0.9999999999999999}, {"source": 3542, "target": 3542, "value": 1.0}, {"source": 3548, "target": 3548, "value": 0.9999999999999999}, {"source": 3550, "target": 3550, "value": 0.9999999999999999}, {"source": 3552, "target": 3552, "value": 1.0}, {"source": 3556, "target": 3556, "value": 0.9999999999999994}, {"source": 3557, "target": 3557, "value": 0.9999999999999998}, {"source": 3564, "target": 3564, "value": 0.9999999999999999}, {"source": 3568, "target": 3568, "value": 1.0000000000000002}, {"source": 3580, "target": 3580, "value": 1.0}, {"source": 3582, "target": 3582, "value": 1.0000000000000002}, {"source": 3587, "target": 3587, "value": 1.0000000000000002}, {"source": 3590, "target": 3590, "value": 0.9999999999999998}, {"source": 3592, "target": 3592, "value": 1.0000000000000002}, {"source": 3592, "target": 4017, "value": 0.7290148043997555}, {"source": 3597, "target": 3597, "value": 1.0}, {"source": 3598, "target": 3602, "value": 1.0}, {"source": 3601, "target": 3602, "value": 1.0}, {"source": 3602, "target": 3602, "value": 1.0}, {"source": 3605, "target": 3605, "value": 1.0000000000000002}, {"source": 3607, "target": 3688, "value": 1.0}, {"source": 3607, "target": 4084, "value": 1.0}, {"source": 3607, "target": 4086, "value": 1.0}, {"source": 3607, "target": 4206, "value": 1.0}, {"source": 3607, "target": 4301, "value": 1.0}, {"source": 3612, "target": 3612, "value": 1.0000000000000002}, {"source": 3613, "target": 3613, "value": 0.9999999999999999}, {"source": 3614, "target": 3614, "value": 1.0}, {"source": 3618, "target": 3618, "value": 0.9999999999999998}, {"source": 3618, "target": 3655, "value": 0.7537783614444089}, {"source": 3618, "target": 4336, "value": 0.7152816976385906}, {"source": 3622, "target": 3688, "value": 0.7071067811865475}, {"source": 3622, "target": 4084, "value": 0.7071067811865475}, {"source": 3622, "target": 4086, "value": 0.7071067811865475}, {"source": 3622, "target": 4206, "value": 0.7071067811865475}, {"source": 3622, "target": 4301, "value": 0.7071067811865475}, {"source": 3624, "target": 3624, "value": 0.9999999999999998}, {"source": 3629, "target": 3629, "value": 0.9999999999999997}, {"source": 3631, "target": 3631, "value": 1.0000000000000002}, {"source": 3632, "target": 3632, "value": 1.0000000000000002}, {"source": 3639, "target": 3639, "value": 1.0000000000000002}, {"source": 3640, "target": 3640, "value": 1.0000000000000004}, {"source": 3641, "target": 3688, "value": 0.7071067811865475}, {"source": 3641, "target": 3903, "value": 0.7071067811865475}, {"source": 3641, "target": 4084, "value": 0.7071067811865475}, {"source": 3641, "target": 4086, "value": 0.7071067811865475}, {"source": 3641, "target": 4206, "value": 0.7071067811865475}, {"source": 3641, "target": 4301, "value": 0.7071067811865475}, {"source": 3646, "target": 3646, "value": 1.0000000000000002}, {"source": 3650, "target": 3650, "value": 1.0000000000000002}, {"source": 3651, "target": 3714, "value": 0.7698003589195012}, {"source": 3655, "target": 3655, "value": 1.0000000000000002}, {"source": 3655, "target": 3849, "value": 0.6804138174397719}, {"source": 3655, "target": 4336, "value": 0.7907736701585485}, {"source": 3656, "target": 3688, "value": 0.7071067811865475}, {"source": 3656, "target": 4084, "value": 0.7071067811865475}, {"source": 3656, "target": 4086, "value": 0.7071067811865475}, {"source": 3656, "target": 4206, "value": 0.7071067811865475}, {"source": 3656, "target": 4301, "value": 0.7071067811865475}, {"source": 3659, "target": 3659, "value": 0.9999999999999999}, {"source": 3661, "target": 3661, "value": 1.0000000000000002}, {"source": 3662, "target": 3662, "value": 1.0}, {"source": 3668, "target": 3688, "value": 0.7071067811865475}, {"source": 3668, "target": 4084, "value": 0.7071067811865475}, {"source": 3668, "target": 4086, "value": 0.7071067811865475}, {"source": 3668, "target": 4206, "value": 0.7071067811865475}, {"source": 3668, "target": 4301, "value": 0.7071067811865475}, {"source": 3670, "target": 3670, "value": 1.0}, {"source": 3670, "target": 3733, "value": 1.0}, {"source": 3675, "target": 3688, "value": 1.0}, {"source": 3675, "target": 4084, "value": 1.0}, {"source": 3675, "target": 4086, "value": 1.0}, {"source": 3675, "target": 4206, "value": 1.0}, {"source": 3675, "target": 4301, "value": 1.0}, {"source": 3688, "target": 3688, "value": 1.0}, {"source": 3688, "target": 4084, "value": 1.0}, {"source": 3688, "target": 4086, "value": 1.0}, {"source": 3688, "target": 4206, "value": 1.0}, {"source": 3688, "target": 4301, "value": 1.0}, {"source": 3689, "target": 4084, "value": 1.0}, {"source": 3689, "target": 4086, "value": 1.0}, {"source": 3689, "target": 4206, "value": 1.0}, {"source": 3689, "target": 4301, "value": 1.0}, {"source": 3690, "target": 3903, "value": 0.7071067811865475}, {"source": 3690, "target": 4084, "value": 0.7071067811865475}, {"source": 3690, "target": 4086, "value": 0.7071067811865475}, {"source": 3690, "target": 4206, "value": 0.7071067811865475}, {"source": 3690, "target": 4301, "value": 0.7071067811865475}, {"source": 3691, "target": 3691, "value": 1.0}, {"source": 3692, "target": 4336, "value": 0.7493075430155054}, {"source": 3694, "target": 3694, "value": 0.9999999999999998}, {"source": 3694, "target": 3773, "value": 0.6298897789321865}, {"source": 3695, "target": 4356, "value": 0.7171371656006361}, {"source": 3695, "target": 4425, "value": 0.6428571428571427}, {"source": 3698, "target": 3698, "value": 1.0000000000000002}, {"source": 3699, "target": 3699, "value": 1.0}, {"source": 3702, "target": 3702, "value": 1.0000000000000002}, {"source": 3710, "target": 3710, "value": 1.0}, {"source": 3712, "target": 3712, "value": 1.0}, {"source": 3714, "target": 3714, "value": 1.0000000000000002}, {"source": 3722, "target": 4084, "value": 1.0}, {"source": 3722, "target": 4086, "value": 1.0}, {"source": 3722, "target": 4206, "value": 1.0}, {"source": 3722, "target": 4301, "value": 1.0}, {"source": 3724, "target": 3724, "value": 1.0000000000000002}, {"source": 3724, "target": 3753, "value": 0.6383450536225747}, {"source": 3728, "target": 3728, "value": 0.9999999999999999}, {"source": 3730, "target": 3730, "value": 0.9999999999999999}, {"source": 3733, "target": 3733, "value": 1.0}, {"source": 3735, "target": 3735, "value": 0.9999999999999997}, {"source": 3739, "target": 3739, "value": 1.0}, {"source": 3744, "target": 4084, "value": 1.0}, {"source": 3744, "target": 4086, "value": 1.0}, {"source": 3744, "target": 4206, "value": 1.0}, {"source": 3744, "target": 4301, "value": 1.0}, {"source": 3745, "target": 3745, "value": 1.0000000000000002}, {"source": 3746, "target": 3746, "value": 1.0}, {"source": 3752, "target": 3752, "value": 0.9999999999999998}, {"source": 3753, "target": 3753, "value": 0.9999999999999999}, {"source": 3755, "target": 3755, "value": 0.9999999999999998}, {"source": 3756, "target": 3756, "value": 1.0}, {"source": 3761, "target": 3761, "value": 1.0000000000000002}, {"source": 3763, "target": 3763, "value": 1.0000000000000002}, {"source": 3764, "target": 3764, "value": 0.9999999999999998}, {"source": 3765, "target": 3765, "value": 0.9999999999999998}, {"source": 3767, "target": 3767, "value": 1.0000000000000002}, {"source": 3773, "target": 3773, "value": 0.9999999999999999}, {"source": 3774, "target": 3774, "value": 0.9999999999999998}, {"source": 3775, "target": 3775, "value": 1.0}, {"source": 3779, "target": 3779, "value": 0.9999999999999999}, {"source": 3783, "target": 3783, "value": 1.0000000000000002}, {"source": 3787, "target": 3787, "value": 0.9999999999999998}, {"source": 3788, "target": 3788, "value": 0.9999999999999998}, {"source": 3792, "target": 3792, "value": 1.0000000000000004}, {"source": 3793, "target": 3793, "value": 1.0}, {"source": 3796, "target": 3796, "value": 1.0}, {"source": 3797, "target": 3797, "value": 1.0000000000000002}, {"source": 3798, "target": 3798, "value": 1.0}, {"source": 3802, "target": 3802, "value": 1.0000000000000002}, {"source": 3803, "target": 4084, "value": 1.0}, {"source": 3803, "target": 4086, "value": 1.0}, {"source": 3803, "target": 4206, "value": 1.0}, {"source": 3803, "target": 4301, "value": 1.0}, {"source": 3806, "target": 3806, "value": 1.0}, {"source": 3807, "target": 3807, "value": 0.9999999999999994}, {"source": 3812, "target": 3812, "value": 0.9999999999999996}, {"source": 3814, "target": 3814, "value": 1.0000000000000002}, {"source": 3814, "target": 4298, "value": 0.6221710168382552}, {"source": 3819, "target": 3819, "value": 1.0000000000000002}, {"source": 3820, "target": 3820, "value": 1.0000000000000002}, {"source": 3824, "target": 3824, "value": 0.9999999999999997}, {"source": 3826, "target": 3826, "value": 0.9999999999999999}, {"source": 3831, "target": 3831, "value": 0.9999999999999994}, {"source": 3836, "target": 3836, "value": 1.0}, {"source": 3842, "target": 3842, "value": 1.0}, {"source": 3845, "target": 3845, "value": 0.9999999999999998}, {"source": 3846, "target": 3846, "value": 1.0}, {"source": 3847, "target": 3847, "value": 1.0}, {"source": 3849, "target": 3849, "value": 1.0000000000000002}, {"source": 3849, "target": 4336, "value": 0.7924058156930617}, {"source": 3850, "target": 4196, "value": 0.6168493695012488}, {"source": 3852, "target": 3921, "value": 0.6190207635995346}, {"source": 3859, "target": 3859, "value": 0.9999999999999997}, {"source": 3863, "target": 3863, "value": 0.9999999999999998}, {"source": 3866, "target": 4084, "value": 1.0}, {"source": 3866, "target": 4086, "value": 1.0}, {"source": 3866, "target": 4206, "value": 1.0}, {"source": 3866, "target": 4301, "value": 1.0}, {"source": 3869, "target": 3869, "value": 0.9999999999999999}, {"source": 3874, "target": 3874, "value": 1.0000000000000002}, {"source": 3877, "target": 3877, "value": 1.0}, {"source": 3878, "target": 3878, "value": 0.9999999999999999}, {"source": 3879, "target": 3879, "value": 0.9999999999999998}, {"source": 3881, "target": 3881, "value": 1.0}, {"source": 3885, "target": 4017, "value": 0.6160483741908467}, {"source": 3885, "target": 4064, "value": 0.6529998061608359}, {"source": 3887, "target": 4017, "value": 0.6194932847291902}, {"source": 3889, "target": 3889, "value": 0.9999999999999998}, {"source": 3889, "target": 4369, "value": 0.7977240352174657}, {"source": 3892, "target": 4084, "value": 1.0}, {"source": 3892, "target": 4086, "value": 1.0}, {"source": 3892, "target": 4206, "value": 1.0}, {"source": 3892, "target": 4301, "value": 1.0}, {"source": 3894, "target": 3894, "value": 1.0}, {"source": 3895, "target": 3895, "value": 0.9999999999999999}, {"source": 3895, "target": 3917, "value": 0.801783725737273}, {"source": 3896, "target": 3896, "value": 0.9999999999999998}, {"source": 3901, "target": 3901, "value": 1.0000000000000002}, {"source": 3902, "target": 3902, "value": 1.0000000000000002}, {"source": 3903, "target": 3903, "value": 1.0}, {"source": 3905, "target": 3917, "value": 0.7559289460184544}, {"source": 3906, "target": 3906, "value": 1.0}, {"source": 3906, "target": 3918, "value": 1.0}, {"source": 3910, "target": 3910, "value": 0.9999999999999999}, {"source": 3911, "target": 3918, "value": 1.0}, {"source": 3912, "target": 3918, "value": 0.7071067811865475}, {"source": 3913, "target": 3913, "value": 1.0000000000000002}, {"source": 3915, "target": 3915, "value": 1.0000000000000002}, {"source": 3915, "target": 3916, "value": 0.6666666666666669}, {"source": 3916, "target": 3916, "value": 1.0000000000000002}, {"source": 3917, "target": 3917, "value": 0.9999999999999998}, {"source": 3918, "target": 3918, "value": 1.0}, {"source": 3921, "target": 3921, "value": 1.0000000000000002}, {"source": 3923, "target": 3923, "value": 1.0}, {"source": 3924, "target": 4084, "value": 1.0}, {"source": 3924, "target": 4086, "value": 1.0}, {"source": 3924, "target": 4206, "value": 1.0}, {"source": 3924, "target": 4301, "value": 1.0}, {"source": 3925, "target": 4278, "value": 0.6666666666666669}, {"source": 3926, "target": 3926, "value": 1.0}, {"source": 3927, "target": 3927, "value": 1.0}, {"source": 3929, "target": 4084, "value": 1.0}, {"source": 3929, "target": 4086, "value": 1.0}, {"source": 3929, "target": 4206, "value": 1.0}, {"source": 3929, "target": 4301, "value": 1.0}, {"source": 3931, "target": 3931, "value": 1.0000000000000002}, {"source": 3933, "target": 3933, "value": 0.9999999999999998}, {"source": 3934, "target": 3934, "value": 1.0000000000000004}, {"source": 3940, "target": 4017, "value": 0.8017837257372732}, {"source": 3942, "target": 3942, "value": 1.0}, {"source": 3950, "target": 3950, "value": 0.9999999999999998}, {"source": 3952, "target": 3952, "value": 0.9999999999999996}, {"source": 3957, "target": 4084, "value": 1.0}, {"source": 3957, "target": 4086, "value": 1.0}, {"source": 3957, "target": 4206, "value": 1.0}, {"source": 3957, "target": 4301, "value": 1.0}, {"source": 3964, "target": 4084, "value": 1.0}, {"source": 3964, "target": 4086, "value": 1.0}, {"source": 3964, "target": 4206, "value": 1.0}, {"source": 3964, "target": 4301, "value": 1.0}, {"source": 3965, "target": 4084, "value": 1.0}, {"source": 3965, "target": 4086, "value": 1.0}, {"source": 3965, "target": 4206, "value": 1.0}, {"source": 3965, "target": 4301, "value": 1.0}, {"source": 3968, "target": 3968, "value": 1.0000000000000002}, {"source": 3968, "target": 4312, "value": 0.65991201759609}, {"source": 3969, "target": 3969, "value": 0.9999999999999998}, {"source": 3974, "target": 3974, "value": 1.0000000000000002}, {"source": 3976, "target": 3976, "value": 0.9999999999999999}, {"source": 3982, "target": 3982, "value": 1.0}, {"source": 3983, "target": 3983, "value": 0.9999999999999997}, {"source": 3983, "target": 3998, "value": 0.7559289460184545}, {"source": 3987, "target": 4277, "value": 0.6708203932499369}, {"source": 3988, "target": 3988, "value": 1.0}, {"source": 3992, "target": 3992, "value": 0.9999999999999999}, {"source": 3993, "target": 4278, "value": 0.6172133998483676}, {"source": 3996, "target": 3996, "value": 1.0}, {"source": 3998, "target": 3998, "value": 1.0}, {"source": 4008, "target": 4008, "value": 1.0}, {"source": 4015, "target": 4084, "value": 1.0}, {"source": 4015, "target": 4086, "value": 1.0}, {"source": 4015, "target": 4206, "value": 1.0}, {"source": 4015, "target": 4301, "value": 1.0}, {"source": 4017, "target": 4017, "value": 1.0}, {"source": 4017, "target": 4196, "value": 0.6608007883929171}, {"source": 4018, "target": 4018, "value": 0.9999999999999998}, {"source": 4019, "target": 4019, "value": 1.0000000000000002}, {"source": 4022, "target": 4022, "value": 1.0000000000000002}, {"source": 4024, "target": 4024, "value": 1.0000000000000002}, {"source": 4025, "target": 4025, "value": 1.0000000000000002}, {"source": 4030, "target": 4084, "value": 0.7071067811865475}, {"source": 4030, "target": 4086, "value": 0.7071067811865475}, {"source": 4030, "target": 4206, "value": 0.7071067811865475}, {"source": 4030, "target": 4301, "value": 0.7071067811865475}, {"source": 4037, "target": 4037, "value": 0.9999999999999998}, {"source": 4039, "target": 4039, "value": 1.0}, {"source": 4039, "target": 4200, "value": 0.9198662110078}, {"source": 4047, "target": 4047, "value": 0.9999999999999996}, {"source": 4048, "target": 4048, "value": 1.0000000000000002}, {"source": 4049, "target": 4049, "value": 1.0000000000000002}, {"source": 4050, "target": 4050, "value": 1.0}, {"source": 4056, "target": 4056, "value": 1.0000000000000002}, {"source": 4063, "target": 4063, "value": 0.9999999999999998}, {"source": 4064, "target": 4064, "value": 1.0000000000000002}, {"source": 4066, "target": 4084, "value": 1.0}, {"source": 4066, "target": 4086, "value": 1.0}, {"source": 4066, "target": 4206, "value": 1.0}, {"source": 4066, "target": 4301, "value": 1.0}, {"source": 4078, "target": 4078, "value": 0.9999999999999999}, {"source": 4079, "target": 4079, "value": 1.0000000000000002}, {"source": 4080, "target": 4080, "value": 1.0}, {"source": 4083, "target": 4083, "value": 0.9999999999999994}, {"source": 4084, "target": 4084, "value": 1.0}, {"source": 4084, "target": 4086, "value": 1.0}, {"source": 4084, "target": 4206, "value": 1.0}, {"source": 4084, "target": 4301, "value": 1.0}, {"source": 4085, "target": 4085, "value": 1.0000000000000002}, {"source": 4086, "target": 4086, "value": 1.0}, {"source": 4086, "target": 4206, "value": 1.0}, {"source": 4086, "target": 4301, "value": 1.0}, {"source": 4094, "target": 4094, "value": 0.9999999999999998}, {"source": 4101, "target": 4101, "value": 1.0}, {"source": 4106, "target": 4206, "value": 1.0}, {"source": 4106, "target": 4301, "value": 1.0}, {"source": 4108, "target": 4108, "value": 1.0}, {"source": 4110, "target": 4110, "value": 1.0000000000000002}, {"source": 4116, "target": 4116, "value": 1.0000000000000002}, {"source": 4124, "target": 4124, "value": 0.9999999999999998}, {"source": 4129, "target": 4129, "value": 1.0}, {"source": 4134, "target": 4134, "value": 1.0}, {"source": 4136, "target": 4206, "value": 1.0}, {"source": 4136, "target": 4301, "value": 1.0}, {"source": 4138, "target": 4138, "value": 0.9999999999999999}, {"source": 4139, "target": 4139, "value": 1.0}, {"source": 4140, "target": 4140, "value": 1.0}, {"source": 4142, "target": 4142, "value": 0.9999999999999999}, {"source": 4145, "target": 4145, "value": 1.0}, {"source": 4149, "target": 4149, "value": 0.9999999999999998}, {"source": 4151, "target": 4151, "value": 1.0000000000000002}, {"source": 4154, "target": 4206, "value": 1.0}, {"source": 4154, "target": 4301, "value": 1.0}, {"source": 4155, "target": 4155, "value": 1.0000000000000002}, {"source": 4156, "target": 4156, "value": 1.0000000000000002}, {"source": 4157, "target": 4157, "value": 0.9999999999999999}, {"source": 4165, "target": 4165, "value": 1.0}, {"source": 4166, "target": 4206, "value": 1.0}, {"source": 4166, "target": 4301, "value": 1.0}, {"source": 4169, "target": 4169, "value": 1.0000000000000002}, {"source": 4175, "target": 4175, "value": 1.0}, {"source": 4177, "target": 4177, "value": 1.0000000000000002}, {"source": 4178, "target": 4178, "value": 1.0000000000000002}, {"source": 4180, "target": 4180, "value": 1.0000000000000004}, {"source": 4183, "target": 4183, "value": 1.0000000000000002}, {"source": 4184, "target": 4184, "value": 0.9999999999999998}, {"source": 4187, "target": 4187, "value": 0.9999999999999998}, {"source": 4195, "target": 4195, "value": 1.0}, {"source": 4195, "target": 4332, "value": 0.6016299267309015}, {"source": 4196, "target": 4196, "value": 1.0000000000000002}, {"source": 4197, "target": 4197, "value": 0.9999999999999999}, {"source": 4200, "target": 4200, "value": 0.9999999999999998}, {"source": 4202, "target": 4202, "value": 1.0000000000000004}, {"source": 4206, "target": 4206, "value": 1.0}, {"source": 4206, "target": 4301, "value": 1.0}, {"source": 4211, "target": 4211, "value": 0.9999999999999997}, {"source": 4212, "target": 4212, "value": 1.0}, {"source": 4214, "target": 4214, "value": 1.0}, {"source": 4216, "target": 4216, "value": 0.9999999999999998}, {"source": 4217, "target": 4217, "value": 1.0}, {"source": 4218, "target": 4218, "value": 1.0}, {"source": 4222, "target": 4301, "value": 1.0}, {"source": 4223, "target": 4301, "value": 1.0}, {"source": 4224, "target": 4224, "value": 1.0000000000000002}, {"source": 4225, "target": 4225, "value": 1.0000000000000002}, {"source": 4226, "target": 4226, "value": 1.0000000000000002}, {"source": 4227, "target": 4227, "value": 0.9999999999999998}, {"source": 4229, "target": 4229, "value": 0.9999999999999999}, {"source": 4230, "target": 4230, "value": 1.0}, {"source": 4230, "target": 4356, "value": 0.7827248736613023}, {"source": 4230, "target": 4425, "value": 0.6591270461219715}, {"source": 4233, "target": 4233, "value": 0.9999999999999999}, {"source": 4234, "target": 4301, "value": 1.0}, {"source": 4239, "target": 4239, "value": 0.9999999999999996}, {"source": 4241, "target": 4241, "value": 0.9999999999999998}, {"source": 4242, "target": 4242, "value": 0.9999999999999997}, {"source": 4243, "target": 4301, "value": 1.0}, {"source": 4246, "target": 4246, "value": 1.0}, {"source": 4252, "target": 4252, "value": 0.9999999999999998}, {"source": 4254, "target": 4254, "value": 1.0000000000000002}, {"source": 4262, "target": 4301, "value": 1.0}, {"source": 4273, "target": 4273, "value": 0.9999999999999999}, {"source": 4275, "target": 4275, "value": 0.9999999999999998}, {"source": 4277, "target": 4277, "value": 1.0}, {"source": 4278, "target": 4278, "value": 1.0000000000000002}, {"source": 4279, "target": 4301, "value": 1.0}, {"source": 4282, "target": 4282, "value": 1.0000000000000002}, {"source": 4284, "target": 4284, "value": 0.9999999999999998}, {"source": 4286, "target": 4301, "value": 0.7071067811865475}, {"source": 4287, "target": 4287, "value": 1.0000000000000002}, {"source": 4295, "target": 4295, "value": 0.9999999999999998}, {"source": 4297, "target": 4369, "value": 0.7272727272727273}, {"source": 4298, "target": 4298, "value": 1.0000000000000002}, {"source": 4301, "target": 4301, "value": 1.0}, {"source": 4312, "target": 4312, "value": 1.0}, {"source": 4315, "target": 4315, "value": 0.9999999999999998}, {"source": 4316, "target": 4316, "value": 1.0000000000000007}, {"source": 4321, "target": 4321, "value": 1.0}, {"source": 4332, "target": 4332, "value": 1.0000000000000002}, {"source": 4333, "target": 4333, "value": 0.9999999999999996}, {"source": 4336, "target": 4336, "value": 1.0000000000000002}, {"source": 4344, "target": 4344, "value": 1.0000000000000002}, {"source": 4345, "target": 4345, "value": 1.0000000000000002}, {"source": 4355, "target": 4355, "value": 1.0000000000000004}, {"source": 4356, "target": 4356, "value": 0.9999999999999999}, {"source": 4356, "target": 4425, "value": 0.6573757351339165}, {"source": 4358, "target": 4358, "value": 1.0}, {"source": 4360, "target": 4360, "value": 0.9999999999999999}, {"source": 4362, "target": 4362, "value": 1.0000000000000002}, {"source": 4367, "target": 4367, "value": 1.0}, {"source": 4368, "target": 4368, "value": 1.0}, {"source": 4369, "target": 4369, "value": 1.0000000000000002}, {"source": 4383, "target": 4383, "value": 1.0}, {"source": 4384, "target": 4384, "value": 0.9999999999999999}, {"source": 4389, "target": 4389, "value": 1.0}, {"source": 4400, "target": 4400, "value": 1.0}, {"source": 4403, "target": 4403, "value": 0.9999999999999999}, {"source": 4404, "target": 4404, "value": 0.9999999999999996}, {"source": 4420, "target": 4420, "value": 1.0000000000000002}, {"source": 4421, "target": 4421, "value": 1.0000000000000002}, {"source": 4425, "target": 4425, "value": 0.9999999999999997}, {"source": 4425, "target": 4459, "value": 0.7092993656151904}, {"source": 4434, "target": 4434, "value": 1.0000000000000002}, {"source": 4438, "target": 4438, "value": 0.9999999999999999}, {"source": 4443, "target": 4443, "value": 1.0000000000000002}, {"source": 4444, "target": 4444, "value": 1.0}, {"source": 4445, "target": 4445, "value": 0.9999999999999998}, {"source": 4454, "target": 4454, "value": 0.9999999999999998}, {"source": 4459, "target": 4459, "value": 1.0}, {"source": 4460, "target": 4460, "value": 0.9999999999999999}]}